!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=17)}([function(t,e,n){"use strict";(function(t,r,i,a){n.d(e,"a",(function(){return nh})),n.d(e,"b",(function(){return yt})),n.d(e,"c",(function(){return es})),n.d(e,"d",(function(){return ns})),n.d(e,"e",(function(){return rs})),n.d(e,"f",(function(){return eu})),n.d(e,"g",(function(){return nu})),n.d(e,"h",(function(){return xc})),n.d(e,"i",(function(){return wc})),n.d(e,"j",(function(){return Cc})),n.d(e,"k",(function(){return Nc})),n.d(e,"l",(function(){return is})),n.d(e,"m",(function(){return as})),n.d(e,"n",(function(){return os})),n.d(e,"o",(function(){return iu})),n.d(e,"p",(function(){return ss})),n.d(e,"q",(function(){return lc})),n.d(e,"r",(function(){return fc})),n.d(e,"s",(function(){return Ke})),n.d(e,"t",(function(){return qs})),n.d(e,"u",(function(){return Hs})),n.d(e,"v",(function(){return Ks})),n.d(e,"w",(function(){return Xs})),n.d(e,"x",(function(){return Xn})),n.d(e,"y",(function(){return qp})),n.d(e,"z",(function(){return $n})),n.d(e,"A",(function(){return us})),n.d(e,"B",(function(){return cs})),n.d(e,"C",(function(){return pn})),n.d(e,"D",(function(){return An})),n.d(e,"E",(function(){return Rn})),n.d(e,"F",(function(){return Tn})),n.d(e,"G",(function(){return Dn})),n.d(e,"H",(function(){return _n})),n.d(e,"I",(function(){return Wu})),n.d(e,"J",(function(){return Uu})),n.d(e,"K",(function(){return Ju})),n.d(e,"L",(function(){return Gu})),n.d(e,"M",(function(){return ls})),n.d(e,"N",(function(){return ps})),n.d(e,"O",(function(){return We})),n.d(e,"P",(function(){return Qn})),n.d(e,"Q",(function(){return Ku})),n.d(e,"R",(function(){return qe})),n.d(e,"S",(function(){return au})),n.d(e,"T",(function(){return ou})),n.d(e,"U",(function(){return tl})),n.d(e,"V",(function(){return Tc})),n.d(e,"W",(function(){return p})),n.d(e,"X",(function(){return Nu})),n.d(e,"Y",(function(){return hs})),n.d(e,"Z",(function(){return fs})),n.d(e,"ab",(function(){return tr})),n.d(e,"bb",(function(){return ds})),n.d(e,"cb",(function(){return er})),n.d(e,"db",(function(){return Hc})),n.d(e,"eb",(function(){return Sn})),n.d(e,"fb",(function(){return ms})),n.d(e,"gb",(function(){return uu})),n.d(e,"hb",(function(){return zl})),n.d(e,"ib",(function(){return Lu})),n.d(e,"jb",(function(){return Zc})),n.d(e,"kb",(function(){return Eu})),n.d(e,"lb",(function(){return Ou})),n.d(e,"mb",(function(){return Kc})),n.d(e,"nb",(function(){return fn})),n.d(e,"ob",(function(){return kl})),n.d(e,"pb",(function(){return Wp})),n.d(e,"qb",(function(){return Yc})),n.d(e,"rb",(function(){return He})),n.d(e,"sb",(function(){return Dc})),n.d(e,"tb",(function(){return Au})),n.d(e,"ub",(function(){return Ru})),n.d(e,"vb",(function(){return Cl})),n.d(e,"wb",(function(){return En})),n.d(e,"xb",(function(){return Bc})),n.d(e,"yb",(function(){return gs})),n.d(e,"zb",(function(){return vs})),n.d(e,"Ab",(function(){return Pr})),n.d(e,"Bb",(function(){return Ys})),n.d(e,"Cb",(function(){return $s})),n.d(e,"Db",(function(){return Js})),n.d(e,"Eb",(function(){return Qu})),n.d(e,"Fb",(function(){return Ec})),n.d(e,"Gb",(function(){return cc})),n.d(e,"Hb",(function(){return hc})),n.d(e,"Ib",(function(){return cu})),n.d(e,"Jb",(function(){return Oc})),n.d(e,"Kb",(function(){return Ue})),n.d(e,"Lb",(function(){return Ic})),n.d(e,"Mb",(function(){return pu})),n.d(e,"Nb",(function(){return fu})),n.d(e,"Ob",(function(){return kc})),n.d(e,"Pb",(function(){return mu})),n.d(e,"Qb",(function(){return gu})),n.d(e,"Rb",(function(){return nr})),n.d(e,"Sb",(function(){return bs})),n.d(e,"Tb",(function(){return fh})),n.d(e,"Ub",(function(){return _u})),n.d(e,"Vb",(function(){return rr})),n.d(e,"Wb",(function(){return Cn})),n.d(e,"Xb",(function(){return In})),n.d(e,"Yb",(function(){return ir})),n.d(e,"Zb",(function(){return vu})),n.d(e,"ac",(function(){return _c})),n.d(e,"bc",(function(){return Rc})),n.d(e,"cc",(function(){return lr})),n.d(e,"dc",(function(){return hr})),n.d(e,"ec",(function(){return On})),n.d(e,"fc",(function(){return hn})),n.d(e,"gc",(function(){return xs})),n.d(e,"hc",(function(){return Fc})),n.d(e,"ic",(function(){return fr})),n.d(e,"jc",(function(){return nc})),n.d(e,"kc",(function(){return Xc})),n.d(e,"lc",(function(){return ws})),n.d(e,"mc",(function(){return Cs})),n.d(e,"nc",(function(){return gn})),n.d(e,"oc",(function(){return qc})),n.d(e,"pc",(function(){return zc})),n.d(e,"qc",(function(){return $u})),n.d(e,"rc",(function(){return Yp})),n.d(e,"sc",(function(){return xr})),n.d(e,"tc",(function(){return Ns})),n.d(e,"uc",(function(){return Ss})),n.d(e,"vc",(function(){return ks})),n.d(e,"wc",(function(){return As})),n.d(e,"xc",(function(){return dc})),n.d(e,"yc",(function(){return mc})),n.d(e,"zc",(function(){return gc})),n.d(e,"Ac",(function(){return vc})),n.d(e,"Bc",(function(){return yc})),n.d(e,"Cc",(function(){return Br})),n.d(e,"Dc",(function(){return Rs})),n.d(e,"Ec",(function(){return dr})),n.d(e,"Fc",(function(){return Jc})),n.d(e,"Gc",(function(){return Fn})),n.d(e,"Hc",(function(){return Ts})),n.d(e,"Ic",(function(){return ts})),n.d(e,"Jc",(function(){return bu})),n.d(e,"Kc",(function(){return mr})),n.d(e,"Lc",(function(){return gr})),n.d(e,"Mc",(function(){return Uc})),n.d(e,"Nc",(function(){return wu})),n.d(e,"Oc",(function(){return Ac})),n.d(e,"Pc",(function(){return _s})),n.d(e,"Qc",(function(){return Fs})),n.d(e,"Rc",(function(){return dn})),n.d(e,"Sc",(function(){return vn})),n.d(e,"Tc",(function(){return yn})),n.d(e,"Uc",(function(){return Dt})),n.d(e,"Vc",(function(){return Ge})),n.d(e,"Wc",(function(){return vr})),n.d(e,"Xc",(function(){return Gc})),n.d(e,"Yc",(function(){return ph})),n.d(e,"Zc",(function(){return Lc})),n.d(e,"ad",(function(){return yr})),n.d(e,"bd",(function(){return br})),n.d(e,"cd",(function(){return at})),n.d(e,"dd",(function(){return wn})),n.d(e,"ed",(function(){return eh})),n.d(e,"fd",(function(){return Qs})),n.d(e,"gd",(function(){return tu})),n.d(e,"hd",(function(){return Nn})),n.d(e,"id",(function(){return kn}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function s(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(n,e[0],e[1]),e.join("=")})),n);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],i=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,i)}))}},t}();function p(){return h}var h=null,f=new Map;function d(t,e){var n=v(t,e);return f.get(n)}function m(t){for(var e=f.entries(),n=[];;){var r=e.next(),i=r.done,a=r.value;if(i)break;var o=a[0],s=a[1];o.split("_")[0]===t&&n.push(s)}return n}function g(t){var e=t.kernelName,n=t.backendName,r=v(e,n);if(f.has(r))throw new Error("The kernel '"+e+"' for backend '"+n+"' is already registered");f.set(r,t)}function v(t,e){return e+"_"+t}function y(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function b(t,e,n){return Math.max(t,Math.min(e,n))}function x(t){return t%2==0?t:t+1}function w(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function C(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function N(t,e,n){void 0===n&&(n=""),C(I(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}function S(t){C(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function E(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||V(t)&&!n)for(var r=0;r<t.length;++r)E(t[r],e,n);else e.push(t);return e}function O(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function I(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function k(t){return t%1==0}function A(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function R(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function T(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function D(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,i){var a=0,o=function(){if(t())r();else{var s=e(++a);null!=n&&a>=n?i():setTimeout(o,s)}};o()}))}function _(t,e){for(var n=1,r=-1,i=0;i<t.length;++i)if(t[i]>=0)n*=t[i];else if(-1===t[i]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+i);r=i}else if(t[i]<0)throw Error("Shapes can not be < 0. Found "+t[i]+" at dim "+i);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var a=t.slice();return a[r]=e/n,a}function F(t,e){var n=e.length;return C((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),C(t.every((function(t){return k(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function M(t,e){for(var n=[],r=[],i=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||i?null:F(e,t).sort(),o=0,s=0;s<t.length;++s){if(null!=a){if(a[o]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==a[o]||a[o]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),a[o]<=s&&o++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function z(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function L(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function B(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function P(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function j(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function V(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function W(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function U(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function G(t){return"string"==typeof t||t instanceof String}function q(t){return"boolean"==typeof t}function H(t){return"number"==typeof t}function K(t){return Array.isArray(t)?K(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":H(t)?"float32":G(t)?"string":q(t)?"bool":"float32"}function X(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function $(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function J(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=E(t)),n&&B(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),i=0;i<r.length;++i)0!==Math.round(t[i])&&(r[i]=1);return r}throw new Error("Unknown data type "+e)}function Z(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var i=new Array;if(1===n.length)for(var a=n[0],o=0;o<a;o++)i[o]=r[e+o];else{a=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(o=0;o<a;o++)i[o]=t(e+o*u,s,r)}return i}(0,t,e)}function Q(t,e){for(var n=tt(t,e),r=0;r<n.length;r++)n[r]=1;return n}function tt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function et(){return p().platform.now()}function nt(t){t.forEach((function(e){C(Number.isInteger(e)&&e>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function rt(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",p().platform.encode(t,e)}function it(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",p().platform.decode(t,e)}var at=Object.freeze({shuffle:y,clamp:b,nearestLargerEven:x,sum:w,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var i=Number(t[r])-Number(e[r]);n+=i*i}return n},assert:C,assertShapesMatch:N,assertNonNull:S,flatten:E,sizeFromShape:O,isScalarShape:function(t){return 0===t.length},arraysEqual:I,isInt:k,tanh:A,sizeToSquarishShape:R,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:T,repeatedTry:D,inferFromImplicitShape:_,parseAxisParam:F,squeezeShape:M,getTypedArrayFromDType:z,getArrayFromDType:L,checkConversionForErrors:B,isValidDtype:P,hasEncodingLoss:j,isTypedArray:V,bytesPerElement:W,bytesFromStringArray:U,isString:G,isBoolean:q,isNumber:H,inferDtype:K,isFunction:X,nearestDivisor:Y,computeStrides:$,toTypedArray:J,toNestedArray:Z,makeOnesTypedArray:Q,makeZerosTypedArray:tt,now:et,assertNonNegativeIntegerDimensions:nt,fetch:function(t,e){return p().platform.fetch(t,e)},encodeString:rt,decodeString:it}),ot=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new st)}return t.prototype.profileKernel=function(t,e,n){var r,i=this,a=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return!1;for(var r=0;r<t.length;r++){var i=t[r];if(isNaN(i)||!isFinite(i))return console.warn("Found "+i+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),a.then((function(a){var o="";null!=a.getExtraProfileInfo&&(o=a.getExtraProfileInfo()),i.logger.logKernelProfile(t,n,r,a.kernelMs,e,o)}))}))})),r},t}(),st=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,i,a){var o=T(r+"ms",9),s=T(t,25),u=e.rank,c=e.size,l=T(e.shape.toString(),14),p="";for(var h in i){var f=i[h].shape,d=f.length;p+=h+": "+d+"D "+(d>0?f:"")+" "}console.log("%c"+s+"\t%c"+o+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+p+"\t%c"+a,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}(),ut=20,ct=3,lt=7;function pt(t,e,n){return T(Array.isArray(t)?parseFloat(t[0].toFixed(lt))+" + "+parseFloat(t[1].toFixed(lt))+"j":G(t)?"'"+t+"'":"bool"===n?ht(t):parseFloat(t.toFixed(lt)).toString(),e)}function ht(t){return 0===t?"false":"true"}function ft(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var dt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=O(t),null!=n){var i=n.length;C(i===this.size,(function(){return"Length of values '"+i+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||L(e,this.size),this.strides=$(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),C(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var i=this.locToIndex(n);this.values[i]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,i=t;r<i.length;r++){var a=i[r];if(a<0||a>=this.shape[n]){var o="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(o)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return mt().makeTensor(this.values,this.shape,this.dtype)},t}(),mt=null,gt=null,vt=null,yt=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=O(t),this.strides=$(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,i){return this.throwIfDisposed(),this.reshape([t,e,n,r,i])},t.prototype.asType=function(t){return this.throwIfDisposed(),gt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,gt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return gt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,Z(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return Z(this.shape,this.dataSync())},t.prototype.data=function(){return u(this,void 0,void 0,(function(){var t,e;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=mt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return it(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=mt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return it(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,mt().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(mt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),gt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),gt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),gt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),gt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),gt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),gt.clone(this)},t.prototype.oneHot=function(t,e,n){return this.throwIfDisposed(),gt.oneHot(this,t,e,n)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,e,n,r){var i=$(e),a=function(t,e,n,r){var i=O(e),a=r[r.length-1],o=new Array(a).fill(0),s=e.length,u="complex64"===n?ft(t):t;if(s>1)for(var c=0;c<i/a;c++)for(var l=c*a,p=0;p<a;p++)o[p]=Math.max(o[p],pt(u[l+p],0,n).length);return o}(t,e,n,i),o=e.length,s=function t(e,n,r,i,a,o){void 0===o&&(o=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[pt(ft(e)[0],0,r)]:"bool"===r?[ht(e[0])]:[e[0].toString()];if(1===c){if(u>ut){var l=ct*s,p=Array.from(e.slice(0,l)),h=Array.from(e.slice((u-ct)*s,u*s));return"complex64"===r&&(p=ft(p),h=ft(h)),["["+p.map((function(t,e){return pt(t,a[e],r)})).join(", ")+", ..., "+h.map((function(t,e){return pt(t,a[u-ct+e],r)})).join(", ")+"]"]}return["["+("complex64"===r?ft(e):Array.from(e)).map((function(t,e){return pt(t,a[e],r)})).join(", ")+"]"]}var f=n.slice(1),d=i.slice(1),m=i[0]*s,g=[];if(u>ut){for(var v=0;v<ct;v++){var y=(b=v*m)+m;g.push.apply(g,t(e.slice(b,y),f,r,d,a,!1))}g.push("...");for(v=u-ct;v<u;v++){y=(b=v*m)+m;g.push.apply(g,t(e.slice(b,y),f,r,d,a,v===u-1))}}else for(v=0;v<u;v++){var b;y=(b=v*m)+m;g.push.apply(g,t(e.slice(b,y),f,r,d,a,v===u-1))}var x=2===c?",":"";g[0]="["+g[0]+x;for(v=1;v<g.length-1;v++)g[v]=" "+g[v]+x;var w=",\n";for(v=2;v<c;v++)w+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(o?"":w),g}(t,e,n,i,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+o),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return"    "+t})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),gt.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),gt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),gt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),gt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),gt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),gt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),gt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),gt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),gt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),gt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),gt.unstack(this,t)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),gt.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,i){return void 0===n&&(n=.001),vt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,i,r,n)},t.prototype.batchNorm=function(t,e,n,r,i){return void 0===i&&(i=.001),this.throwIfDisposed(),gt.batchNorm(this,t,e,n,r,i)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),gt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),gt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),gt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),gt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),gt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),gt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),gt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),gt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),gt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),gt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),gt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),gt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),gt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),gt.div(this,t)},t.prototype.divNoNan=function(t){return this.throwIfDisposed(),gt.divNoNan(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),gt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),gt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),gt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),gt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),gt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),gt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),gt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),gt.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),gt.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),gt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),gt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),gt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),gt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),gt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),gt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),gt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),gt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),gt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),gt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),gt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),gt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),gt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),gt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),gt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),gt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),gt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),gt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),gt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),gt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),gt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),gt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),gt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),gt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),gt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),gt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),gt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),gt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),gt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),gt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),gt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),gt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),gt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),gt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),gt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),gt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),gt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),gt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),gt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),gt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),gt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),gt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),gt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),gt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),gt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),gt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),gt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),gt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),gt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),gt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),gt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),gt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),gt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),gt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),gt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),gt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),gt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),gt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),gt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),gt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),gt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),gt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),gt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),gt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),gt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),gt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,i,a){return void 0===r&&(r="NWC"),void 0===i&&(i=1),this.throwIfDisposed(),gt.conv1d(this,t,e,n,r,i,a)},t.prototype.conv2d=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),gt.conv2d(this,t,e,n,r,i,a)},t.prototype.conv2dTranspose=function(t,e,n,r,i){return this.throwIfDisposed(),gt.conv2dTranspose(this,t,e,n,r,i)},t.prototype.depthwiseConv2D=function(t,e,n,r,i,a){return void 0===r&&(r="NHWC"),void 0===i&&(i=[1,1]),this.throwIfDisposed(),gt.depthwiseConv2d(this,t,e,n,r,i,a)},t.prototype.separableConv2d=function(t,e,n,r,i,a){return void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC"),this.throwIfDisposed(),gt.separableConv2d(this,t,e,n,r,i,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),gt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),gt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),gt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,i){return this.throwIfDisposed(),gt.pool(this,t,e,n,r,i)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),mt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),gt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),gt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),gt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),gt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,i,a,o,s){return void 0===r&&(r=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),this.throwIfDisposed(),gt.stridedSlice(this,t,e,n,r,i,a,o,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),gt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),gt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),gt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),gt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),gt.spectral.irfft(this)},t}();Object.defineProperty(yt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var bt,xt,wt,Ct,Nt,St=function(t){function e(e,n,r,i){var a=t.call(this,e.shape,e.dtype,e.dataId,i)||this;return a.trainable=n,a.name=r,a}return s(e,t),e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!I(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");mt().disposeTensor(this),this.dataId=t.dataId,mt().incRef(this,null)},e.prototype.dispose=function(){mt().disposeVariable(this),this.isDisposedInternal=!0},e}(yt);Object.defineProperty(St,Symbol.hasInstance,{value:function(t){return t instanceof yt&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(bt||(bt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(xt||(xt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(wt||(wt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Ct||(Ct={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(Nt||(Nt={}));var Et={float32:Ct,int32:xt,bool:wt,complex64:Nt};function Ot(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return Et[t][e]}function It(t){return Ot(t,"int32")}function kt(t,e){if(t.dtype===e.dtype)return[t,e];var n=Ot(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function At(t,e){C(t.dtype===e.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}))}function Rt(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof yt)n.push(e);else if(i=e,Array.isArray(i)||"object"==typeof i){var i,a=e;for(var o in a){var s=a[o];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}var Tt,Dt=Object.freeze({makeTypesMatch:kt,assertTypesMatch:At,isTensorInList:function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1},getTensorsInContainer:Rt}),_t=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Ft=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new _t}return t.prototype.ready=function(){return u(this,void 0,void 0,(function(){var t,e,n;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(i){switch(i.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return r=i.sent(),[3,3];case 2:r=n,i.label=3;case 3:if(!r)return[2,!1];i.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ot(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;m(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;m(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var i=++this.pendingBackendInitId,a=r.then((function(n){return!(i<e.pendingBackendInitId||(e.registry[t]=n,e.pendingBackendInit=null,0))})).catch((function(n){return!(i<e.pendingBackendInitId||(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),i=r.success,a=r.asyncInit;if(a||i)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,i=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,i,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,i=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");i=t}return this.scopedRun((function(){return r.startScope(i)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[]),e},t.prototype.runKernel=function(t,e,n,r,i){return this.runKernelFunc(null,e,null,t,n,r,i)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),i=0;n.forEach((function(t){i+="complex64"===t.dtype?3:1}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-e-i-a;if(o>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+o+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,e,n,r,i,a,o){var s,u=this;void 0===a&&(a=[]),void 0===o&&(o=[]);var c,l=[],p=this.isTapeOn(),h=null!=this.state.activeScope?this.state.activeScope.name:"",f=function(t){p&&(l=t.map((function(t){return u.keep(u.clone(t))})))},m=this.state.numBytes,g=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,y=d(r,this.backendName);return c=null!=y?function(){var t=u.backend.numDataIds();v=y.kernelFunc({inputs:e,attrs:i,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(h,t,n);var r=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)})),s=r.filter((function(t,e){return o[e]}));return f(a.slice().concat(s)),r}:function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,f)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(h,e,n),n},this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool("DEBUG")?u.profiler.profileKernel(h,e,(function(){return c()})):c()})),p&&this.addTapeNode(h,e,s,n,l),this.state.profiling&&this.state.activeProfile.kernels.push({name:h,bytesAdded:this.state.numBytes-m,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-g,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;var i=t;"string"===n&&G(t[0])&&(i=t.map((function(t){return rt(t)})));var a=r.write(i,e,n),o=new yt(e,n,a,this.nextTensorId());if(this.incRef(o,r),"string"===n){var s=this.state.tensorInfo.get(a),u=U(i);this.state.numBytes+=u-s.bytes,s.bytes=u}return o},t.prototype.makeTensorFromDataId=function(t,e,n,r){var i=new yt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(i,r),i},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var i=new St(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[i.name])throw new Error("Variable with name "+i.name+" was already registered");return this.state.registeredVariables[i.name]=i,this.incRef(i,this.backend),i},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*W(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof St||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,i){var a=this,o={id:this.state.nextTapeNodeId++,name:t,inputs:e,outputs:n,saved:i};null!=r&&(o.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],i=tt(r.size,r.dtype);return a.makeTensor(i,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],i)}),this.state.activeTape.push(o)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=Rt(t),r=new Set(n.map((function(t){return t.id}))),i=0;i<this.state.activeScope.track.length;i++){var a=this.state.activeScope.track[i];a.kept||r.has(a.id)||a.dispose()}var o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==o.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var i=this;if(void 0===r&&(r=!1),C(e.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var a=this.scopedRun((function(){return i.startTape()}),(function(){return i.endTape()}),(function(){return i.tidy("forward",t)}));C(a instanceof yt,(function(){return"The result y returned by f() must be a tensor."}));var o=function(t,e,n){for(var r={},i={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var o=(d=t[a]).inputs;for(var s in o){for(var u=o[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){d.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,i[d.id]=!0;break}if(c)break}}var p={};p[n.id]=!0;var h={};for(a=t.length-1;a>=0;a--)for(o=(d=t[a]).inputs,l=0;l<d.outputs.length;l++)if(p[d.outputs[l].id]){for(var s in o)p[o[s].id]=!0,h[d.id]=!0;break}var f=[];for(a=0;a<t.length;a++){var d;if(i[(d=t[a]).id]&&h[d.id]){var m={};for(var s in d.inputs){var g=d.inputs[s];r[g.id]&&(m[s]=g)}var v=Object.assign({},d);v.inputs=m,v.outputs=d.outputs,f.push(v)}}return f}(this.state.activeTape,e,a);if(!r&&0===o.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[a.id]=null==n?(r=Q(O(t=a.shape),"float32"),Mt.makeTensor(r,t,"float32")):n,function(t,e,n){for(var r=function(r){var i=e[r],a=[];if(i.outputs.forEach((function(e){var n=t[e.id];null!=n?a.push(n):a.push(null)})),null==i.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+i.name+".");var o=i.gradient(a),s=function(e){if(!(e in o))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(o)+".");var r=n((function(){return o[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+i.name+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var a=i.inputs[e];if(!I(r.shape,a.shape))throw new Error("Error in gradient for op "+i.name+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+a.shape+"'");if(null==t[a.id])t[a.id]=r;else{var s=t[a.id];t[a.id]=s.add(r),s.dispose()}};for(var u in i.inputs)s(u)},i=e.length-1;i>=0;i--)r(i)}(s,o,(function(t){return i.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===i.state.gradientDepth&&(i.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++)n[e].dispose()})),i.state.activeTape=null),{value:a,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return C(X(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];C(r.every((function(t){return t instanceof yt})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var a={};return r.forEach((function(t,e){a[e]=t})),e.runKernelFunc((function(e,i){return C((n=t.apply(void 0,r.concat([i]))).value instanceof yt,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),C(X(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),a,(function(t,e){var i=n.gradFunc(t,e),a=Array.isArray(i)?i:[i];C(a.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),C(a.every((function(t){return t instanceof yt})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var o={};return a.forEach((function(t,e){o[e]=function(){return t}})),o}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:return e=et(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=et()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new _t,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Mt=function(){var e=function(){if(null==Tt){var e=void 0;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Tt=e}return Tt}();if(null==e._tfengine){var n=new l(e);e._tfengine=new Ft(n)}return function(t){h=t}(e._tfengine.ENV),mt=function(){return e._tfengine},e._tfengine}();function zt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Lt=p();Lt.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Lt.registerFlag("IS_BROWSER",(function(){return zt()})),Lt.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),Lt.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Lt.registerFlag("PROD",(function(){return!1})),Lt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Lt.getBool("DEBUG")})),Lt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Lt.registerFlag("IS_TEST",(function(){return!1}));var Bt,Pt,jt,Vt={},Wt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ut(t,e){Vt[t]=e}function Gt(t){t in Vt||(Vt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete Vt[t]}),!1),1===t?e.getContext("webgl",Wt)||e.getContext("experimental-webgl",Wt):e.getContext("webgl2",Wt)}(t));var e=Vt[t];return e.isContextLost()?(delete Vt[t],Gt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Vt[t])}function qt(t,e){return[e,t]}function Ht(t){var e=O(t);return R(Math.ceil(e/4))}function Kt(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Xt(t,e){var n,r,i,a,o,s,u,c,l,h=t;return 2===p().getNumber("WEBGL_VERSION")?(n=h.R32F,r=h.R16F,i=h.RGBA16F,a=h.RGBA32F,o=h.RED,s=4,u=1,c=h.HALF_FLOAT,l=h.FLOAT):(n=t.RGBA,r=t.RGBA,i=t.RGBA,a=h.RGBA,o=t.RGBA,s=4,u=4,c=null!=e?e.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:a,textureFormatFloat:o,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:l}}function Yt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+Qt(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Bt||(Bt={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Pt||(Pt={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(jt||(jt={}));var $t=5.96e-8,Jt=65504;function Zt(t){return!!(p().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||$t<Math.abs(t)&&Math.abs(t)<Jt)}function Qt(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function te(t,e,n){return Ne(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function ee(t,e,n){var r=Ne(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(Yt(t,e,(function(){return t.shaderSource(r,n)})),Yt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function ne(t,e,n){var r=Ne(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(Yt(t,e,(function(){return t.shaderSource(r,n)})),Yt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ae.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],i=t.split("\n"),a=i.length.toString().length+2,o=i.map((function(t,e){return T((e+1).toString(),a)+t})),s=0,u=0;u<o.length;u++)s=Math.max(o[u].length,s);var c=o.slice(0,r-1),l=o.slice(r-1,r),p=o.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+T(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(p.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var re,ie,ae=/ERROR: [0-9]+:([0-9]+):/g;function oe(t,e){return Ne(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function se(t,e,n){if(Yt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function ue(t,e,n){if(Yt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function ce(t,e,n){var r=Ne(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Yt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Yt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function le(t,e,n){var r=Ne(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Yt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Yt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return Ne(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function he(t,e){var n=p().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function fe(t,e){return Ne(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function de(t,e,n,r,i,a,o,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Yt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,i)})),Yt(t,e,(function(){return t.vertexAttribPointer(u,a,t.FLOAT,!1,o,s)})),Yt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function me(t,e,n,r){Se(t,r),Yt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function ge(t,e,n,r){return Ne(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function ve(t,e,n){return t.getUniformLocation(e,n)}function ye(t,e,n,r,i,a){Yt(t,e,(function(){return me(t,e,r,a)})),Yt(t,e,(function(){return t.uniform1i(i,a)}))}function be(t,e,n,r){Yt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Yt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function xe(t,e,n){Yt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Yt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function we(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Ce(t,e))}function Ce(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function Ne(t,e,n,r){var i=Yt(t,e,(function(){return n()}));if(null==i)throw new Error(r);return i}function Se(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Ee(t,e){return void 0===e&&(e=2),O(t.slice(0,t.length-e))}function Oe(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Ie(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ee(t)].concat(Oe(t))),e}function ke(t,e){var n;void 0===e&&(e=!1);var r=p().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?x(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var i=M(t);t=i.newShape}var a=O(t);if(t.length<=1&&a<=r)return[1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var o=Ee(t),s=2,u=2;return t.length&&(s=(n=Oe(t))[0],u=n[1]),R(a=o*(s/2)*(u/2)).map((function(t){return 2*t}))}return R(a)}function Ae(t){return t%2==0}function Re(t,e){if(I(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Ae(n)&&Ae(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Ae(t[0])&&Ae(e[0])}function Te(t){if(null==re){var e=Gt(t);re=e.getParameter(e.MAX_TEXTURE_SIZE)}return re}function De(t){if(null==ie){var e=Gt(t);ie=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ie)}function _e(t){if(0===t)return 0;var e=Gt(t);return Fe(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Fe(e,"EXT_disjoint_timer_query")?1:0}function Fe(t,e){return null!=t.getExtension(e)}function Me(t){try{if(null!=Gt(t))return!0}catch(t){return!1}return!1}function ze(t){if(0===t)return!1;var e=Gt(t);if(1===t){if(!Fe(e,"OES_texture_float"))return!1}else if(!Fe(e,"EXT_color_buffer_float"))return!1;return Be(e)}function Le(t){if(0===t)return!1;var e=Gt(t);if(1!==t){if(Fe(e,"EXT_color_buffer_float"))return Be(e);if(Fe(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=Xt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(i),a}(e,n)}return!1}return!!Fe(e,"OES_texture_float")&&!!Fe(e,"WEBGL_color_buffer_float")&&Be(e)}function Be(t){var e=Xt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),i}function Pe(t){return 2===t&&null!=Gt(t).fenceSync}var je=Object.freeze({callAndCheck:Yt,canBeRepresented:Zt,getWebGLErrorMessage:Qt,getExtensionOrThrow:te,createVertexShader:ee,createFragmentShader:ne,createProgram:oe,linkProgram:se,validateProgram:ue,createStaticVertexBuffer:ce,createStaticIndexBuffer:le,getNumChannels:function(){return 2===p().getNumber("WEBGL_VERSION")?1:4},createTexture:pe,validateTextureSize:he,createFramebuffer:fe,bindVertexBufferToProgramAttribute:de,bindTextureUnit:me,unbindTextureUnit:function(t,e,n){Se(t,n),Yt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:ge,getProgramUniformLocation:ve,bindTextureToProgramUniformSampler:ye,bindCanvasToFramebuffer:function(t,e){Yt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Yt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Yt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:be,unbindColorTextureFromFramebuffer:xe,validateFramebuffer:we,getFramebufferErrorMessage:Ce,getBatchDim:Ee,getRowsCols:Oe,getShapeAs3D:Ie,getTextureShapeFromLogicalShape:ke,isReshapeFree:Re,getWebGLMaxTextureSize:Te,resetMaxTextureSize:function(){re=null},resetMaxTexturesInShader:function(){ie=null},getMaxTexturesInShader:De,getWebGLDisjointQueryTimerVersion:_e,hasExtension:Fe,isWebGLVersionEnabled:Me,isCapableOfRenderingToFloatTexture:ze,isDownloadFloatTextureEnabled:Le,isWebGLFenceEnabled:Pe}),Ve=p();function We(t){p().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Ue(){return Mt.memory()}function Ge(t,e){return Mt.tidy(t,e)}function qe(t){Rt(t).forEach((function(t){return t.dispose()}))}function He(t){return Mt.keep(t)}function Ke(){return Mt.backend}function Xe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];p().getBool("IS_TEST")||console.warn.apply(console,t)}function Ye(t,e){var n=t;if(V(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||V(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&p().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],Array.isArray(e)||V(e)){C(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),C(e.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var i=n.slice(1),a=0;a<e.length;++a)t(e[a],i,r.concat(a))}else C(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(t,r,[]),r}function $e(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function Je(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof yt)return $e(r,t.dtype,e,n),t;var i=K(t);if("string"!==i&&["bool","int32","float32"].indexOf(r)>=0&&(i=r),$e(r,i,e,n),null==t||!V(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var a=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+a+"'")}var o=Ye(t,i);V(t)||Array.isArray(t)||(t=[t]);var s="string"!==i?J(t,i,p().getBool("DEBUG")):E(t,[],!0);return Mt.makeTensor(s,o,i)}function Ze(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return Je(t,e+"["+r+"]",n)}),r)}function Qe(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function tn(t,e,n){for(var r=t.length+e.length,i=[],a=0,o=0,s=0;s<r;s++)-1===n.indexOf(s)?i.push(t[a++]):i.push(e[o++]);return i}function en(t,e){for(var n=[],r=t.length,i=0;i<r;i++)-1===e.indexOf(i)&&n.push(t[i]);return[n,e.map((function(e){return t[e]}))]}function nn(t,e){return tn(t,e.map((function(t){return 1})),e)}function rn(t,e,n){C(Qe(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}))}function an(t,e){if(Qe(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function on(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function sn(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function un(t,e){var n=t[0].length;t.forEach((function(t,e){C(t.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}))})),C(e>=0&&e<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,i){for(var a=0;a<n;a++)C(a===e||t[a]===r[a],(function(){return"Error in concat"+n+"D: Shape of tensors["+i+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+i+"."}))}))}function cn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function ln(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Mt.startScope(n);try{var i=r.apply(void 0,t);return i instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Mt.endScope(i),i}catch(t){throw Mt.endScope(null),t}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}Ve.registerFlag("HAS_WEBGL",(function(){return Ve.getNumber("WEBGL_VERSION")>0})),Ve.registerFlag("WEBGL_VERSION",(function(){return Me(2)?2:Me(1)?1:0})),Ve.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===Ve.get("WEBGL_VERSION")})),Ve.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),Ve.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),Ve.registerFlag("WEBGL_PACK",(function(){return Ve.getBool("HAS_WEBGL")})),Ve.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_CLIP",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),Ve.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_PACK_REDUCE",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_CONV_IM2COL",(function(){return Ve.getBool("WEBGL_PACK")})),Ve.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Te(Ve.getNumber("WEBGL_VERSION"))})),Ve.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return De(Ve.getNumber("WEBGL_VERSION"))})),Ve.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=Ve.getNumber("WEBGL_VERSION");return 0===t?0:_e(t)})),Ve.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return Ve.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),Ve.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return ze(Ve.getNumber("WEBGL_VERSION"))})),Ve.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!Ve.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ve.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),Ve.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return Le(Ve.getNumber("WEBGL_VERSION"))})),Ve.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Pe(Ve.getNumber("WEBGL_VERSION"))})),Ve.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return Ve.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),vt=We;var pn=ln({complex_:function(t,e){var n=Je(t,"real","complex"),r=Je(e,"imag","complex");return N(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Mt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),hn=ln({real_:function(t){var e=Je(t,"input","real");return Mt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),fn=ln({imag_:function(t){var e=Je(t,"input","imag");return Mt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function dn(t,e,n){return mn(t,e,Ye(t,n),n)}function mn(t,e,n,r){if(null==r&&(r=K(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!V(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){nt(e);var i=O(e),a=O(n);C(i===a,(function(){return"Based on the provided shape, ["+e+"], the tensor should have "+i+" values but has "+a}));for(var o=0;o<n.length;++o){var s=n[o],u=o!==n.length-1||s!==O(e.slice(o));C(n[o]===e[o]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}))}}return V(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?J(t,r,p().getBool("DEBUG")):E(t,[],!0),Mt.makeTensor(t,e,r)}function gn(t,e){if((V(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&V(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return mn(t,[],[],e)}function vn(t,e){S(t);var n=Ye(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return mn(t,null,n,e)}function yn(t,e,n){if(S(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=Ye(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return mn(t,e,r,n)}function bn(t,e,n){if(S(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=Ye(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return mn(t,e,r,n)}function xn(t,e,n){if(S(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=Ye(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return mn(t,e,r,n)}function wn(t,e,n,r){return void 0===e&&(e=!0),Mt.makeVariable(t,e,n,r)}function Cn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Cn(t,"float32"),r=Nn(t,"float32");return pn(n,r)}var i=Q(O(t),e);return Mt.makeTensor(i,t,e)}function Nn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Nn(t,"float32"),r=Nn(t,"float32");return pn(n,r)}var i=tt(O(t),e);return Mt.makeTensor(i,t,e)}function Sn(t,e,n){return Mt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function En(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Mt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function On(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Nn([0],r);var i=tt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),i[0]=t;for(var a=1;a<i.length;a++)i[a]=i[a-1]+n;return vn(i,r)}var In=ln({onesLike_:function(t){var e=Je(t,"x","onesLike");if("complex64"===e.dtype){var n=In(hn(e)),r=kn(fn(e));return pn(n,r)}return Mt.runKernelFunc((function(t){return t.onesLike(e)}),{$x:e},(function(t,e){return{$x:function(){return kn(t)}}}))}}),kn=ln({zerosLike_:function(t){var e=Je(t,"x","zerosLike");return Mt.runKernelFunc((function(t){return t.zerosLike(e)}),{$x:e},(function(t,e){return{$x:function(){return kn(t)}}}))}}),An=ln({concat_:function(t,e){void 0===e&&(e=0),C(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=Ze(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=F(e,n[0].shape)[0];var r=cn(n.map((function(t){return t.shape})),e);if(0===O(r))return dn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var i=n.map((function(t){return t.shape}));un(i,e);var a=n,o={axis:e};return Mt.runKernelFunc((function(t){return t.concat(n,e)}),a,(function(t){var n=i.map((function(t){return t[e]}));return Fn(t,n,e).map((function(t){return function(){return t}}))}),"Concat",o)}}),Rn=ln({concat1d_:function(t){return An(t,0)}}),Tn=ln({concat2d_:function(t,e){return An(t,e)}}),Dn=ln({concat3d_:function(t,e){return An(t,e)}}),_n=ln({concat4d_:function(t,e){return An(t,e)}}),Fn=ln({split_:function(t,e,n){void 0===n&&(n=0);var r,i=Je(t,"x","split");return n=F(n,i.shape)[0],"number"==typeof e?(C(i.shape[n]%e==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(e).fill(i.shape[n]/e)):(C(i.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=e),Mt.runKernelFunc((function(t){return t.split(i,r,n)}),{$x:i},(function(t){return{$x:function(){return An(t,n)}}}))}});function Mn(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var zn=Mn((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function i(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.alea=a}(0,t)})),Ln=Mn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function i(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.xor128=a}(0,t)})),Bn=Mn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function i(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.xorwow=a}(0,t)})),Pn=Mn((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function i(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.x&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.xorshift7=a}(0,t)})),jn=Mn((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,i=e.X,a=e.i;return e.w=r=r+1640531527|0,n=i[a+34&127],t=i[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=i[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,i,a,o,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),i=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,i=0==(n=s[127&a]^=r+o)?i+1:0);for(i>=128&&(s[127&(e&&e.length||0)]=-1),i=127,a=512;a>0;--a)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;t.w=o,t.X=s,t.i=i}(e,t)}function i(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.X&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.xor4096=a}(0,t)})),Vn=Mn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,i=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function i(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&i(a,n),o.state=function(){return i(n,{})}),o}e&&e.exports?e.exports=a:this.tychei=a}(0,t)})),Wn=Mn((function(t){!function(e,r){var i,a=this,o=256,s=6,u="random",c=r.pow(o,s),l=r.pow(2,52),p=2*l,h=o-1;function f(t,n,h){var f=[],y=g(function t(e,n){var r,i=[],a=typeof e;if(n&&"object"==a)for(r in e)try{i.push(t(e[r],n-1))}catch(t){}return i.length?i:"string"==a?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,v(e)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(o):(t=new Uint8Array(o),(a.crypto||a.msCrypto).getRandomValues(t)),v(t)}catch(t){var n=a.navigator,r=n&&n.plugins;return[+new Date,a,r,a.screen,v(e)]}}():t,3),f),b=new d(f),x=function(){for(var t=b.g(s),e=c,n=0;t<l;)t=(t+n)*o,e*=o,n=b.g(1);for(;t>=p;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,g(v(b.S),e),(n.pass||h||function(t,e,n,i){return i&&(i.S&&m(i,b),t.state=function(){return m(b,{})}),n?(r[u]=t,e):t})(x,y,"global"in n?n.global:this==r,n.state)}function d(t){var e,n=t.length,r=this,i=0,a=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<o;)s[i]=i++;for(i=0;i<o;i++)s[i]=s[a=h&a+t[i%n]+(e=s[i])],s[a]=e;(r.g=function(t){for(var e,n=0,i=r.i,a=r.j,s=r.S;t--;)e=s[i=h&i+1],n=n*o+s[h&(s[i]=s[a=h&a+e])+(s[a]=e)];return r.i=i,r.j=a,n})(o)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){for(var n,r=t+"",i=0;i<r.length;)e[h&i]=h&(n^=19*e[h&i])+r.charCodeAt(i++);return v(e)}function v(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=f,g(r.random(),e),t.exports){t.exports=f;try{i=n(11)}catch(t){}}}([],Math)}));Wn.alea=zn,Wn.xor128=Ln,Wn.xorwow=Bn,Wn.xorshift7=Pn,Wn.xor4096=jn,Wn.tychei=Vn;var Un=Wn.alea,Gn=function(){function t(t,e,n,r,i){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=i||Math.random();this.random=Un(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var i=void 0,a=void 0,o=void 0;do{o=(i=2*this.random()-1)*i+(a=2*this.random()-1)*a}while(o>=1||0===o);var s=Math.sqrt(-2*Math.log(o)/o);e=this.mean+this.stdDev*i*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),qn=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var i=r||Math.random();this.randu=Un(i.toString()),this.randn=new Gn(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,i,a;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-a+Math.log(a)),(i=this.randu())<e||Math.log(i)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),Hn=function(){function t(t,e,n,r){var i=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==i.dtype||"float32"===i.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=Un(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function Kn(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",nt(t),new dt(t,e,n)}var Xn=ln({batchToSpaceND_:function(t,e,n){var r=Je(t,"x","batchToSpaceND"),i=e.reduce((function(t,e){return t*e}));return C(r.rank>=1+e.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),C(n.length===e.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),C(r.shape[0]%i==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+i})),Mt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),Yn=ln({broadcastTo_:function(t,e){var n=Je(t,"broadcastTo","x"),r=n.shape;if(e.some((function(t){return!(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+e+"].");if(e.length<n.rank)throw new Error("broadcastTo(): shape.length="+e.length+" < input.rank="+n.rank+".");if(e.length>n.rank){for(var i=n.shape.slice();i.length<e.length;)i.unshift(1);n=n.reshape(i)}for(var a=Array.from(e),o=e.length-1;o>=0;o--)if(n.shape[o]===e[o])a[o]=1;else if(1!==n.shape[o])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+e+"].");var s=a.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));return 0===s.length?n.clone():Mt.runKernelFunc((function(t){return t.tile(n,a)}),{input:n},(function(t){return{input:function(){return t.sum(s,!0)}}}))}}),$n=ln({cast_:function(t,e){var n=Je(t,"x","cast");if(!P(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:e};return Mt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),"Cast",r)}}),Jn=ln({clone_:function(t){var e=Je(t,"x","clone",null);return Mt.runKernelFunc((function(){return Mt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{$x:e},(function(t){return{$x:function(){return t.toFloat()}}}))}}),Zn=ln({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var i=Je(t,"x","cumsum"),a=an([e|=0],i.rank),o=i;null!=a&&(o=i.transpose(a));var s=sn(1,i.rank)[0],u=Mt.runKernelFunc((function(t){return t.cumsum(o,s,n,r)}),{permutedX:o},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=a&&(u=u.transpose(a)),u}}),Qn=ln({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=Je(t,"x","depthToSpace"),i="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];return C(i*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),C(a*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+a+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),C(o%(e*e)==0,(function(){return"Dimension size must be evenly divisible by "+e*e+" but is "+o+" for depthToSpace with input shape "+r.shape})),Mt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),tr=ln({expandDims_:function(t,e){void 0===e&&(e=0);var n=Je(t,"x","expandDims",null);C(e<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(C(-(n.rank+1)<=e,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),fr(n,r)}}),er=ln({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var i=Kn([t,e],r),a=t<=e?t:e,o=0;o<a;++o)i.set(1,o,o);var s=i.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return vr(tr(s,0),[n[0],1,1]);if(2===n.length)return vr(tr(tr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return vr(tr(tr(tr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),nr=ln({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var i=Je(t,"logits","multinomial"),a=i.size,o=i.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+o);n=n||Math.random();var s=1===o?i.as2D(1,-1):i,u=Mt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===o?u.as1D():u}}),rr=ln({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var i=Je(t,"indices","oneHot","int32"),a=i.shape.concat([e]);return i=i.flatten(),Mt.runKernelFunc((function(t){return t.oneHot(i,e,n,r)}),{$indices:i},(function(t){return{$indices:function(){return Nn(i.shape,"float32")}}})).reshape(a)}}),ir=ln({pad_:function(t,e,n){void 0===n&&(n=0);var r=Je(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var i={paddings:e,constantValue:n};return Mt.runKernelFunc((function(t){return t.pad(r,e,n)}),{x:r},(function(t){var n=e.map((function(t){return t[0]}));return{x:function(){return t.slice(n,r.shape)}}}),"PadV2",i)}}),ar=ln({pad1d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length,(function(){return"Invalid number of paddings. Must be length of 2."})),ir(t,[e],n)}}),or=ln({pad2d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ir(t,e,n)}}),sr=ln({pad3d_:function(t,e,n){return void 0===n&&(n=0),C(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ir(t,e,n)}}),ur=ln({pad4d_:function(t,e,n){return void 0===n&&(n=0),C(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ir(t,e,n)}}),cr=ln({rand_:function(t,e,n){var r=O(t),i=null;if(null==n||"float32"===n)i=new Float32Array(r);else if("int32"===n)i=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);i=new Uint8Array(r)}for(var a=0;a<r;a++)i[a]=e();return Mt.makeTensor(i,t,n)}}),lr=ln({randomNormal_:function(t,e,n,r,i){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new Gn(e,n,r,!1,i),o=Kn(t,r),s=0;s<o.values.length;s++)o.values[s]=a.nextValue();return o.toTensor()}}),pr=ln({randomGamma_:function(t,e,n,r,i){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var a=new qn(e,n,r,i),o=Kn(t,r),s=0;s<o.values.length;s++)o.values[s]=a.nextValue();return o.toTensor()}}),hr=ln({randomUniform_:function(t,e,n,r,i){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var a=Kn(t,r),o=new Hn(e,n,null,i),s=0;s<a.values.length;s++)a.values[s]=o.nextValue();return a.toTensor()}}),fr=ln({reshape_:function(t,e){var n=Je(t,"x","reshape",null);e=_(e,n.size),C(n.size===O(e),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:e};return Mt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),"Reshape",r)}}),dr=ln({spaceToBatchND_:function(t,e,n){var r=Je(t,"x","spaceToBatchND");return C(r.rank>=1+e.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+e.length})),C(n.length===e.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),C(r.shape.reduce((function(t,r,i){return i>0&&i<=e.length?t&&(r+n[i-1][0]+n[i-1][1])%e[i-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Mt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),mr=ln({squeeze_:function(t,e){var n=Je(t,"x","squeeze");return fr(n,M(n.shape,e).newShape)}}),gr=ln({stack_:function(t,e){void 0===e&&(e=0);var n=Ze(t,"tensors","stack");if(C(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,i=n[0].shape,a=n[0].dtype;C(e<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(t){N(i,t.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(t){C(a===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var o=n.map((function(t){return t.expandDims(e)}));return An(o,e)}}),vr=ln({tile_:function(t,e){var n=Je(t,"x","tile",null);return C(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."})),Mt.runKernelFunc((function(t,r){var i=t.tile(n,e);return r([n]),i}),{$x:n},(function(t,n){var r=n[0];return{$x:function(){var n=kn(r);if(1===r.rank)for(var i=0;i<e[0];++i)n=n.add(t.slice([i*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(i=0;i<e[0];++i)for(var a=0;a<e[1];++a)n=n.add(t.slice([i*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(i=0;i<e[0];++i)for(a=0;a<e[1];++a)for(var o=0;o<e[2];++o)n=n.add(t.slice([i*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(i=0;i<e[0];++i)for(a=0;a<e[1];++a)for(o=0;o<e[2];++o)for(var s=0;s<e[3];++s)n=n.add(t.slice([i*r.shape[0],a*r.shape[1],o*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}))}}),yr=ln({truncatedNormal_:function(t,e,n,r,i){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new Gn(e,n,r,!0,i),o=Kn(t,r),s=0;s<o.values.length;s++)o.values[s]=a.nextValue();return o.toTensor()}}),br=ln({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=Je(t,"x","unstack");return C(e>=-n.shape.length&&e<n.shape.length,(function(){return"Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length),Mt.runKernelFunc((function(t){return t.unstack(n,e)}),{$x:n},(function(t){return{$x:function(){return gr(t,e)}}}))}}),xr=function(t,e){return u(this,void 0,void 0,(function(){var n,r,i,a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:return n=Je(t,"x","setdiff1d"),r=Je(e,"y","setdiff1d"),C(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),C(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),C(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return i=c.sent(),[4,r.data()];case 2:for(a=c.sent(),o=new Set(a),s=0,p=0;p<i.length;p++)o.has(i[p])||s++;for(u=new dt([s],n.dtype),l=new dt([s],"int32"),p=0,h=0;p<i.length;p++)o.has(i[p])||(u.values[h]=i[p],l.values[h]=p,h++);return[2,[u.toTensor(),l.toTensor()]]}}))}))};function wr(t,e,n,r){void 0===r&&(r=!0);var i=[];if(r)(i=i.concat(e.slice(0))).push(t[0]/n),i=i.concat(t.slice(1));else{i=i.concat(t[0]);for(var a=e.length,o=0;o<a;++o)i=i.concat([t[o+1]/e[o],e[o]]);i=i.concat(t.slice(a+1))}return i}function Cr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var i=e+1;i<t;++i)i<=2*e?(r.push(i),r.push(i-(e+1))):r.push(i)}else{var a=[],o=[];for(i=1;i<t;++i)i>=2*e+1||i%2==1?o.push(i):a.push(i);r.push.apply(r,a),r.push(0),r.push.apply(r,o)}return r}function Nr(t,e,n,r){void 0===r&&(r=!0);var i=[];r?i.push(t[0]/n):i.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?i.push(e[a-1]*t[a]):i.push(t[a]/e[a-1]):i.push(t[a]);return i}function Sr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function Er(t,e,n){for(var r=t.slice(0,1),i=0;i<n;++i)r.push(t[i+1]-e[i][0]-e[i][1]);return r}function Or(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],i=1,a=0;a<n.length-1;++a)i*=n[a];var o=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=o[a],s.push(o[a]);var c=$(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,i,u,c]}var Ir=30;function kr(t){return t<=Ir?t:Y(t,Math.floor(Math.sqrt(t)))}function Ar(t,e,n){for(var r=e.rank>1?e.shape[e.rank-1]:1,i=n.length,a=1,o=r;o<i;++o)a*=n[o];var s=r<1?1:r;return{sliceRank:r,numUpdates:e.size/s,sliceSize:a,strides:$(n.slice(0,r)).concat([1]),outputSize:O(n)}}function Rr(t,e,n){C(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),C(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){C(e[r]+n[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},i=0;i<t.rank;++i)r(i)}function Tr(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Dr(t,e,n){for(var r=[],i=0;i<t.length;i++)r[i]=Math.ceil((e[i]-t[i])/n[i]);return r}function _r(t,e,n,r,i){var a=e[i],o=n[i]||1;(t&1<<i||null==a)&&(a=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[i];return a<0&&(a+=s),b(0,a,s-1)}function Fr(t,e,n,r,i){var a=e[i],o=n[i]||1;(t&1<<i||null==a)&&(a=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[i];return a<0&&(a+=s),o>0?b(0,a,s):b(-1,a,s-1)}function Mr(t,e,n){for(var r=n.length,i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(i=r+1;i<n.length;i++)if(e[i]>0||n[i]!==t[i])return!1;return!0}function zr(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}Object.freeze({assertParamsValid:Rr,maskToAxes:Tr,computeOutShape:Dr,startForAxis:_r,stopForAxis:Fr,isSliceContinous:Mr,computeFlatOffset:zr});function Lr(t){return Mt.customGrad(t)}var Br=ln({softmax_:function(t,e){void 0===e&&(e=-1);var n=Je(t,"logits","softmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return Lr((function(t,n){var r=t.logSumExp([e],!0),i=t.toFloat().sub(r).exp();return n([i]),{value:i,gradFunc:function(t,n){var r=n[0],i=t.mul(r);return i.sub(i.sum([e],!0).mul(r))}}}))(n)}}),Pr=ln({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=Je(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return Lr((function(t,n){var r=t.max(e,!0),i=t.sub(r),a=i.toFloat().sub(i.exp().sum(e,!0).log());return n([a]),{value:a,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}}),jr=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),Vr=function(){function t(){}return t.prototype.time=function(t){return Wr("time")},t.prototype.read=function(t){return Wr("read")},t.prototype.readSync=function(t){return Wr("readSync")},t.prototype.numDataIds=function(){return Wr("numDataIds")},t.prototype.disposeData=function(t){return Wr("disposeData")},t.prototype.write=function(t,e,n){return Wr("write")},t.prototype.move=function(t,e,n,r){return Wr("move")},t.prototype.memory=function(){return Wr("memory")},t.prototype.floatPrecision=function(){return Wr("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return Wr("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){return t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,Wr("fusedBatchMatMul")},t.prototype.slice=function(t,e,n){return Wr("slice")},t.prototype.stridedSlice=function(t,e,n,r){return Wr("stridedSlice")},t.prototype.unstack=function(t,e){return Wr("unstack")},t.prototype.reverse=function(t,e){return Wr("reverse")},t.prototype.concat=function(t,e){return Wr("concat")},t.prototype.neg=function(t){return Wr("neg")},t.prototype.add=function(t,e){return Wr("add")},t.prototype.addN=function(t){return Wr("addN")},t.prototype.subtract=function(t,e){return Wr("subtract")},t.prototype.multiply=function(t,e){return Wr("multiply")},t.prototype.realDivide=function(t,e){return Wr("realDivide")},t.prototype.floorDiv=function(t,e){return Wr("floorDiv")},t.prototype.sum=function(t,e){return Wr("sum")},t.prototype.prod=function(t,e){return Wr("prod")},t.prototype.unsortedSegmentSum=function(t,e,n){return Wr("unsortedSegmentSum")},t.prototype.argMin=function(t,e){return Wr("argMin")},t.prototype.argMax=function(t,e){return Wr("argMax")},t.prototype.equal=function(t,e){return Wr("equal")},t.prototype.notEqual=function(t,e){return Wr("notEqual")},t.prototype.less=function(t,e){return Wr("less")},t.prototype.lessEqual=function(t,e){return Wr("lessEqual")},t.prototype.greater=function(t,e){return Wr("greater")},t.prototype.greaterEqual=function(t,e){return Wr("greaterEqual")},t.prototype.logicalNot=function(t){return Wr("logicalNot")},t.prototype.logicalAnd=function(t,e){return Wr("logicalAnd")},t.prototype.logicalOr=function(t,e){return Wr("logicalOr")},t.prototype.where=function(t){return Wr("where")},t.prototype.select=function(t,e,n){return Wr("select")},t.prototype.topk=function(t,e,n){return Wr("topk")},t.prototype.min=function(t,e){return Wr("min")},t.prototype.minimum=function(t,e){return Wr("minimum")},t.prototype.mod=function(t,e){return Wr("mod")},t.prototype.max=function(t,e){return Wr("max")},t.prototype.maximum=function(t,e){return Wr("maximum")},t.prototype.all=function(t,e){return Wr("all")},t.prototype.any=function(t,e){return Wr("any")},t.prototype.squaredDifference=function(t,e){return Wr("squaredDifference")},t.prototype.ceil=function(t){return Wr("ceil")},t.prototype.floor=function(t){return Wr("floor")},t.prototype.round=function(t){return Wr("round")},t.prototype.sign=function(t){return Wr("sign")},t.prototype.isNaN=function(t){return Wr("isNaN")},t.prototype.isInf=function(t){return Wr("isInf")},t.prototype.isFinite=function(t){return Wr("isFinite")},t.prototype.pow=function(t,e){return Wr("pow")},t.prototype.exp=function(t){return Wr("exp")},t.prototype.expm1=function(t){return Wr("expm1")},t.prototype.log=function(t){return Wr("log")},t.prototype.log1p=function(t){return Wr("log1p")},t.prototype.sqrt=function(t){return Wr("sqrt")},t.prototype.rsqrt=function(t){return Wr("rsqrt")},t.prototype.square=function(t){return Wr("square")},t.prototype.reciprocal=function(t){return Wr("reciprocal")},t.prototype.relu=function(t){return Wr("relu")},t.prototype.relu6=function(t){return Wr("relu6")},t.prototype.prelu=function(t,e){return Wr("prelu")},t.prototype.elu=function(t){return Wr("elu")},t.prototype.eluDer=function(t,e){return Wr("eluDer")},t.prototype.selu=function(t){return Wr("selu")},t.prototype.int=function(t){return Wr("int")},t.prototype.clip=function(t,e,n){return Wr("clip")},t.prototype.abs=function(t){return Wr("abs")},t.prototype.complexAbs=function(t){return Wr("complexAbs")},t.prototype.sigmoid=function(t){return Wr("sigmoid")},t.prototype.softplus=function(t){return Wr("softplus")},t.prototype.sin=function(t){return Wr("sin")},t.prototype.cos=function(t){return Wr("cos")},t.prototype.tan=function(t){return Wr("tan")},t.prototype.asin=function(t){return Wr("asin")},t.prototype.acos=function(t){return Wr("acos")},t.prototype.atan=function(t){return Wr("atan")},t.prototype.atan2=function(t,e){return Wr("atan2")},t.prototype.sinh=function(t){return Wr("sinh")},t.prototype.cosh=function(t){return Wr("cosh")},t.prototype.tanh=function(t){return Wr("tanh")},t.prototype.asinh=function(t){return Wr("asinh")},t.prototype.acosh=function(t){return Wr("acosh")},t.prototype.atanh=function(t){return Wr("atanh")},t.prototype.erf=function(t){return Wr("erf")},t.prototype.step=function(t,e){return Wr("step")},t.prototype.fusedConv2d=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,Wr("fusedConv2d")},t.prototype.conv2d=function(t,e,n){return Wr("conv2d")},t.prototype.conv2dDerInput=function(t,e,n){return Wr("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,e,n){return Wr("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,Wr("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,e,n){return Wr("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return Wr("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return Wr("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,e,n){return Wr("conv3d")},t.prototype.conv3dDerInput=function(t,e,n){return Wr("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,e,n){return Wr("conv3dDerFilter")},t.prototype.maxPool=function(t,e){return Wr("maxPool")},t.prototype.maxPoolBackprop=function(t,e,n,r){return Wr("maxPoolBackprop")},t.prototype.avgPool=function(t,e){return Wr("avgPool")},t.prototype.avgPoolBackprop=function(t,e,n){return Wr("avgPoolBackprop")},t.prototype.avgPool3d=function(t,e){return Wr("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,e,n){return Wr("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,e){return Wr("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return Wr("maxPool3dBackprop")},t.prototype.reshape=function(t,e){return Wr("reshape")},t.prototype.cast=function(t,e){return Wr("cast")},t.prototype.tile=function(t,e){return Wr("tile")},t.prototype.pad=function(t,e,n){return Wr("pad")},t.prototype.transpose=function(t,e){return Wr("transpose")},t.prototype.gather=function(t,e,n){return Wr("gather")},t.prototype.gatherND=function(t,e){return Wr("gatherND")},t.prototype.scatterND=function(t,e,n){return Wr("scatterND")},t.prototype.batchToSpaceND=function(t,e,n){return Wr("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,e,n){return Wr("spaceToBatchND")},t.prototype.resizeBilinear=function(t,e,n,r){return Wr("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,e,n){return Wr("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return Wr("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return Wr("resizeNearestNeighborBackprop")},t.prototype.batchNormalization=function(t,e,n,r,i,a){return Wr("batchNormalization")},t.prototype.localResponseNormalization4D=function(t,e,n,r,i){return Wr("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,e,n,r,i,a,o){return Wr("LRNGrad")},t.prototype.multinomial=function(t,e,n,r){return Wr("multinomial")},t.prototype.oneHot=function(t,e,n,r){return Wr("oneHot")},t.prototype.cumsum=function(t,e,n,r){return Wr("cumsum")},t.prototype.nonMaxSuppression=function(t,e,n,r,i){return Wr("nonMaxSuppression")},t.prototype.fft=function(t){return Wr("fft")},t.prototype.ifft=function(t){return Wr("ifft")},t.prototype.complex=function(t,e){return Wr("complex")},t.prototype.real=function(t){return Wr("real")},t.prototype.imag=function(t){return Wr("imag")},t.prototype.cropAndResize=function(t,e,n,r,i,a){return Wr("cropAndResize")},t.prototype.depthToSpace=function(t,e,n){return Wr("depthToSpace")},t.prototype.split=function(t,e,n){return Wr("split")},t.prototype.sparseToDense=function(t,e,n,r){return Wr("sparseToDense")},t.prototype.diag=function(t){return Wr("diag")},t.prototype.fill=function(t,e,n){return Wr("fill")},t.prototype.onesLike=function(t){return Wr("onesLike")},t.prototype.zerosLike=function(t){return Wr("zerosLike")},t.prototype.linspace=function(t,e,n){return Wr("linspace")},t.prototype.dispose=function(){return Wr("dispose")},t}();function Wr(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function Ur(t,e){for(var n=t.length,r=[],i=0;i<n;i++){var a=n-1-i,o=t[a]||1;(e[e.length-1-i]||1)>1&&1===o&&r.unshift(a)}return r}function Gr(t,e){for(var n=[],r=0;r<e.length;r++){var i=t[t.length-r-1],a=e.length-r-1,o=e[a];(null==i||1===i&&o>1)&&n.unshift(a)}return n}function qr(t,e){for(var n=[],r=Math.max(t.length,e.length),i=0;i<r;i++){var a=t[t.length-i-1];null==a&&(a=1);var o=e[e.length-i-1];if(null==o&&(o=1),1===a)n.unshift(o);else if(1===o)n.unshift(a);else{if(a!==o)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(a)}}return n}function Hr(t,e,n,r,i,a,o){void 0===o&&(o="channelsLast");var s,u=Jr(e),c=u[0],l=u[1];if("channelsLast"===o)s=[c,l,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);s=[c,l,t[1],t[1]]}return Xr(t,s,n,r,i,a,!1,o)}function Kr(t,e,n,r,i,a,o){void 0===o&&(o="NDHWC");var s,u,c=Zr(e),l=c[0],p=c[1],h=c[2];if("NDHWC"===o)u="channelsLast",s=[l,p,h,t[4],t[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat "+o);u="channelsFirst",s=[l,p,h,t[1],t[1]]}return Yr(t,s,n,r,i,!1,u,a)}function Xr(t,e,n,r,i,a,o,s){void 0===o&&(o=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],p=u[2],h=u[3];if("channelsLast"===s)c=t[0],l=t[1],p=t[2],h=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],h=t[1],l=t[2],p=t[3]}var f,d=e[0],m=e[1],g=e[3],v=Jr(n),y=v[0],b=v[1],x=Jr(r),w=x[0],N=x[1],S=Qr(d,w),E=Qr(m,N),O=function(t,e,n,r,i,a,o,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var p=function(t,e,n,r,i){null==r&&(r=$r(t,e,n));var a=t[1],o=ti((t[0]-e+2*r)/n+1,i);C(k(o),(function(){return"The output # of rows ("+o+") must be an integer. Change the stride and/or zero pad parameters"}));var s=ti((a-e+2*r)/n+1,i);return C(k(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[o,s]}([e,n],a,r,t,s);c=p[0],l=p[1]}else if("same"===t){c=Math.ceil(e/r),l=Math.ceil(n/i);var h=Math.max(0,(c-1)*r+a-e),f=Math.max(0,(l-1)*i+o-n),d=Math.floor(h/2),m=h-d,g=Math.floor(f/2);u={top:d,bottom:m,left:g,right:f-g,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-o+1)/i)}return{padInfo:u,outHeight:c,outWidth:l}}(i,l,p,y,b,S,E,a),I=O.padInfo,A=O.outHeight,R=O.outWidth,T=o?g*h:g;return"channelsFirst"===s?f=[c,T,A,R]:"channelsLast"===s&&(f=[c,A,R,T]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:p,inChannels:h,outHeight:A,outWidth:R,outChannels:T,padInfo:I,strideHeight:y,strideWidth:b,filterHeight:d,filterWidth:m,effectiveFilterHeight:S,effectiveFilterWidth:E,dilationHeight:w,dilationWidth:N,inShape:t,outShape:f,filterShape:e}}function Yr(t,e,n,r,i,a,o,s){void 0===a&&(a=!1),void 0===o&&(o="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],p=u[2],h=u[3],f=u[4];if("channelsLast"===o)c=t[0],l=t[1],p=t[2],h=t[3],f=t[4];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);c=t[0],f=t[1],l=t[2],p=t[3],h=t[4]}var d,m=e[0],g=e[1],v=e[2],y=e[4],b=Zr(n),x=b[0],w=b[1],N=b[2],S=Zr(r),E=S[0],O=S[1],I=S[2],A=Qr(m,E),R=Qr(g,O),T=Qr(v,I),D=function(t,e,n,r,i,a,o,s,u,c,l){var p,h,f,d;if("number"==typeof t){p={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var m=function(t,e,n,r,i,a){null==i&&(i=$r(t,e,r));var o=t[1],s=t[2],u=ti((t[0]-e+2*i)/r+1,a);C(k(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var c=ti((o-e+2*i)/r+1,a);C(k(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=ti((s-e+2*i)/r+1,a);return C(k(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[u,c,l,1]}([e,n,r,1],s,0,i,t,l);h=m[0],f=m[1],d=m[2]}else if("same"===t){var g=((h=Math.ceil(e/i))-1)*i+s-e,v=((f=Math.ceil(n/a))-1)*a+u-n,y=((d=Math.ceil(r/o))-1)*o+c-r,b=Math.floor(g/2),x=g-b,w=Math.floor(v/2),N=v-w,S=Math.floor(y/2);p={top:w,bottom:N,left:S,right:y-S,front:b,back:x,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((e-s+1)/i),f=Math.ceil((n-u+1)/a),d=Math.ceil((r-c+1)/o)}return{padInfo:p,outDepth:h,outHeight:f,outWidth:d}}(i,l,p,h,x,w,N,A,R,T,s),_=D.padInfo,F=D.outDepth,M=D.outHeight,z=D.outWidth,L=a?y*f:y;return"channelsFirst"===o?d=[c,L,F,M,z]:"channelsLast"===o&&(d=[c,F,M,z,L]),{batchSize:c,dataFormat:o,inDepth:l,inHeight:p,inWidth:h,inChannels:f,outDepth:F,outHeight:M,outWidth:z,outChannels:L,padInfo:_,strideDepth:x,strideHeight:w,strideWidth:N,filterDepth:m,filterHeight:g,filterWidth:v,effectiveFilterDepth:A,effectiveFilterHeight:R,effectiveFilterWidth:T,dilationDepth:E,dilationHeight:O,dilationWidth:I,inShape:t,outShape:d,filterShape:e}}function $r(t,e,n,r){void 0===r&&(r=1);var i=Qr(e,r);return Math.floor((t[0]*(n-1)-n+i)/2)}function Jr(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Zr(t){return"number"==typeof t?[t,t,t]:t}function Qr(t,e){return e<=1?t:t+(t-1)*(e-1)}function ti(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function ei(t){var e=Jr(t),n=e[0],r=e[1],i=e[2];return 1===n&&1===r&&1===i}function ni(t,e){return ei(t)||ei(e)}function ri(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function ii(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Nn(t.shape),i=t.toFloat(),a=n.complex(i,r);return r.dispose(),i.dispose(),a}if(!j(t.dtype,e))return Mt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){var o=n.real(t);return a=o.cast(e),o.dispose(),a}if("int32"===e)return n.int(t);if("bool"===e){var s=gn(0,t.dtype);return a=n.notEqual(t,s),s.dispose(),a}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function ai(t,e){return Mt.makeTensorFromDataId(t.dataId,e,t.dtype)}function oi(t,e,n){var r=(e-t)/(n-1),i=tt(n,"float32");i[0]=t;for(var a=1;a<i.length;a++)i[a]=i[a-1]+r;return vn(i,"float32")}Object.freeze({castTensor:ii,reshapeTensor:ai,linspaceImpl:oi,upcastType:Ot,axesAreInnerMostDims:Qe,combineLocations:tn,computeOutAndReduceShapes:en,expandShapeToKeepDim:nn,assertAxesAreInnerMostDims:rn,getAxesPermutation:an,getUndoAxesPermutation:on,getInnerMostAxes:sn,getBroadcastDims:Ur,getReductionAxes:Gr,assertAndGetBroadcastShape:qr,assertParamsConsistent:un,computeOutShape:cn,computePool2DInfo:Hr,computePool3DInfo:Kr,computeConv2DInfo:Xr,computeConv3DInfo:Yr,computeDefaultPad:$r,tupleValuesAreOne:ei,eitherStridesOrDilationsAreOne:ni,convertConv2DDataFormat:ri});function si(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function ui(t,e){return{real:t[2*e],imag:t[2*e+1]}}function ci(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function li(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function pi(t,e,n,r,i){for(var a=Array.from(e).map((function(t,e){return{score:t,boxIndex:e}})).filter((function(t){return t.score>i})).sort((function(t,e){return e.score-t.score})),o=[],s=0;s<a.length;s++){var u=a[s],c=u.score,l=u.boxIndex;if(c<i)break;for(var p=!1,h=o.length-1;h>=0;--h)if(hi(t,l,o[h])>=r){p=!0;break}if(!p&&(o.push(l),o.length>=n))break}return vn(o,"int32")}function hi(t,e,n){var r=t.subarray(4*e,4*e+4),i=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(i[0],i[2]),l=Math.min(i[1],i[3]),p=Math.max(i[0],i[2]),h=Math.max(i[1],i[3]),f=(s-a)*(u-o),d=(p-c)*(h-l);if(f<=0||d<=0)return 0;var m=Math.max(a,c),g=Math.max(o,l),v=Math.min(s,p),y=Math.min(u,h),b=Math.max(v-m,0)*Math.max(y-g,0);return b/(f+d-b)}function fi(t,e,n){var r=new Array(t.rank).fill(0),i=t.shape.slice();return e.map((function(e){i[n]=e;var a=t.slice(r,i);return r[n]+=e,a}))}function di(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var i=Kn(n,t.dtype);for(r=0;r<i.values.length;++r){for(var a=i.indexToLoc(r),o=new Array(t.rank),s=0;s<o.length;s++)o[s]=a[s]%t.shape[s];var u=t.locToIndex(o);i.values[r]=t.values[u]}return i.toTensor()}function mi(t,e,n,r,i){for(var a=e[e.length-1],o=[t.length/a,a],s=o[0],u=o[1],c=z(n,s*r),l=z("int32",s*r),p=0;p<s;p++){for(var h=p*u,f=t.subarray(h,h+u),d=[],m=0;m<f.length;m++)d.push({value:f[m],index:m});d.sort((function(t,e){return e.value-t.value}));var g=p*r,v=c.subarray(g,g+r),y=l.subarray(g,g+r);for(m=0;m<r;m++)v[m]=d[m].value,y[m]=d[m].index}var b=e.slice();return b[b.length-1]=r,[dn(c,b,n),dn(l,b,"int32")]}function gi(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var i=Kn(t,"int32"),a=Kn([n.length,t.length],"int32");for(r=0;r<n.length;r++){var o=i.indexToLoc(n[r]),s=r*t.length;a.values.set(o,s)}return a.toTensor()}var vi=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},yi=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},bi=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,i=t.batchSize,a=t.inSize,o=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[i,o];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function xi(t,e){return["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function wi(t,e){return 1===e?[t]:xi(t,e)}function Ci(){var t,e,n,r,i,a,o,s,u,c;return 2===p().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",i="texture",a="outputColor",o="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",i="texture2D",a="gl_FragColor",o="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:i,output:a,defineOutput:o,defineSpecialNaN:s,defineSpecialInf:u,defineRound:c}}function Ni(t,e,n){void 0===n&&(n="index");var r=$(e);return r.map((function(e,i){return"int "+t[i]+" = "+n+" / "+e+"; "+(i===r.length-1?"int "+t[i+1]+" = "+n+" - "+t[i]+" * "+e:"index -= "+t[i]+" * "+e)+";"})).join("")}function Si(t){var e=$(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var Ei="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function Oi(t,e,n,r){var i=[];t.forEach((function(t){var e=O(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?i.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(i.push("uniform sampler2D "+t.name+";"),i.push("uniform int offset"+t.name+";"))}));var a,o,s=i.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?function t(e){var n,r,i;switch(e.shapeInfo.logicalShape.length){case 0:return n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=Ci(),"\n    vec4 "+r+"() {\n      return "+i.texture2D+"("+n+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Ci();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+i[0]+", "+i[1]+", index);\n      return "+a.texture2D+"("+e+", uv);\n    }\n  "}(e);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape,a=i[0],o=i[1],s=Ci();if(null!=i&&I(e,i))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+o+".0, "+a+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){var s=Fi(e,n.slice(1));return"\n        "+t(s)+"\n        vec4 "+i+"(int b, int row, int col) {\n          return "+i+"("+Mi(["b","row","col"],[1,2])+");\n        }\n      "}var u=o[0],c=o[1],l=Math.ceil(n[2]/2);return"\n    vec4 "+i+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+c+", "+l*Math.ceil(n[1]/2)+", "+l+", b, row, col);\n      return "+Ci().texture2D+"("+r+", uv);\n    }\n  "}(e);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=o[0],u=o[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),p="int b, int row, int col",h="b * "+l+" + (row / 2) * "+c+" + (col / 2)",f=2;f<n-1;f++)p="int b"+f+", "+p,h="b"+f+" * "+(l*=e[n-f-1])+" + "+h;return"\n    vec4 "+i+"("+p+") {\n      int index = "+h+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+Ci().texture2D+"("+r+", uv);\n    }\n  "}(e)}}(t):function t(e){var n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,i=r[0],a=r[1];if(1===i&&1===a)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var o=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+o[0]+", "+o[1]+", "+Ti(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+Di(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,i=r[0],a=r[1];if(1===a&&1===i)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var o=Ti(e);return 1===a?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+o+") + 0.5) / "+i+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+o+") + 0.5) / "+a+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+i+", "+a+", index + "+o+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 2:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&I(n,a)){var o=a[0];return"\n    float "+i+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+a[1]+".0, "+o+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var s=M(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var p=Fi(e,l);return"\n      "+t(p)+"\n      float "+i+"(int row, int col) {\n        return "+i+"("+Mi(["row","col"],c)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+i+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+n[1]+", 1)));\n        "+Di(e)+"\n      }\n    ";var h=a[0],f=a[1],d=Ti(r);return 1===f?"\n    float "+i+"(int row, int col) {\n      float index = dot(vec3(row, col, "+d+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+h+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===h?"\n    float "+i+"(int row, int col) {\n      float index = dot(vec3(row, col, "+d+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+f+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+i+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+n[1]+" + col + "+d+";\n    vec2 uv = uvFromFlat("+h+", "+f+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],s=M(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var p=Fi(e,l);return"\n        "+t(p)+"\n        float "+i+"(int row, int col, int depth) {\n          return "+i+"("+Mi(["row","col","depth"],c)+");\n        }\n      "}if(e.shapeInfo.isUniform)return"\n      float "+i+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+a+", "+o+", 1)));\n        "+Di(e)+"\n      }\n    ";var h=e.shapeInfo.texShape,f=h[0],d=h[1],m=e.shapeInfo.flatOffset;return d===a&&null==m?"\n        float "+i+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+o+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+d+".0, "+f+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":d===o&&null==m?"\n    float "+i+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+n[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+d+".0, "+f+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+i+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+a+" + col * "+o+" + depth + "+Ti(r)+";\n        vec2 uv = uvFromFlat("+f+", "+d+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(e);case 4:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,s=n[1]*o,u=M(n),c=u.newShape,l=u.keptDims;if(c.length<n.length){var p=Fi(e,c);return"\n      "+t(p)+"\n      float "+i+"(int row, int col, int depth, int depth2) {\n        return "+i+"("+Mi(["row","col","depth","depth2"],l)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+i+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+s+", "+o+", "+a+", 1)));\n        "+Di(e)+"\n      }\n    ";var h=e.shapeInfo.flatOffset,f=e.shapeInfo.texShape,d=f[0],m=f[1];return m===s&&null==h?"\n      float "+i+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+o+", "+a+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+d+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===a&&null==h?"\n      float "+i+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+n[1]*n[2]+", "+n[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+d+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+i+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+o+" +\n          depth * "+a+" + depth2;\n      vec2 uv = uvFromFlat("+d+", "+m+", index + "+Ti(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 5:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[4],o=n[3]*a,s=n[2]*o,u=n[1]*s,c=M(n),l=c.newShape,p=c.keptDims;if(l.length<n.length){var h=Fi(e,l);return"\n      "+t(h)+"\n      float "+i+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+i+"("+Mi(["row","col","depth","depth2","depth3"],p)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+i+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+u+", "+s+", "+o+", "+a+")) +\n          depth3;\n        "+Di(e)+"\n      }\n    ";var f=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,m=d[0],g=d[1];return g===u&&null==f?"\n      float "+i+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+s+", "+o+", "+a+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===a&&null==f?"\n      float "+i+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]+",\n               "+n[2]*n[3]+", "+n[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+i+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+s+" + depth * "+o+" +\n          depth2 * "+a+" + depth3 + "+Ti(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 6:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,i="get"+r.charAt(0).toUpperCase()+r.slice(1),a=M(n),o=a.newShape,s=a.keptDims;if(o.length<n.length){var u=Fi(e,o);return"\n      "+t(u)+"\n      float "+i+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+i+"("+Mi(["row","col","depth","depth2","depth3","depth4"],s)+");\n      }\n    "}var c=n[5],l=n[4]*c,p=n[3]*l,h=n[2]*p,f=n[1]*h;if(e.shapeInfo.isUniform)return"\n      float "+i+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+f+", "+h+", "+p+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+Di(e)+"\n      }\n    ";var d=e.shapeInfo.flatOffset,m=e.shapeInfo.texShape,g=m[0],v=m[1];return v===f&&null==d?"\n      float "+i+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+h+", "+p+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+g+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===c&&null==d?"\n      float "+i+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]*n[4]+",\n               "+n[2]*n[3]*n[4]+",\n               "+n[3]*n[4]+",\n               "+n[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+g+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+i+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+f+" + col * "+h+" + depth * "+p+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+Ti(r)+";\n      vec2 uv = uvFromFlat("+g+", "+v+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(t);var i=t.shapeInfo.logicalShape,a=e.logicalShape;return i.length<=a.length&&(r+=n?function(t,e){var n,r=t.name,i=r.charAt(0).toUpperCase()+r.slice(1),a="get"+i+"AtOutCoords",o=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=Ur(t.shapeInfo.logicalShape,e.logicalShape),c=_i(s),l=s-o,p=["x","y","z","w","u","v"];n=0===o?"":s<2&&u.length>=1?"coords = 0;":u.map((function(t){return"coords."+p[t+l]+" = 0;"})).join("\n");var h;h=s<2&&o>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+p[e+l]})).join(", ");var f="return outputValue;",d=1===O(t.shapeInfo.logicalShape),m=1===O(e.logicalShape);if(1!==o||d||m){if(d&&!m)f=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var g=o-2,v=o-1;u.indexOf(g)>-1&&u.indexOf(v)>-1?f="return vec4(outputValue.x);":u.indexOf(g)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(v)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+a+"() {\n      "+c+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+i+"("+h+");\n      "+f+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),i="get"+r+"AtOutCoords",a=e.texShape,o=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&I(o,a))return"\n      float "+i+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c=_i(u),l=Ur(t.shapeInfo.logicalShape,e.logicalShape),p=u-s,h=["x","y","z","w","u","v"];return"\n    float "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&l.length>=1?"coords = 0;":l.map((function(t){return"coords."+h[t+p]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+h[e+p]})).join(", "))+");\n    }\n  "}(t,e)),r}(t,e,r)})).join("\n"),c=e.texShape,l=Ci(),p=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),h=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+Ii+"\n    "+ki+"\n    "+Ai+"\n  "}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(I(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],o=(a=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+i[0]+", "+i[1]+"));\n      int index = resTexRC.x * "+i[1]+" + resTexRC.y;\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+a+");\n      int c = imod(index, "+a+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),i=r*Math.ceil(t[t.length-2]/2),a=i,o="",s="b, r, c",u=2;u<t.length-1;u++)o="\n      int b"+u+" = index / "+(a*=t[t.length-u-1])+";\n      index -= b"+u+" * "+a+";\n    "+o,s="b"+u+", "+s;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+o+"\n\n      int b = index / "+i+";\n      index -= b * "+i+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,i,a,o}(e.logicalShape,c),o=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(a=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return I(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=Ni(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=Ni(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=Ni(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=Ni(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r}(e.logicalShape,c),o=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(h+=Ri),[h,p,o,s,a,u,n].join("\n")}var Ii="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ki="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ai="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ri="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ti(t){return"offset"+t}function Di(t){var e=t.name,n=O(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function _i(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function Fi(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Mi(t,e){return e.map((function(e){return t[e]})).join(", ")}var zi=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var i=t[t.length-1],a=Math.ceil(i/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");var o,s,u=this.outputShape,c=u.length,l=_i(c),p=wi("coords",c);if(1===a){var h=_i(s=c+1);o="\n        "+h+" sourceLocR = "+h+"("+p.join()+", 0);\n        ++"+p[c-1]+";\n        "+h+" sourceLocG = "+h+"("+p.join()+", 0);\n        ++"+p[c-2]+";\n        "+h+" sourceLocA = "+h+"("+p.join()+", 0);\n        --"+p[c-1]+";\n        "+h+" sourceLocB = "+h+"("+p.join()+", 0);\n        --"+p[c-2]+";"}else s=c,o="\n        "+l+" sourceLocR = coords;\n        ++"+p[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+p[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+p[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+p[c-2]+";";var f=["x","y","z","w","u","v"].slice(0,s),d="."+f[s-1],m=f.map((function(t){return"int "+t})),g=wi("sourceLocR",s-1).concat("inIdx.r"),v=wi("sourceLocG",s-1).concat("inIdx.g"),y=wi("sourceLocB",s-1).concat("inIdx.b"),b=wi("sourceLocA",s-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+v.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+b.join()+")));",N="vec4(\n            getAChannel("+g.join()+"),\n            hasNextCol ? getAChannel("+v.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+b.join()+") : 0.)",S=r?"":"\n      float getBestIndicesAChannel("+m.join()+") {\n        return getChannel(getBestIndicesA("+f.join()+"),\n                                          vec2("+f.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+m.join()+") {\n        return getChannel(getA("+f.join()+"),\n                               vec2("+f.slice(-2).join()+"));\n      }\n      "+S+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+p[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+p[c-2]+" < "+(u[c-2]-1)+";\n        "+o+"\n        ivec4 srcIdx = ivec4(sourceLocR"+d+", sourceLocG"+d+",\n          sourceLocB"+d+", sourceLocA"+d+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+N+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+w+"\n          vec4 candidate = "+N+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+x+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},Li=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,o=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,p=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+p+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+a+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+o+") {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Bi=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,p=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=l-1-t.padInfo.front,d=p-1-t.padInfo.top,m=h-1-t.padInfo.left,g=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+f+", "+d+", "+m+");\n      const float avgMultiplier = float("+g+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+i+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+p+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+a+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+h+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+o+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Pi=function(t,e,n,r,i,a){this.outputShape=[],this.variableNames=["x","mean","variance"],qr(t,e),qr(t,n);var o="0.0";null!=r&&(qr(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");var s="1.0";null!=i&&(qr(t,i),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+o+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+a+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},ji=function(t,e,n,r,i,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],qr(t,e),qr(t,n);var o="vec4(0.0)";null!=r&&(qr(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=i&&(qr(t,i),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+o+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+a+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},Vi=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=qr(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},Wi="return a + b;",Ui="return a - b;",Gi="return a * b;",qi="return (a < 0.) ? b * a : a;",Hi=function(t,e,n){this.variableNames=["A","B"],this.outputShape=qr(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},Ki="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Xi=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=qr(e,n);var i=this.outputShape.length,a="";if(r)if(0===i||1===O(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a="\n          "+_i(i)+" coords = getOutputCoords();\n        ",1===i)a+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var o=wi("coords",i);a+="\n            bool nextRowOutOfBounds =\n              ("+o[i-2]+" + 1) >= "+this.outputShape[i-2]+";\n            bool nextColOutOfBounds =\n              ("+o[i-1]+" + 1) >= "+this.outputShape[i-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+a+"\n\n        setOutput(result);\n      }\n    "},Yi=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,i){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(i,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(i,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),$i=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,i){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(i,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(i,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ji=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Zi=function(t){this.outputShape=[],this.outputShape=cn(t,1),this.variableNames=t.map((function(t,e){return"T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var i=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+i+"));")}var a=e.length,o=e[e.length-1];r.push("else setOutput(getT"+a+"(yR, yC-"+o+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Qi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=cn(t,e);var n=this.outputShape,r=n.length,i=_i(r),a=wi("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return"T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=o[e],l=o.slice(-2),p=o.join(),h="if ("+c+" < "+s[0]+") {\n        return getChannel(\n            getT0("+p+"), vec2("+l.join()+"));\n        }";for(u=1;u<s.length;u++){var f=s[u-1];h+="\n        if ("+c+" < "+s[u]+"  && "+c+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+ta(o,c,f)+"),\n            vec2("+ta(l,c,f)+"));\n        }"}var d=s.length,m=s[s.length-1];h+="\n        return getChannel(\n          getT"+d+"("+ta(o,c,m)+"),\n          vec2("+ta(l,c,m)+"));",this.userCode="\n      float getValue("+o.map((function(t){return"int "+t}))+") {\n        "+h+"\n      }\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+a+"), 0., 0., 0.);\n\n        "+a[r-1]+" = "+a[r-1]+" + 1;\n        if ("+a[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+a+");\n        }\n\n        "+a[r-2]+" = "+a[r-2]+" + 1;\n        if ("+a[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+a+");\n        }\n\n        "+a[r-1]+" = "+a[r-1]+" - 1;\n        if ("+a[r-2]+" < "+n[r-2]+" &&\n            "+a[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+a+");\n        }\n        setOutput(result);\n      }\n    "};function ta(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+" - "+n:t})).join()}var ea=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,i=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+i+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+a+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},na=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a="channelsLast"===t.dataFormat,o=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode="\n      const ivec2 pads = ivec2("+o+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+a+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ra=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,i=t.padInfo.front,a=t.padInfo.top,o=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+i+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+a+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+o+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ia=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+i+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+a+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+o+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},aa=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,i=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+a+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+i+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},oa=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,i=t.strideWidth,a=e-1-t.padInfo.top,o=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+i+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},sa=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var i=t.padInfo.top,a=t.padInfo.left,o=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,p=t.filterWidth,h=4*Math.floor(t.inChannels/4),f=t.inChannels%4,d="channelsLast"===t.dataFormat,m=d?1:2,g=d?2:3,v=d?3:1,y="",b="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",b="result = activation(result);");var x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+o+", "+s+");\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+v+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+m+"], coords["+g+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+p+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+h+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+d+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===f)+") {\n\n              if ("+d+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+h+") *\n                    getW(wR, wC, "+h+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+h+", xR, xC) *\n                    getW(wR, wC, "+h+", d2);\n              }\n\n            } else if ("+(2===f)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2)\n              );\n\n              if ("+d+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===f)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2),\n                getW(wR, wC, "+h+" + 2, d2)\n              );\n\n              if ("+d+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1),\n                  getX(batch, xR, xC, "+h+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC),\n                  getX(batch, "+h+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+x+"\n        "+b+"\n        setOutput(result);\n      }\n    "},ua=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,p=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+i+", "+a+", "+o+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+p+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===d)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+f+") *\n                  getW(wF, wR, wC, "+f+", d2);\n              } else if ("+(2===d)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+f+"),\n                  getX(batch, xF, xR, xC, "+f+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+f+", d2),\n                  getW(wF, wR, wC, "+f+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===d)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+f+"),\n                  getX(batch, xF, xR, xC, "+f+" + 1),\n                  getX(batch, xF, xR, xC, "+f+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+f+", d2),\n                  getW(wF, wR, wC, "+f+" + 1, d2),\n                  getW(wF, wR, wC, "+f+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ca=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var i=t.inHeight,a=t.inWidth,o=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,p=t.dilationWidth,h=t.filterHeight,f=t.filterWidth,d=t.outChannels/t.inChannels,m="",g="";n&&(m=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",g="result = activation(result);");var v=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+m+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+o+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+d+";\n        int q = d2 - d1 * "+d+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+h+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+i+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+f+"; wC++) {\n            int xC = xCCorner + wC * "+p+";\n\n            if (xC < 0 || xC >= "+a+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+v+"\n        "+g+"\n        setOutput(result);\n      }\n    "},la=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var i=t.inHeight,a=t.inWidth,o=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,p=t.dilationWidth,h=t.filterHeight,f=t.filterWidth,d=f,m="int xR; int xC; int xCOffset;",g=0;g<h;g++)for(var v=0;v<f;v++)m+="\n          vec4 xTexelR"+g+"C"+2*v+" = vec4(0.);\n          vec4 wR"+g+"C"+v+" = vec4(0.);\n          vec4 xR"+g+"C"+v+" = vec4(0.);";for(g=0;g<h;g++)for(var y=0;y<d;y++){if(m+="\n          xR = xRCorner + "+g*l+";\n          xC = xCCorner + "+(v=2*y)*p+";\n        ",1===c){if(v<f&&(m+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+i+" && xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+i+" && xCOffset >= 0 && xCOffset < "+a+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR"+g+"C"+v+" = vec4(previous.zw, xTexelR"+g+"C"+v+".xy);\n                } else {\n                  xR"+g+"C"+v+" = vec4(0, 0, xTexelR"+g+"C"+v+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+i+" && xC >= 0 && xC < "+a+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = xTexelR"+g+"C"+v+";\n              ",v+1<f)){var b=s%2==0?x(p):p;p%2==0&&s%2==1||p%2!=0&&s%2!=1?(m+="\n                  xCOffset = xC + "+s%2+" + "+b+";\n\n                  if(xR >= 0 && xR < "+i+" &&\n                    xCOffset >= 0 && xCOffset < "+a+") {\n                    xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",p>1&&(m+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+i+" &&\n                      xCOffset >= 0 && xCOffset < "+a+") {\n                      xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+g+"C"+v+" = vec4(0.);\n                    }\n                  "),m+="\n                  xR"+g+"C"+(v+1)+" = vec4(\n                    xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".xy);\n                "):m+="\n                  xCOffset = xC + "+b+";\n\n                  if(xR >= 0 && xR < "+i+" &&\n                    xCOffset >= 0 && xCOffset < "+a+") {\n                    xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+g+"C"+(v+1)+" = xTexelR"+g+"C"+(v+2)+";\n                "}}else v<f&&(m+="\n              if(xR >= 0 && xR < "+i+") {\n            ",s%2==1?(m+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+a+") {\n                  xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+g+"C"+(v+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = vec4(\n                  xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".zw);\n              ",v+1<f&&(m+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+a+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+g+"C"+(v+1)+" = vec4(xTexelR"+g+"C"+(v+2)+".xy, final.xy);\n                ")):(m+="\n                if(xC >= 0 && xC < "+a+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+(v+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = vec4(\n                  xTexelR"+g+"C"+v+".xy, xTexelR"+g+"C"+(v+2)+".xy);\n              ",v+1<f&&(m+="\n                  xR"+g+"C"+(v+1)+" = vec4(\n                    xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".zw);\n                ")),m+="}");v<f&&(m+="\n            vec4 wTexelR"+g+"C"+v+" = getW("+g+", "+v+", d1, q);\n            wR"+g+"C"+v+" = vec4(wTexelR"+g+"C"+v+".xz, wTexelR"+g+"C"+v+".xz);\n          ",v+1<f&&(m+="\n              vec4 wTexelR"+g+"C"+(v+1)+" = getW("+g+", "+(v+1)+", d1, q);\n              wR"+g+"C"+(v+1)+" =\n                vec4(wTexelR"+g+"C"+(v+1)+".xz, wTexelR"+g+"C"+(v+1)+".xz);"))}for(g=0;g<h;g++)for(v=0;v<f;v++)m+="dotProd += xR"+g+"C"+v+" * wR"+g+"C"+v+";";var w="",C="";n&&(w=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",C="result = activation(result);");var N=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+w+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+o+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+m+"\n\n        vec4 result = dotProd;\n        "+N+"\n        "+C+"\n        setOutput(result);\n      }\n    "},pa=function(t,e,n,r,i){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var a=t[0],o=t[1],s=t[2],u=t[3],c=e[0],l=n[0],p=n[1];this.outputShape=[c,l,p,u];var h="bilinear"===r?1:0,f=[o-1+".0",s-1+".0"],d=f[0],m=f[1],g=l>1?[""+(o-1)/(l-1),"(y2-y1) * height_ratio","y1*"+d+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+d],v=g[0],y=g[1],b=g[2],x=p>1?[""+(s-1)/(p-1),"(x2-x1) * width_ratio","x1*"+m+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+m],w=x[0],C=x[1],N=x[2];this.userCode="\n      const float height_ratio = float("+v+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+a+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+b+";\n        if( in_y < 0.0 || in_y > "+d+" ) {\n          setOutput(float("+i+"));\n          return;\n        }\n        float in_x = "+N+";\n        if( in_x < 0.0 || in_x > "+m+" ) {\n          setOutput(float("+i+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+h+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},ha=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,i=t[t.length-1],a=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+i+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+_i(r)+" coords = getOutputCoords();\n        int end = "+fa(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+i+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+a+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+fa(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function fa(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var da=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Bt.DENSE;var e=Ht(t),n=Ci();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Ni(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},ma=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Bt.DENSE;var e=Ht(t),n=Ci();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Ni(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},ga=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),va=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},ya=function(t){this.variableNames=["A"],this.outTexUsage=Pt.DOWNLOAD;var e=Ci();this.outputShape=t,this.userCode="\n      "+Ei+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},ba=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Pt.DOWNLOAD;var e=Ci();this.outputShape=t,this.userCode="\n      "+Ei+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    "},xa=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Ci(),i=e[0],a=e[1];this.outputShape=t;var o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode="\n      "+Si(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+a+";\n        int c = imod(flatIndex, "+a+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+a+".0, "+i+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+o+", 0., 0., 0.);\n      }\n    "},wa=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=Ci(),i=e[0],a=e[1];this.outputShape=t;var o="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;o+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+a+";\n              c = imod(flatIndex, "+a+");\n              uv = (vec2(c, r) + halfCR) / vec2("+a+".0, "+i+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+Si(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+o+"\n\n        "+r.output+" = "+s+";\n      }\n    "},Ca=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var i=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+i+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+a+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Na=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t)}},t}(),Sa=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var i=_i(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],a=0;a<t.length;a++)a===e?i.push("int(getIndices("+r[a]+"))"):i.push(""+r[a]);return i.join()}(t,n);this.userCode="\n      void main() {\n        "+i+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    "},Ea=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=_i(e.length),i=_i(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+i+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+a+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function Oa(t,e){var n=Ci();return ee(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function Ia(t,e){return ce(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function ka(t,e){return le(t,e,new Uint16Array([0,1,2,2,1,3]))}function Aa(t,e,n,r,i,a,o){he(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Yt(t,e,(function(){return t.bindTexture(u,s)})),Yt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Yt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Yt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Yt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Yt(t,e,(function(){return t.texImage2D(u,0,i,n,r,0,a,o,null)})),Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function Ra(t,e,n,r,i){var a=qt(n,r);return Aa(t,e,a[0],a[1],i.internalFormatFloat,i.textureFormatFloat,t.FLOAT)}function Ta(t,e,n,r,i){var a=qt(n,r);return Aa(t,e,a[0],a[1],i.internalFormatHalfFloat,i.textureFormatFloat,i.textureTypeHalfFloat)}function Da(t,e,n,r,i){var a=qt(n,r);return Aa(t,e,a[0],a[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function _a(t,e,n,r,i){var a=Kt(n,r);return Aa(t,e,a[0],a[1],i.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function Fa(t,e,n,r,i){var a=Kt(n,r);return Aa(t,e,a[0],a[1],i.internalFormatPackedHalfFloat,t.RGBA,i.textureTypeHalfFloat)}function Ma(t,e,n,r){return Yt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),de(t,e,n,"clipSpacePos",r,3,20,0)&&de(t,e,n,"uv",r,2,20,12)}function za(t,e,n,r,i,a,o){var s,u,c;Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),a instanceof Uint8Array?(s=new Uint8Array(r*i*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*i*4),u=t.FLOAT,c=o.internalFormatPackedFloat),s.set(a),Yt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,i,0,t.RGBA,u,s)})),Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function La(t,e,n,r){Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Yt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Yt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Yt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function Ba(t,e,n,r,i){var a=t.createBuffer();Yt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,a)}));var o=16*n*r;return Yt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,o,t.STREAM_READ)})),Yt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Yt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),a}function Pa(t,e,n){var r=t,i=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,i),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),i}function ja(t,e,n,r,i){var a=qt(n,r),o=a[0],s=a[1],u=new Uint8Array(n*r*4);return Yt(t,e,(function(){return t.readPixels(0,0,o,s,i.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Va(t,e,n,r,i,a,o,s){var u=t,c=new Float32Array(function(t,e){var n=Kt(t,e);return n[0]*n[1]*4}(a,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function Wa(t,e,n,r){var i=new Float32Array(n*r*4);return Yt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,i)})),i}var Ua=Object.freeze({createVertexShader:Oa,createVertexBuffer:Ia,createIndexBuffer:ka,createFloat32MatrixTexture:Ra,createFloat16MatrixTexture:Ta,createUnsignedBytesMatrixTexture:Da,createPackedMatrixTexture:_a,createFloat16PackedMatrixTexture:Fa,bindVertexProgramAttributeStreams:Ma,uploadDenseMatrixToTexture:za,uploadPixelDataToTexture:La,createBufferFromOutputTexture:Ba,downloadFloat32MatrixFromBuffer:Pa,downloadByteEncodedFloatMatrixFromOutputTexture:ja,downloadPackedMatrixFromBuffer:Va,downloadMatrixFromPackedOutputTexture:Wa}),Ga=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=p().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,Ut(e,t)):this.gl=Gt(e);var n="WEBGL_color_buffer_float";if(1===p().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=te(this.gl,this.debug,"OES_texture_float"),Fe(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=te(this.gl,this.debug,"OES_texture_half_float");else if(p().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Fe(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=te(this.gl,this.debug,"EXT_color_buffer_half_float");else if(p().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Fe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Fe(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Ia(this.gl,this.debug),this.indexBuffer=ka(this.gl,this.debug),this.framebuffer=fe(this.gl,this.debug),this.textureConfig=Xt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return p().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;Yt(e,this.debug,(function(){return e.finish()})),Yt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Yt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Yt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Yt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Yt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),Ra(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),Ta(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),Da(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),La(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),za(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),Fa(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),_a(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(xe(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Yt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ja(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,i,a){return Va(this.gl,t,0,0,0,i,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return Pa(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=Ba(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(p().getBool("WEBGL_FENCE_API_ENABLED")){var i=t,a=i.fenceSync(i.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=i.clientWaitSync(a,0,0);return t===i.ALREADY_SIGNALED||t===i.CONDITION_SATISFIED},e=a}else p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Wa(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=ne(e,this.debug,t),r=Oa(e,this.debug),i=oe(e,this.debug);return Yt(e,this.debug,(function(){return e.attachShader(i,r)})),Yt(e,this.debug,(function(){return e.attachShader(i,n)})),se(e,this.debug,i),this.debug&&ue(e,this.debug,i),this.vertexAttrsAreBound||(this.setProgram(i),this.vertexAttrsAreBound=Ma(e,this.debug,this.program,this.vertexBuffer)),i},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Yt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ue(this.gl,this.debug,this.program),Yt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?ge(this.gl,this.debug,t,e):ve(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Yt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),ye(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=Kt(e,n),i=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,i,a)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&ue(this.gl,this.debug,this.program),we(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Yt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Yt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=te(this.gl,this.debug,2===p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),i=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,i),i},t.prototype.endQuery=function(){if(2!==p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){switch(n.label){case 0:return[4,D((function(){return e.disposed||e.isQueryAvailable(t,p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),i=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),i&&!this.disjoint}return i=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),i&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||D((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),be(this.gl,this.debug,t,this.framebuffer),this.debug&&we(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(be(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&we(this.gl)):xe(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;be(r,this.debug,t,this.framebuffer),this.debug&&we(r),this.outputTexture=t,Yt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Yt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var i=this;this.throwIfDisposed(),Yt(this.gl,this.debug,(function(){return i.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function qa(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,i=e[n],a=i.shape;if(!I(r,a))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+a+" must match");if(!t.isUniform||!i.isUniform){var o=t.texShape,s=i.isUniform?null:i.texData.texShape;if(!I(o,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+o+" and "+s+" must match")}}))}var Ha=function(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,i=n.inChannels,a=n.strideWidth,o=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,p=n.dataFormat,h=s.left,f=s.top,d=i*r,m=Ci(),g="channelsLast"===p,v=g?0:1,y=g?1:2,b="",x=0;x<=1;x++)for(var w=0;w<=1;w++)b+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+x+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+o+" - "+f+";\n            d0 = offsetY + "+l+" * (pos / "+d+");\n\n            if(d0 < "+e[v]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+a+". - "+h+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+d+".) / "+i+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+i+".));\n\n                if ("+g+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*x+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*x+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+b+"\n\n        "+m.output+" = result;\n      }\n    "},Ka=function(t,e,n,r,i){this.variableNames=["x"],this.outputShape=[];var a,o=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";a=.5===i?"inversesqrt("+u+")":1===i?"1.0/("+u+")":"exp(log("+u+") * float(-"+i+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+o+"; j <= "+o+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+a+";\n        setOutput(val);\n      }\n    "},Xa=function(t,e,n,r,i){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=i,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+i+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+i+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},Ya=function(t,e,n,r,i){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var a,o=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";a=.5===i?"inversesqrt("+u+")":1===i?"1.0/("+u+")":"exp(log("+u+") * float(-"+i+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+o+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+o+"; j <= "+o+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+a+";\n        setOutput(result);\n      }\n    "},$a=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,i=t.effectiveFilterHeight,a=t.effectiveFilterWidth,o=i-1-t.padInfo.top,s=a-1-t.padInfo.left,u=i*a-1;this.userCode="\n      const ivec2 pads = ivec2("+o+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+i+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+a+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+a+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ja=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,o=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,p=u-1-t.padInfo.top,h=c-1-t.padInfo.left,f=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+p+", "+h+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+i+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+o+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+f+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Za=function(t,e,n,r,i,a,o){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===i&&(i=!1),void 0===a&&(a=null),void 0===o&&(o=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",p=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],f="",d="";a&&(f=o?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+a+"\n        }":"vec4 activation(vec4 x) {\n          "+a+"\n        }",d="result = activation(result);");var m=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+f+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+p[0]+" * "+h[0]+");\n          result += ("+p[1]+" * "+h[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+m+"\n\n        "+d+"\n\n        setOutput(result);\n      }\n    "},Qa=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),to=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},eo=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=wi("rc",e),r=_i(e),i=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",i=t-2;i<t;i++)r+=n[i]+" >= "+e[i],i<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";var i=r.slice(-2);return"\n    int r = "+i[0]+";\n    int c = "+i[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),o=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var i=0;i<=1;i++){for(var a=(0===r?"r":"rp1")+", "+(0===i?"c":"cp1"),o=2;o<t;o++)a=e[e.length-1-o]+","+a;n.push(a)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+i+") {\n            setOutput(vec4(0));\n          } else {\n            "+a+"\n\n            setOutput(vec4("+o+"));\n          }\n        }\n      "}},no=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,i=_i(r),a=e.map((function(t){return t[0]})).join(","),o=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+i+" start = "+i+"("+a+");\n      "+i+" end = "+i+"("+o+");\n\n      void main() {\n        "+i+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+i+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+a+";\n        int end = "+o+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},ro=function(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,i=_i(r),a=e.map((function(t){return t[0]})).join(","),o=e.map((function(e,n){return e[0]+t[n]})).join(","),s=wi("rc",r),u=wi("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",p=[i+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",f="",d=0,m=1===r?2:4;d<m;d++)f+="\n        "+p[d]+"\n        if ("+h+") {\n          result["+d+"] = float("+n+");\n        } else {\n          "+i+" source = rc - start;\n          result["+d+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";f+=1===r?"} ":"}}",this.userCode="\n      const "+i+" start = "+i+"("+a+");\n      const "+i+" end = "+i+"("+o+");\n\n      void main() {\n        "+i+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+f+"\n        setOutput(result);\n      }\n    "},io=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,i=t.strideHeight,a=t.strideWidth,o=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;var h="avg"===e,f="0.0";if(h||(f="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+i+", "+a+");\n        const ivec2 pads = ivec2("+l+", "+p+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+o+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var d=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(d="avgValue / count");var m=4*Math.floor(r/4),g=r%4,v="\n      if ("+h+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+i+", "+a+");\n      const ivec2 pads = ivec2("+l+", "+p+");\n      const float initializationValue = "+f+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+f+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+o+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+m+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+v+"\n          }\n\n          int xC = xCCorner + "+m+";\n          if ("+(1===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+v+"\n          } else if ("+(2===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+v+"\n          } else if ("+(3===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+v+"\n          }\n        }\n        setOutput("+d+");\n      }\n    "}},ao=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,i=t.strideDepth,a=t.strideHeight,o=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,p=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.front,d=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var g="avg"===e,v="0.0";if(g||(v="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+i+", "+a+", "+o+");\n        const ivec3 pads = ivec3("+f+", "+d+", "+m+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+p+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+h+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+p+" * "+h+" +\n                      wR * "+h+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var b=4*Math.floor(r/4),x=r%4,w="\n      if ("+g+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+i+", "+a+", "+o+");\n      const ivec3 pads = ivec3("+f+", "+d+", "+m+");\n      const float initializationValue = "+v+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+v+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+p+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+b+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+w+"\n            }\n\n            int xC = xCCorner + "+b+";\n            if ("+(1===x)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(2===x)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(3===x)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+w+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},oo=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,i=t.inSize,a=Math.ceil(i/n);this.outputShape=[r,a];var o="0.0",s="";"prod"===e?o="1.0":"min"===e?(o="1.0 / 1e-20",s="min"):"max"===e&&(o="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,p="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",h="vec4";"all"===e?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===e&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");var f="";i%n>0&&(f="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+o+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+f+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+o+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+p+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+p+"\n        } else if ("+(2===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+p+"\n        } else if ("+(3===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+p+"\n        }\n        setOutput("+u+");\n      }\n    "},so=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var i="thisRC = rc;";r%2==1&&(i+="thisRC.z += 1;"),r>1&&(i+="thisRC.y += 1;"),n+="\n        "+i+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Ni(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+Si(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},uo=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,i=r[1],a=r[2],o=t.shape,s=o[1],u=o[2],c=[n&&s>1?i-1:i,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],p=c[0]/l[0],h=c[1]/l[1],f=1/p,d=1/h,m=2*Math.ceil(f)+2,g=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+p+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+f+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(i-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(a-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},co=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var i=t[0],a=t[1],o=t[2],s=t[3];this.outputShape=[i,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},lo=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var i=t[0],a=t[1],o=t[2],s=t[3];this.outputShape=[i,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+a+".0, "+o+".0,\n                                     "+o+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+";\n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},po=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,i=r[1],a=r[2],o=t.shape,s=o[1],u=o[2],c=[n&&s>1?i-1:i,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],p=c[0]/l[0],h=c[1]/l[1],f=1/p,d=1/h,m=2*Math.ceil(f)+2,g=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+p+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+f+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+a+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},ho=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var i=t[0],a=t[1],o=t[2],s=t[3];this.outputShape=[i,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},fo=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),i=_i(n);this.userCode="\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},mo=function(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=wi("rc",n),i=r[n-1]+" + 1 < "+this.outputShape[n-1],a=r[n-2]+" + 1 < "+this.outputShape[n-2],o=_i(n);function s(n){var r=t.map((function(r,i){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(i,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+i+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+o+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+i+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+a+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+i+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},go=function(t,e,n,r,i,a,o){void 0===o&&(o=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;var s=_i(i.length),u=_i(a.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",p="";1===r?p="i":2===r&&(p="i, coords[1]");var h="getUpdates("+p+")",f=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+i+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+f+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+h+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},vo=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,i=t.inSize,a=t.numSegments,o=a*Math.ceil(i/n);this.outputShape=[r,o];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";i%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return initializationValue;\n        }\n      ");var p="";i%n>0&&(p="\n        if (inIdx < 0 || inIdx >= "+i+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+p+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+a+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+a+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},yo=function(t,e,n){var r,i;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)i="resRC",r="resRC";else{for(var a=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],s=[],u=0;u<e.length;u++)s.push(""+a[u]),u<t&&o.push(""+a[u]);r=o.join(),i=s.join()}var c=_i(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+i+"));\n        } else {\n          setOutput(getB("+i+"));\n        }\n      }\n    "},bo=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=_i(this.rank),r="uniform int start["+this.rank+"];",i=function(t){if(1===t)return"sourceLoc";if(t<=6)return xo.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return"sourceLoc."+xo[e]+" = start["+e+"] + coords."+xo[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+i+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),xo=["x","y","z","w","u","v"],wo=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=_i(this.rank),n=wi("coords",this.rank),r=wi("sourceLoc",this.rank),i=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",a="getChannel(getSource("+r.join()+"), "+i+")",o="\n      result.x = "+a+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+a+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+a+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+a+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return"start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+"\n        vec4 result = vec4(0.);\n        "+o+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Co=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,i=_i(n.length),a=_i(n.length),o="";if(1===r)o="coords * strides + begin";else{var s=0;o=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",")}this.userCode="\n      "+i+" begin = "+i+"("+t+");\n      "+i+" strides = "+i+"("+e+");\n\n      void main() {\n        "+a+" coords = getOutputCoords();\n        setOutput(getX("+o+"));\n      }\n    "},No=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,i=So(e,n),a=Eo(t,i,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var o=this.freeTextures[a].shift();return this.usedTextures[a].push(o),o}return this.numUsedTextures++,this.log(),i===jt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):i===jt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):i===jt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):i===jt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):i===jt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var i=Eo(e,So(n,r),r);i in this.freeTextures||(this.freeTextures[i]=[]),this.freeTextures[i].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[i],o=a.indexOf(t);if(o<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(o,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function So(t,e){if(t===Pt.UPLOAD)return jt.PACKED_2X2_FLOAT32;if(t===Pt.RENDER||null==t)return function(t){return p().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?jt.PACKED_2X2_FLOAT32:jt.UNPACKED_FLOAT32:t?jt.PACKED_2X2_FLOAT16:jt.UNPACKED_FLOAT16}(e);if(t===Pt.DOWNLOAD||t===Pt.PIXELS)return jt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Eo(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var Oo=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var i=_i(this.rank),a=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],i=0;i<t.length;i++)r.push("imod("+n[i]+", "+t[i]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+i+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    "},Io=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var i=_i(this.rank),a=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),i=0;i<t.length;i++)r[t[i]]=n[i];return r.join()}(e);this.userCode="\n    void main() {\n      "+i+" resRC = getOutputCoords();\n      setOutput(getA("+a+"));\n    }\n    "},ko=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var i=_i(this.rank),a=xi("rc",this.rank),o=new Array(this.rank);for(r=0;r<e.length;r++)o[e[r]]=a[r];var s="vec2("+o.slice(-2).join()+")",u="++"+a[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+o.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+i+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+a[this.rank-1]+";\n      if(++"+a[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    "},Ao=1.7580993408473768,Ro=1.0507009873554805,To=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Do="if (isnan(x)) return x;",_o="return x;",Fo="return abs(x);",Mo=Do+"\n  return (x < 0.0) ? 0.0 : x;\n",zo=Do+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Lo="return (x >= 0.0) ? x : (exp(x) - 1.0);",Bo="return -x;",Po="return ceil(x);",jo="return floor(x);",Vo="return exp(x);",Wo="return exp(x) - 1.0;",Uo="return x;",Go="return x;",qo="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ho="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ko="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",Xo=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Yo=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=wi("rc",e),r=_i(e),i=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),o=e<=1?"rc":"vec2("+a.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+i+");\n\n        setOutput(getChannel(packedInput, "+o+"));\n      }\n    "},$o={};function Jo(t,e){if(void 0===e&&(e=!1),"linear"===t)return e?Go:_o;if("relu"===t)return e?qo:Mo;if("elu"===t)return e?Ko:Lo;if("relu6"===t)return e?Ho:zo;if("prelu"===t)return e?Ki:qi;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var Zo=600,Qo=function(t){function e(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!p().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){var i=Gt(p().getNumber("WEBGL_VERSION"));r.binaryCache=(n=p().getNumber("WEBGL_VERSION"))in $o?$o[n]:($o[n]={},$o[n]),r.gpgpu=new Ga(i),r.canvas=i.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new No(r.gpgpu),r.numMBBeforeWarning=null==p().global.screen?1024:p().global.screen.height*p().global.screen.width*window.devicePixelRatio*Zo/1024/1024,r.texData=new jr(r,Mt),r}return s(e,t),e.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},e.prototype.write=function(t,e,n){if(p().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:Pt.UPLOAD}),r},e.prototype.move=function(t,e,n,r){if(p().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:Pt.UPLOAD})},e.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,i=e.complexTensors,a=e.slice,o=e.shape,s=e.isPacked;if(null!=a){var u;u=s?new Xo(o,Uo):new To(o,Uo);var c=this.runWebGLProgram(u,[{dataId:t,shape:o,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var p,h,f=null!=this.activeTimers;return f&&(p=et()),h="complex64"===r?si(i.real.dataSync(),i.imag.dataSync()):this.getValuesFromTexture(t),f&&(this.downloadWaitMs+=et()-p),this.convertAndCacheOnCPU(t,h)},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){var e,n,r,i,a,o,s,u,l,h,f,d,m,g,v,y,b,x,w,C,N,S;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),r=n.values,i=n.shape,a=n.slice,o=n.dtype,s=n.complexTensors,u=n.isPacked,null!=a)return void 0,l=u?new Xo(i,Uo):new To(i,Uo),h=this.runWebGLProgram(l,[{dataId:t,shape:i,dtype:o}],o),f=this.read(h.dataId),this.disposeData(h.dataId),[2,f];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!p().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===p().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return d=null,"complex64"!==o&&p().get("WEBGL_BUFFER_SUPPORTED")&&(m=this.decode(t),g=this.texData.get(m.dataId),d=(S=this.gpgpu).createBufferFromTexture.apply(S,[g.texture].concat(Ht(i)))),this.pendingRead.set(t,[]),"complex64"===o?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==o?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return y=c.sent(),b=y[0],x=y[1],v=si(b,x),[3,5];case 4:null==d?v=this.getValuesFromTexture(t):(w=O(i),v=this.gpgpu.downloadFloat32MatrixFromBuffer(d,w)),c.label=5;case 5:return null!=m&&this.disposeData(m.dataId),C=this.convertAndCacheOnCPU(t,v),N=this.pendingRead.get(t),this.pendingRead.delete(t),N.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},e.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!Zt(n)){if(p().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+n+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+n+" cannot be represented on this device.")}}},e.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,i=n.dtype,a=n.isPacked,o=O(r);if(p().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var s=this.decode(t),u=this.texData.get(s.dataId),c=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[u.texture].concat(Ht(r))).subarray(0,o);return this.disposeData(s.dataId),c}var l=p().getBool("WEBGL_PACK")&&!0===a,h=l?Ie(r):r,f=l?new ba(h):new ya(h),d=this.runWebGLProgram(f,[{shape:h,dtype:i,dataId:t}],"float32"),m=this.texData.get(d.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m.texture,m.texShape[0],m.texShape[1]).subarray(0,o);return this.disposeData(d.dataId),g},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n,r,i,a,o,s;return c(this,(function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),i=E(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),a=E(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(i)];case 1:return o=u.sent(),s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:w(o),getExtraProfileInfo:function(){return o.map((function(t,e){return{name:a[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,s]}}))}))},e.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},e.prototype.startTimer=function(){return p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:et(),endMs:null}},e.prototype.endTimer=function(t){return p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=et(),t)},e.prototype.getQueryTime=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return p().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},e.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},e.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,i=e.texShape,a=e.usage,o=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(i,r),this.textureManager.releaseTexture(n,i,a,o)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},e.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},e.prototype.getDataInfo=function(t){return this.texData.get(t)},e.prototype.getCPUBackend=function(){return p().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Mt.findBackend("cpu")),this.cpuBackend):null},e.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&t.size<e}))},e.prototype.getGPGPUContext=function(){return this.gpgpu},e.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Mt.keep(t.clone()),imag:Mt.keep(e.clone())},n},e.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===O(n))return dn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,i=Mr(t.shape,e,n);if(r||!i){var a=p().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wo(n):new bo(n),o=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,o)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},e.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),i=this.makeOutput(n,t.dtype),a=this.texData.get(i.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;var o=zr(e,t.strides);r.slice&&(o+=r.slice.flatOffset),a.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),i},e.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var i=Dr(e,n,r);if(i.some((function(t){return 0===t})))return dn([],i);var a=new Co(e,r,i);return this.compileAndRun(a,[t])},e.prototype.reverse=function(t,e){var n=p().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mo(t.shape,e):new fo(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return hn(t)})),r=t.map((function(t){return fn(t)}));return pn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>p().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var i=Math.floor(t.length/2),a=this.concat(t.slice(0,i),e),o=this.concat(t.slice(i),e);return this.concat([a,o],e)}if(p().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var s=new Qi(t.map((function(t){return t.shape})),e);return this.compileAndRun(s,t)}var u=cn(t.map((function(t){return t.shape})),e),c=t.map((function(t){return t.as2D(-1,O(t.shape.slice(e)))})),l=new Zi(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(u)},e.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Bo,t.dtype);var e=new To(t.shape,Bo);return this.compileAndRun(e,[t])},e.prototype.batchMatMul=function(t,e,n,r){var i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],o=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===i||1===a)&&o>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===a?t:t.as3D(s,o,1),c=1===a?2:1,l=1===a?e.as3D(s,1,o):e;return this.multiply(u,l).sum(c,!0)}var p=Ot(t.dtype,e.dtype),h=new Za(t.shape,[s,i,a],n,r);return this.compileAndRun(h,[t,e],p)},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,i=t.transposeB,a=t.bias,o=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=i?n.shape[1]:n.shape[2],l=e.shape[0],p=Ot(e.dtype,n.dtype),h=null!=a,f=null!=s,d=o?Jo(o,!0):null,m=new Za(e.shape,[l,u,c],r,i,h,d,f),g=[e,n];return a&&g.push(a),s&&g.push(s),this.compileAndRun(m,g,p)},e.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),i=new Vi("return areal * breal - aimag * bimag;",t.shape,e.shape),a=new Vi("return areal * bimag + aimag * breal;",t.shape,e.shape),o=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],s=this.compileAndRun(i,o),u=this.compileAndRun(a,o),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Gi,t.dtype);var l=new Hi(Gi,t.shape,e.shape);return this.compileAndRun(l,[t,e],t.dtype)},e.prototype.batchNormalization=function(t,e,n,r,i,a){var o=[t,e,n],s=null;null!=a&&(s=a.shape,o.push(a));var u=null;if(null!=i&&(u=i.shape,o.push(i)),p().getBool("WEBGL_PACK_NORMALIZATION")){var c=new ji(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,o)}var l=new Pi(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,o)},e.prototype.localResponseNormalization4D=function(t,e,n,r,i){var a=p().getBool("WEBGL_PACK_NORMALIZATION")?new Ya(t.shape,e,n,r,i):new Ka(t.shape,e,n,r,i);return this.compileAndRun(a,[t])},e.prototype.LRNGrad=function(t,e,n,r,i,a,o){var s=new Xa(e.shape,r,i,a,o);return this.compileAndRun(s,[e,n,t])},e.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return it(t)}));return di(Kn(t.shape,t.dtype,n),e)}var r=new Oo(t.shape,e);return this.compileAndRun(r,[t])},e.prototype.pad=function(t,e,n){var r=p().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ro(t.shape,e,n):new no(t.shape,e,n);return this.compileAndRun(r,[t])},e.prototype.transpose=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,e);var n=p().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ko(t.shape,e):new Io(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new Sa(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},e.prototype.batchToSpaceND=function(t,e,n){C(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),i=wr(t.shape,e,r),a=Cr(i.length,e.length),o=Nr(t.shape,e,r),s=Sr(n,e.length),u=Er(o,n,e.length);return t.reshape(i).transpose(a).reshape(o).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){C(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),i=[[0,0]];i.push.apply(i,n);for(var a=1+e.length;a<t.shape.length;++a)i.push([0,0]);var o=t.pad(i),s=wr(o.shape,e,r,!1),u=Cr(s.length,e.length,!1),c=Nr(o.shape,e,r,!1);return o.reshape(s).transpose(u).reshape(c)},e.prototype.reduce=function(t,e,n){var r=t.shape[0],i=t.shape[1],a=kr(i),o=new oo({windowSize:a,inSize:i,batchSize:r},e),s=this.compileAndRun(o,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},e.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],i=t.shape[1];null!=n&&(r=n.shape[0],i=n.shape[1]);var a=kr(i),o=new bi({windowSize:a,inSize:i,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(o,s,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)},e.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,i=kr(r[r.length-1]),a=new zi(r,i,e,null==n),o=null==n?[t]:[t,n],s=this.compileAndRun(a,o,"int32");return s.rank===t.rank?this.argReducePacked(t,e,s):s},e.prototype.sum=function(t,e){rn("sum",e,t.rank);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i),o=It(t.dtype);return this.reduce(a,"sum",o).reshape(r)},e.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i),o=It(t.dtype);return this.reduce(a,"prod",o).reshape(r)},e.prototype.unsortedSegmentSum=function(t,e,n){var r=0,i=an([r],t.rank),a=t;null!=i&&(a=t.transpose(i),r=sn(1,t.rank)[0]);var o=function(t,e,n){for(var r=[],i=t.length,a=0;a<i;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=O([a.shape[r]]),u=a.as2D(-1,s),c=It(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(o);return null!=i&&(l=l.transpose(on(i))),l},e.prototype.segOpCompute=function(t,e,n,r,i){var a=t.shape[0],o=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Ir?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}(o,i),u=new vo({windowSize:s,inSize:o,batchSize:a,numSegments:i},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===i?c:(n=On(0,i).tile([o/s]),this.segOpCompute(c,e,n,r,i))},e.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(rn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!p().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var i=en(t.shape,r),a=i[0],o=O(i[1]),s=t.as2D(-1,o);return this.argReduce(s,n).reshape(a)}return this.argReducePacked(t,n)},e.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},e.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},e.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var i=new ha(t.shape,n,r);return this.compileAndRun(i,[t])},e.prototype.equal=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new Hi("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.notEqual=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new Hi("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new Hi("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.lessEqual=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new Hi("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new Hi("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greaterEqual=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new Hi("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalNot=function(t){var e=new To(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},e.prototype.logicalAnd=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new Hi("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalOr=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new Hi("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.select=function(t,e,n){var r=new yo(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Ot(e.dtype,n.dtype))},e.prototype.where=function(t){Xe("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return gi(t.shape,e)},e.prototype.topk=function(t,e,n){return mi(t.dataSync(),t.shape,t.dtype,e)},e.prototype.min=function(t,e){rn("min",e,t.rank);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i);return this.reduce(a,"min",a.dtype).reshape(r)},e.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.mod=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hi("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);rn("max",e,t.rank);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i);return this.reduce(a,"max",a.dtype).reshape(r)},e.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.all=function(t,e){rn("all",e,t.rank);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i);return this.reduce(a,"all",a.dtype).reshape(r)},e.prototype.any=function(t,e){rn("any",e,t.rank);var n=en(t.shape,e),r=n[0],i=O(n[1]),a=t.as2D(-1,i);return this.reduce(a,"any",a.dtype).reshape(r)},e.prototype.squaredDifference=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("return (a - b) * (a - b);",t.shape,e.shape):new Hi("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.realDivide=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new Hi("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return this.compileAndRun(n,[t,e],"float32")},e.prototype.floorDiv=function(t,e){if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new Hi("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")},e.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Wi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Ot(t.dtype,e.dtype);if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Wi,n);var r=new Hi(Wi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.packedUnaryOp=function(t,e,n){var r=new Xo(t.shape,e);return this.compileAndRun(r,[t],n)},e.prototype.packedBinaryOp=function(t,e,n,r,i){void 0===i&&(i=!1);var a=new Xi(n,t.shape,e.shape,i);return this.compileAndRun(a,[t,e],r)},e.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,i=this.texData.get(t.dataId),a=this.texData.get(e.dataId),o=[[i.complexTensors.real,a.complexTensors.real],[i.complexTensors.imag,a.complexTensors.imag]].map((function(i){var a=i[0],o=i[1],s=r.makeComplexComponentTensorInfo(t,a),u=r.makeComplexComponentTensorInfo(e,o),c=new Hi(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],Ot(a.dtype,o.dtype))})),s=o[0],u=o[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},e.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},e.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>p().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var i=t.map((function(t){return t.dtype})).reduce((function(t,e){return Ot(t,e)})),a=t.map((function(t){return t.shape})),o=p().getBool("WEBGL_PACK")?new yi(t[0].shape,a):new vi(t[0].shape,a);return this.compileAndRun(o,t,i)},e.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Ui);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Ot(t.dtype,e.dtype);if(p().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ui,t.dtype);var r=new Hi(Ui,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.pow=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hi("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Ot(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},e.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Po,t.dtype);var e=new To(t.shape,Po);return this.compileAndRun(e,[t])},e.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,jo,t.dtype);var e=new To(t.shape,jo);return this.compileAndRun(e,[t])},e.prototype.sign=function(t){var e=new To(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},e.prototype.isNaN=function(t){var e=new To(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isInf=function(t){var e=new To(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isFinite=function(t){var e=new To(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.round=function(t){var e=new To(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},e.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Vo,t.dtype);var e=new To(t.shape,Vo);return this.compileAndRun(e,[t])},e.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Wo,t.dtype);var e=new To(t.shape,Wo);return this.compileAndRun(e,[t])},e.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new To(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},e.prototype.log1p=function(t){var e=new To(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},e.prototype.sqrt=function(t){var e=new To(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},e.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new To(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},e.prototype.reciprocal=function(t){var e=new To(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},e.prototype.relu=function(t){var e;return e=p().getBool("WEBGL_PACK")?new Xo(t.shape,qo):new To(t.shape,Mo),this.compileAndRun(e,[t])},e.prototype.relu6=function(t){var e;return e=p().getBool("WEBGL_PACK")?new Xo(t.shape,Ho):new To(t.shape,zo),this.compileAndRun(e,[t])},e.prototype.prelu=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi(Ki,t.shape,e.shape):new Hi(qi,t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.elu=function(t){if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ko,t.dtype);var e=new To(t.shape,Lo);return this.compileAndRun(e,[t])},e.prototype.eluDer=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Hi("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.selu=function(t){var e=new To(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])},e.prototype.int=function(t){var e=new To(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")},e.prototype.clip=function(t,e,n){var r,i=(r=p().getBool("WEBGL_PACK_CLIP")?new $i(t.shape):new Yi(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,i)},e.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(p().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Fo,t.dtype);var e=new To(t.shape,Fo);return this.compileAndRun(e,[t])},e.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Ji(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},e.prototype.sigmoid=function(t){var e=new To(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},e.prototype.softplus=function(t){var e=new To(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},e.prototype.sin=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])},e.prototype.cos=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])},e.prototype.tan=function(t){var e=new To(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},e.prototype.asin=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])},e.prototype.acos=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])},e.prototype.atan=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])},e.prototype.atan2=function(t,e){var n=p().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.sinh=function(t){var e=new To(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.cosh=function(t){var e=new To(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.tanh=function(t){var e=new To(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},e.prototype.asinh=function(t){var e=new To(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},e.prototype.acosh=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])},e.prototype.atanh=function(t){var e=new To(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])},e.prototype.erf=function(t){var e=new To(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])},e.prototype.step=function(t,e){var n=new To(t.shape,function(t){return void 0===t&&(t=0),Do+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},e.prototype.conv2dByMatMul=function(t,e,n,r,i,a){var o=t.shape,s=this.texData.get(t.dataId),u=n.inChannels,c=o[0]*o[1]*o[2],l=n.outChannels,h="channelsLast"===n.dataFormat,f=(1===c||1===l)&&u>1e3,d=o[2]%2!=0&&!!s.isPacked;if(f||!p().getBool("WEBGL_LAZILY_UNPACK")||!p().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!d){var m=h?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],g=this.reshape(t,[1,m,n.inChannels]),v=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:v,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a}),n.outShape)}var y=h?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),b={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},x=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,C(Re(s.shape,b.shape),(function(){return"packed reshape "+s.shape+" to "+b.shape+" isn't free"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),N=this.fusedBatchMatMul({a:b,b:w,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a}),S=this.texData.get(N.dataId);return C(S.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=x,S.shape=n.outShape,Mt.makeTensorFromDataId(N.dataId,n.outShape,N.dtype)},e.prototype.conv2dWithIm2Row=function(t,e,n,r,i,a){var o=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,p="channelsLast"===n.dataFormat,h=o*s*u,f=l*c,d=[h,f],m=t.squeeze([0]),g=e.reshape([1,h,-1]),v=new Ha(d,m.shape,n),y=this.compileAndRun(v,[m]).reshape([1,d[0],d[1]]),b=null!=r,x=null!=a,w=i?Jo(i,!0):null,C=new Za(y.shape,[1,f,n.outChannels],!0,!1,b,w,x),N=[y,g];r&&N.push(r),x&&N.push(a);var S=this.compileAndRun(C,N);return p?S.reshape([1,l,c,n.outChannels]):S.reshape([1,n.outChannels,l,c])},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,i=t.bias,a=t.activation,o=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,i,a,o);if(p().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,i,a,o);var s=null!=i,u=null!=o,c=a?Jo(a,!1):null,l=new sa(r,s,c,u),h=[e,n];return i&&h.push(i),o&&h.push(o),this.compileAndRun(l,h)},e.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(p().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new sa(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerInput=function(t,e,n){var r=new na(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerFilter=function(t,e,n){var r=new ea(n);return this.compileAndRun(r,[t,e])},e.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,i=t.convInfo,a=t.bias,o=t.activation,s=t.preluActivationWeights,u=p().getBool("WEBGL_PACK_DEPTHWISECONV")&&i.strideWidth<=2&&i.outChannels/i.inChannels==1,c=o?Jo(o,u):null,l=[n,r],h=null!=a,f=null!=s;return h&&l.push(a),f&&l.push(s),u?(e=new la(i,h,c,f),this.compileAndRun(e,l)):(e=new ca(i,h,c,f),this.compileAndRun(e,l))},e.prototype.depthwiseConv2D=function(t,e,n){var r;return p().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new la(n),this.compileAndRun(r,[t,e])):(r=new ca(n),this.compileAndRun(r,[t,e]))},e.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new oa(n);return this.compileAndRun(r,[t,e])},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new aa(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3d=function(t,e,n){var r=new ua(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerInput=function(t,e,n){var r=new ia(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerFilter=function(t,e,n){var r=new ra(n);return this.compileAndRun(r,[t,e])},e.prototype.maxPool=function(t,e){var n=new io(e,"max",!1);return this.compileAndRun(n,[t])},e.prototype.avgPool=function(t,e){var n=new io(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPoolBackprop=function(t,e,n,r){var i=new io(r,"max",!0),a=this.compileAndRun(i,[e]),o=new $a(r),s=this.compileAndRun(o,[t,a],e.dtype);return a.dispose(),s},e.prototype.avgPoolBackprop=function(t,e,n){var r=new Li(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.cast=function(t,e){return ii(t,e,this)},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),i=0,a=0;a<t.rank;a++)a!==e&&(r[i++]=t.shape[a]);var o=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)o[e]=a,u[a]=this.slice(t,o,s).reshape(r);return u},e.prototype.avgPool3d=function(t,e){var n=new ao(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.avgPool3dBackprop=function(t,e,n){var r=new Bi(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.maxPool3d=function(t,e){var n=new ao(e,"max",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPool3dBackprop=function(t,e,n,r){var i=new ao(r,"max",!0),a=this.compileAndRun(i,[e]),o=new Ja(r),s=this.compileAndRun(o,[t,a],e.dtype);return a.dispose(),s},e.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!Re(t.shape,e)&&(null===n.texture||!Re(n.shape,e))){var r=this.packedReshape(t,e);return Mt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return ai(t,e)},e.prototype.resizeBilinear=function(t,e,n,r){var i=p().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new lo(t.shape,e,n,r):new co(t.shape,e,n,r);return this.compileAndRun(i,[t],"float32")},e.prototype.resizeBilinearBackprop=function(t,e,n){var r=new uo(t,e,n);return this.compileAndRun(r,[t])},e.prototype.resizeNearestNeighbor=function(t,e,n,r){var i=new ho(t.shape,e,n,r);return this.compileAndRun(i,[t])},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new po(t,e,n);return this.compileAndRun(r,[t])},e.prototype.multinomial=function(t,e,n,r){var i=e?t:Br(t),a=i.shape[0],o=i.shape[1],s=new Qa(a,o,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[i],"int32",u)},e.prototype.oneHot=function(t,e,n,r){var i=new to(t.size,e,n,r);return this.compileAndRun(i,[t])},e.prototype.diag=function(t){var e=new va(t.size);return this.compileAndRun(e,[t])},e.prototype.nonMaxSuppression=function(t,e,n,r,i){return Xe("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),pi(t.dataSync(),e.dataSync(),n,r,i)},e.prototype.cropAndResize=function(t,e,n,r,i,a){var o=new pa(t.shape,e.shape,r,i,a);return this.compileAndRun(o,[t,e,n],"float32")},e.prototype.depthToSpace=function(t,e,n){C(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],i="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],o="NHWC"===n?t.shape[3]:t.shape[1],s=i*e,u=a*e,c=o/(e*e),l=new ga("NHWC"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},e.prototype.split=function(t,e,n){return fi(t,e,n)},e.prototype.scatterND=function(t,e,n){var r=Ar(0,t,n),i=r.sliceRank,a=r.numUpdates,o=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/o,o],l=t.reshape([a,i]),p=e.reshape([a,o]);if(0===u)return ai(dn([]),n);var h=gn(0),f=new go(a,i,l.rank,p.rank,s,c);return this.compileAndRun(f,[p,l,h]).reshape(n)},e.prototype.sparseToDense=function(t,e,n,r){var i=Ar(0,t,n),a=i.sliceRank,o=i.numUpdates,s=i.strides,u=i.outputSize,c=new go(o,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},e.prototype.fft=function(t){return this.fftImpl(t,!1)},e.prototype.ifft=function(t){return this.fftImpl(t,!0)},e.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new Ca("return real * expR - imag * expI;",t.shape,e),i=new Ca("return real * expI + imag * expR;",t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],o=this.compileAndRun(r,a),s=this.compileAndRun(i,a),u=this.complex(o,s).as2D(t.shape[0],t.shape[1]);return o.dispose(),s.dispose(),u},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],i=Or(t,e),a=i[0],o=i[1],s=i[2],u=i[3],c=e.reshape([o,r]),l=t.reshape([t.size/s,s]),p=new Ea(r,u,[o,s]);return this.compileAndRun(p,[l,c]).reshape(a)},e.prototype.fill=function(t,e,n){if("string"===(n=n||K(e))){var r=L(n,O(t));return r.fill(e),Mt.makeTensor(r,t,n,this)}var i=new Na(t,e),a=i.getCustomSetupFunc(e);return this.compileAndRun(i,[],n,a)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},e.prototype.linspace=function(t,e,n){return oi(t,e,n)},e.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},e.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Mt.makeTensorFromDataId(n,t,e,this)},e.prototype.unpackTensor=function(t){var e=new Yo(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},e.prototype.packTensor=function(t){var e=new eo(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},e.prototype.packedReshape=function(t,e){var n=[Ee(t.shape)].concat(Oe(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},i=[Ee(e)].concat(Oe(e)),a=new so(i,n),o=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}},e.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,i=n.shape,a=n.dtype,o=Ie(i);return e=r?new ma(o):new da(o),{dtype:a,shape:i,dataId:this.runWebGLProgram(e,[{shape:o,dtype:a,dataId:t}],a,null,!0).dataId}},e.prototype.runWebGLProgram=function(t,e,n,r,i){var a=this;void 0===i&&(i=!1);var o=this.makeTensorInfo(t.outputShape,n),s=this.texData.get(o.dataId);if(t.packedOutput&&(s.isPacked=!0),t.outPackingScheme===Bt.DENSE){var u=Ht(t.outputShape);s.texShape=u.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(s.usage=t.outTexUsage),0===O(o.shape))return s.values=z(o.dtype,0),o;var c=[],l=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&O(e.shape)<=p().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?a.unpackTensor(e):a.packTensor(e),c.push(e),n=a.texData.get(e.dataId);else if(n.isPacked&&!Re(n.shape,e.shape)){var r=e,i=e.shape;e.shape=n.shape,e=a.packedReshape(e,i),c.push(e),n=a.texData.get(e.dataId),r.shape=i}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);var h,f={shape:o.shape,texData:s,isUniform:!1},d=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e}));var i=t.userCode;return t.constructor.name+"_"+r+"_"+i}(t,l,f),m=this.getAndSaveBinary(d,(function(){return function(t,e,n,r){var i=e.userCode,a=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),o=a.map((function(t){return t.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Oi(a,s,i,e.packedInputs),c=t.createProgram(u),l=null,h=t.getUniformLocation(c,"NAN",!1);1===p().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var f={},d=0;d<e.variableNames.length;d++){var m=e.variableNames[d];f[m]=t.getUniformLocation(c,m,!1),f["offset"+m]=t.getUniformLocation(c,"offset"+m,!1)}return{program:e,source:u,webGLProgram:c,uniformLocations:f,inShapeInfos:o,outShapeInfo:s,infLoc:l,nanLoc:h}}(a.gpgpu,t,l,f)})),g=null!=this.activeTimers;if(g&&(h=this.startTimer()),function(t,e,n,r,i){qa(e.inShapeInfos,n),qa([e.outShapeInfo],[r]);var a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,o[0],o[1]):t.setOutputMatrixTexture(a,o[0],o[1]),t.setProgram(e.webGLProgram),1===p().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var i=e.program.variableNames[r],a=e.uniformLocations[i],o=e.uniformLocations["offset"+i];if(null!=a)if(n.isUniform)if(O(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(a,s)}else null!=n.texData.slice&&null!=o&&t.gl.uniform1i(o,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=i&&i(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,m,l,f,r),c.forEach((function(t){return a.disposeData(t.dataId)})),g&&(h=this.endTimer(h),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(h)})),!p().getBool("WEBGL_LAZILY_UNPACK")&&s.isPacked&&!1===i){var v=this.unpackTensor(o);return this.disposeData(o.dataId),v}return o},e.prototype.compileAndRun=function(t,e,n,r,i){void 0===i&&(i=!1),n=n||e[0].dtype;var a=this.runWebGLProgram(t,e,n,r,i);return Mt.makeTensorFromDataId(a.dataId,a.shape,a.dtype)},e.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},e.prototype.getTextureManager=function(){return this.textureManager},e.prototype.dispose=function(){this.disposed||(this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},e.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ge((function(){if(!p().get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=p().getBool("DEBUG");p().set("DEBUG",!1);var n=t.abs(gn(1e-8)).dataSync()[0];if(p().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},e.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},e.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,i=n.dtype,a=n.values,o=n.texture,s=n.usage,u=n.isPacked;if(null==o){var c,l=null!=this.activeTimers;l&&(c=et());var p=n.texShape;if(null==p&&(p=ke(r,u),n.texShape=p),null!=a){var h=Ie(r),f=void 0,d=p[1],m=p[0],g=a instanceof Uint8Array;u?(d=(e=Kt(p[0],p[1]))[0],m=e[1],f=new wa(h,[m,d],g)):f=new xa(h,[m,d],g);var v=this.makeTensorInfo([m,d],i);this.texData.get(v.dataId).usage=g?Pt.PIXELS:Pt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(v.dataId),d,m,a);var y=this.runWebGLProgram(f,[v],i,null,!0),b=this.texData.get(y.dataId);n.texture=b.texture,n.texShape=b.texShape,n.isPacked=b.isPacked,n.usage=b.usage,this.disposeData(v.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=et()-c)}else{var x=this.acquireTexture(p,s,i,u);n.texture=x}}},e.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},e.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var i=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+i+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,r)},e.prototype.computeBytes=function(t,e){return t[0]*t[1]*W(e)},e}(Vr);zt()&&Mt.registerBackend("webgl",(function(){return new Qo}),2);var ts=ln({square_:function(t){var e=Je(t,"x","square"),n=[e];return Mt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}),"Square",{},n,[])}}),es=ln({abs_:function(t){var e=Je(t,"x","abs");return"complex64"===e.dtype?Mt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Mt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),"Abs")}}),ns=ln({acos_:function(t){var e=Je(t,"x","acos");return Mt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(gn(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),rs=ln({acosh_:function(t){var e=Je(t,"x","acosh");return Mt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),is=ln({asin_:function(t){var e=Je(t,"x","asin");return Mt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(gn(1).sub(n.toFloat().square()).sqrt())}}}))}}),as=ln({asinh_:function(t){var e=Je(t,"x","asinh");return Mt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(gn(1).add(n.toFloat().square()).sqrt())}}}))}}),os=ln({atan_:function(t){var e=Je(t,"x","atan");return Mt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),ss=ln({atanh_:function(t){var e=Je(t,"x","atanh");return Mt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(gn(1).sub(n.toFloat().square()))}}}))}}),us=ln({ceil_:function(t){var e=Je(t,"x","ceil");return Mt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),cs=ln({clipByValue_:function(t,e,n){var r=Je(t,"x","clipByValue");C(e<=n,(function(){return"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."}));var i=[r],a={min:e,max:n};return Mt.runKernelFunc((function(t,i){var a=t.clip(r,e,n);return i([r]),a}),{x:r},(function(t,r){var i=r[0];return{x:function(){return t.where(i.greaterEqual(e).logicalAnd(i.lessEqual(n)),kn(t))}}}),"ClipByValue",a,i)}}),ls=ln({cos_:function(t){var e=Je(t,"x","cos");return Mt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sin().neg().mul(t)}}}))}}),ps=ln({cosh_:function(t){var e=Je(t,"x","cosh");return Mt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),hs=ln({erf_:function(t){var e=Je(t,"x","erf");return C("int32"===e.dtype||"float32"===e.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Mt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),fs=ln({exp_:function(t){var e=Je(t,"x","exp");return Mt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{$x:e},(function(t,e){return{$x:function(){return t.mulStrict(e[0])}}}))}}),ds=ln({expm1_:function(t){var e=Je(t,"x","expm1");return Mt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),ms=ln({floor_:function(t){var e=Je(t,"x","floor");return Mt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),gs=ln({log_:function(t){var e=Je(t,"x","log");return Mt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat())}}}))}}),vs=ln({log1p_:function(t){var e=Je(t,"x","log1p");return Mt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),ys=ln({logSigmoid_:function(t){var e=Je(t,"x","logSigmoid");return Mt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),bs=ln({neg_:function(t){var e=Je(t,"x","neg");return Mt.runKernelFunc((function(t){return t.neg(e)}),{$x:e},(function(t){return{$x:function(){return t.neg()}}}))}}),xs=ln({reciprocal_:function(t){var e=Je(t,"x","reciprocal");return Mt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),ws=ln({round_:function(t){var e=Je(t,"x","round");return Mt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),Cs=ln({rsqrt_:function(t){var e=Je(t,"x","rsqrt");return Mt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}))}}),Ns=ln({sigmoid_:function(t){var e=Je(t,"x","sigmoid");return Mt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(gn(1).sub(n)))}}}),"Sigmoid")}}),Ss=ln({sign_:function(t){var e=Je(t,"x","sign");return Mt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),Es=ln({isNaN_:function(t){var e=Je(t,"x","isNaN");return Mt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),Os=ln({isInf_:function(t){var e=Je(t,"x","isInf");return Mt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),Is=ln({isFinite_:function(t){var e=Je(t,"x","isFinite");return Mt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return kn(t)}}}))}}),ks=ln({sin_:function(t){var e=Je(t,"x","sin");return Mt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cos().mul(t)}}}))}}),As=ln({sinh_:function(t){var e=Je(t,"x","sinh");return Mt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),Rs=ln({softplus_:function(t){var e=Je(t,"x","softplus");return Mt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),Ts=ln({sqrt_:function(t){var e=Je(t,"x","sqrt");return Mt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),Ds=ln({step_:function(t,e){void 0===e&&(e=0);var n=Je(t,"x","step");return Mt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return kn(t)}}}))}}),_s=ln({tan_:function(t){var e=Je(t,"x","tan");return Mt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),Fs=ln({tanh_:function(t){var e=Je(t,"x","tanh");return Mt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return gn(1).sub(n.square()).mulStrict(t)}}}))}});function Ms(t,e,n,r,i,a){var o,s,u=Je(t,"x","batchNorm"),c=Je(e,"mean","batchNorm"),l=Je(n,"variance","batchNorm");return null!=i&&(o=Je(i,"scale","batchNorm")),null!=r&&(s=Je(r,"offset","batchNorm")),C(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),C(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),C(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=o&&C(2===o.rank||1===o.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+o.rank+"."})),null!=s&&C(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),Bs(u,c,l,s,o,a)}function zs(t,e,n,r,i,a){var o,s,u=Je(t,"x","batchNorm"),c=Je(e,"mean","batchNorm"),l=Je(n,"variance","batchNorm");return null!=i&&(o=Je(i,"scale","batchNorm")),null!=r&&(s=Je(r,"offset","batchNorm")),C(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),C(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),C(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=o&&C(3===o.rank||1===o.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+o.rank+"."})),null!=s&&C(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),Bs(u,c,l,s,o,a)}function Ls(t,e,n,r,i,a){var o,s,u=Je(t,"x","batchNorm"),c=Je(e,"mean","batchNorm"),l=Je(n,"variance","batchNorm");return null!=i&&(o=Je(i,"scale","batchNorm")),null!=r&&(s=Je(r,"offset","batchNorm")),C(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),C(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),C(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=o&&C(4===o.rank||1===o.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+o.rank+"."})),null!=s&&C(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),Bs(u,c,l,s,o,a)}function Bs(t,e,n,r,i,a){null==a&&(a=.001);var o,s,u,c=Je(t,"x","batchNorm"),l=Je(e,"mean","batchNorm"),p=Je(n,"variance","batchNorm");null!=i&&(o=Je(i,"scale","batchNorm")),null!=r&&(s=Je(r,"offset","batchNorm")),C(l.rank===p.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),C(null==s||l.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),C(null==o||l.rank===o.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c;var h=[c,l,p,o];return Mt.runKernelFunc((function(t,e){var n=t.batchNormalization(u,Ps(l),Ps(p),a,Ps(o),Ps(s));return e([c,l,p,o]),n}),{x:c,mean:l,variance:p,scale:o,offset:s},(function(t,e){var n=e,r=n[0],i=n[1],o=n[2],s=n[3],c=null==s?gn(1):s,l=Gr(i.shape,u.shape),p=[];if(1===i.rank){for(var h=0;h<u.shape.length-1;++h)p.push(u.shape[h]);p.push(1)}var f=r.sub(i),d=t.mul(c),m=Cs(o.add(gn(a))),g=m.mul(m).mul(m).mul(gn(-.5));return{x:function(){return 1===i.rank?t.mul(vr(m.as4D(1,1,1,i.shape[0]),p)).mul(c).reshape(r.shape):t.mul(m).mul(c).reshape(r.shape)},mean:function(){var t=m.mul(gn(-1)).mul(d);return 1===i.rank&&(t=t.sum(l)),t.reshape(i.shape)},variance:function(){var t=g.mul(f).mul(d);return 1===i.rank&&(t=t.sum(l)),t.reshape(i.shape)},scale:function(){var e=f.mul(m),n=t.mul(e);return 1===i.rank&&(n=n.sum(l)),n.reshape(i.shape)},offset:function(){var e=t;return 1===i.rank&&(e=e.sum(l)),e.reshape(i.shape)}}}),"BatchNormalization",{varianceEpsilon:a},h).reshape(c.shape)}function Ps(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function js(){We("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var Vs=ln({batchNormalization2d_:function(t,e,n,r,i,a){return void 0===r&&(r=.001),js(),Ms(t,e,n,a,i,r)}}),Ws=ln({batchNormalization3d_:function(t,e,n,r,i,a){return void 0===r&&(r=.001),js(),zs(t,e,n,a,i,r)}}),Us=ln({batchNormalization4d_:function(t,e,n,r,i,a){return void 0===r&&(r=.001),js(),Ls(t,e,n,a,i,r)}}),Gs=ln({batchNormalization_:function(t,e,n,r,i,a){return void 0===r&&(r=.001),js(),Bs(t,e,n,a,i,r)}}),qs=ln({batchNorm_:Bs}),Hs=ln({batchNorm2d_:Ms}),Ks=ln({batchNorm3d_:zs}),Xs=ln({batchNorm4d_:Ls}),Ys=ln({logicalAnd_:function(t,e){var n=Je(t,"a","logicalAnd","bool"),r=Je(e,"b","logicalAnd","bool");return qr(n.shape,r.shape),Mt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{$a:n,$b:r})}}),$s=ln({logicalNot_:function(t){var e=Je(t,"x","logicalNot","bool");return Mt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),Js=ln({logicalOr_:function(t,e){var n=Je(t,"a","logicalOr","bool"),r=Je(e,"b","logicalOr","bool");return qr(n.shape,r.shape),Mt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),Zs=ln({logicalXor_:function(t,e){var n=Je(t,"a","logicalXor","bool"),r=Je(e,"b","logicalXor","bool");return qr(n.shape,r.shape),Js(t,e).logicalAnd(Ys(t,e).logicalNot())}}),Qs=ln({where_:function(t,e,n){var r=Je(e,"a","where"),i=Je(n,"b","where"),a=Je(t,"condition","where","bool");return N(r.shape,i.shape,"Error in where: "),1===a.rank?C(a.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):N(a.shape,i.shape,"Error in where: "),Mt.runKernelFunc((function(t,e){var n=t.select(a,r,i);return e([a]),n}),{$condition:a,$a:r,$b:i},(function(t,e){var n=e[0];return{$condition:function(){return kn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),tu=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(i){switch(i.label){case 0:return[4,(e=Je(t,"condition","whereAsync","bool")).data()];case 1:return n=i.sent(),r=gi(e.shape,n),t!==e&&e.dispose(),[2,r]}}))}))},eu=ln({add_:function(t,e){var n,r=Je(t,"a","add"),i=Je(e,"b","add");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t){return t.add(r,i)}),{a:r,b:i},(function(t){return{a:function(){var e=t,n=Gr(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Gr(i.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(i.shape)}}}),"Add")}}),nu=ln({addN_:function(t){C(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),C(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return Je(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!I(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Mt.runKernelFunc((function(t){return t.addN(e)}),r,(function(t){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}),"AddN")}}),ru=ln({addStrict_:function(t,e){var n=Je(t,"a","addStrict"),r=Je(e,"b","addStrict");return N(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),iu=ln({atan2_:function(t,e){var n,r=Je(t,"a","atan2"),i=Je(e,"b","atan2");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t,e){var n=t.atan2(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=eu(n.square(),r.square()),i=t.mul(r.div(e)),o=Gr(n.shape,a);return o.length>0&&(i=i.sum(o)),i.reshape(n.shape)},$b:function(){var e=eu(n.square(),r.square()),i=bs(t.mul(n.div(e))),o=Gr(r.shape,a);return o.length>0&&(i=i.sum(o)),i.reshape(r.shape)}}}))}}),au=ln({div_:function(t,e){var n,r=Je(t,"a","div"),i=Je(e,"b","div");if(n=kt(r,i),r=n[0],i=n[1],"int32"===r.dtype&&"int32"===i.dtype)return uu(r,i);var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t,e){var n=t.realDivide(r,i);return e([r,i]),n}),{a:r,b:i},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),i=Gr(n.shape,a);return i.length>0?e.sum(i).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),i=Gr(r.shape,a);i.length>0&&(e=e.sum(i).reshape(r.shape));var o=r.square();return e.div(o.toFloat()).neg()}}}),"Div")}}),ou=ln({divNoNan_:function(t,e){var n,r=Je(t,"a","div"),i=Je(e,"b","div");r=(n=kt(r,i))[0],i=n[1];var a=au(r,i),o=kn(a),s=i.equal(o);return Qs(s,o,a)}}),su=ln({divStrict_:function(t,e){var n=Je(t,"a","div"),r=Je(e,"b","div");return N(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),uu=ln({floorDiv_:function(t,e){var n,r=Je(t,"a","floorDiv"),i=Je(e,"b","floorDiv");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t,e){var n=t.floorDiv(r,i);return e([r,i]),n}),{a:r,b:i},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),i=Gr(n.shape,a);return i.length>0?e.sum(i).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),i=Gr(r.shape,a);i.length>0&&(e=e.sum(i).reshape(r.shape));var o=r.square();return e.div(o.toFloat()).neg()}}}),"FloorDiv")}}),cu=ln({maximum_:function(t,e){var n,r=Je(t,"a","maximum"),i=Je(e,"b","maximum");return n=kt(r,i),r=n[0],i=n[1],"bool"===r.dtype&&(r=r.toInt(),i=i.toInt()),qr(r.shape,i.shape),Mt.runKernelFunc((function(t,e){var n=t.maximum(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.greaterEqual(r).toFloat())},$b:function(){return t.mul(n.less(r).toFloat())}}}))}}),lu=ln({maximumStrict_:function(t,e){var n=Je(t,"a","maximumStrict"),r=Je(e,"b","maximumStrict");return N(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),pu=ln({minimum_:function(t,e){var n,r=Je(t,"a","minimum"),i=Je(e,"b","minimum");return n=kt(r,i),r=n[0],i=n[1],"bool"===r.dtype&&(r=r.toInt(),i=i.toInt()),qr(r.shape,i.shape),Mt.runKernelFunc((function(t,e){var n=t.minimum(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.lessEqual(r).toFloat())},$b:function(){return t.mul(n.greater(r).toFloat())}}}))}}),hu=ln({minimumStrict_:function(t,e){var n=Je(t,"a","minimumStrict"),r=Je(e,"b","minimumStrict");return N(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),fu=ln({mod_:function(t,e){var n,r=Je(t,"a","mod"),i=Je(e,"b","mod");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t,e){var n=t.mod(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Gr(n.shape,a);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),i=Gr(r.shape,a);return i.length>0?e.sum(i).reshape(r.shape):e}}}))}}),du=ln({modStrict_:function(t,e){var n=Je(t,"a","modStrict"),r=Je(e,"b","modStrict");return N(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),mu=ln({mul_:function(t,e){var n,r=Je(t,"a","mul"),i=Je(e,"b","mul");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t,e){var n=t.multiply(r,i);return e([r,i]),n}),{a:r,b:i},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),i=Gr(n.shape,a);return i.length>0?e.sum(i).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),i=Gr(r.shape,a);return i.length>0?e.sum(i).reshape(r.shape):e}}}),"Mul")}}),gu=ln({mulStrict_:function(t,e){var n=Je(t,"a","mul"),r=Je(e,"b","mul");return N(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),vu=ln({pow_:function(t,e){var n=Je(t,"base","pow"),r=Je(e,"exp","pow"),i=qr(n.shape,r.shape);return t=n.cast(Ot(n.dtype,r.dtype)),e=r.cast(Ot(n.dtype,r.dtype)),Mt.runKernelFunc((function(t,e){var i=t.pow(n,r);return e([n,r,i]),i}),{$base:n,$exp:r},(function(t,e){var n=e[0],r=e[1],a=e[2];return{$base:function(){var e=r.toFloat(),a=t.mul(e.mul(n.pow(e.sub(gn(1))))),o=Gr(n.shape,i);return o.length>0&&(a=a.sum(o)),a.reshape(n.shape)},$exp:function(){var e=n.greater(0),o=n.log().where(e,kn(n)),s=t.mul(a.mul(o)),u=Gr(r.shape,i);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}))}}),yu=ln({powStrict_:function(t,e){return N(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),bu=ln({squaredDifference_:function(t,e){var n,r=Je(t,"a","squaredDifference"),i=Je(e,"b","squaredDifference");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1],i=gn(2);return{$a:function(){return t.mul(n.sub(r).mul(i))},$b:function(){return t.mul(r.sub(n).mul(i))}}}))}}),xu=ln({squaredDifferenceStrict_:function(t,e){var n=Je(t,"a","squaredDifferenceStrict"),r=Je(e,"b","squaredDifferenceStrict");return N(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),wu=ln({sub_:function(t,e){var n,r=Je(t,"a","sub"),i=Je(e,"b","sub");n=kt(r,i),r=n[0],i=n[1];var a=qr(r.shape,i.shape);return Mt.runKernelFunc((function(t){return t.subtract(r,i)}),{a:r,b:i},(function(t){return{a:function(){var e=t,n=Gr(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Gr(i.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(i.shape)}}}),"Sub")}}),Cu=ln({subStrict_:function(t,e){var n=Je(t,"a","subStrict"),r=Je(e,"b","subStrict");return N(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),Nu=ln({equal_:function(t,e){var n,r=Je(t,"a","equal"),i=Je(e,"b","equal");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t){return t.equal(r,i)}),{$a:r,$b:i})}}),Su=ln({equalStrict_:function(t,e){var n=Je(t,"a","equalStrict"),r=Je(e,"b","equalStrict");return N(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Eu=ln({greater_:function(t,e){var n,r=Je(t,"a","greater"),i=Je(e,"b","greater");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t){return t.greater(r,i)}),{$a:r,$b:i})}}),Ou=ln({greaterEqual_:function(t,e){var n,r=Je(t,"a","greaterEqual"),i=Je(e,"b","greaterEqual");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,i);return e([r,i]),n}),{$a:r,$b:i},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return kn(n)},$b:function(){return kn(r)}}}))}}),Iu=ln({greaterEqualStrict_:function(t,e){var n=Je(t,"a","greaterEqualStrict"),r=Je(e,"b","greaterEqualStrict");return N(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),ku=ln({greaterStrict_:function(t,e){var n=Je(t,"a","greaterStrict"),r=Je(e,"b","greaterStrict");return N(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Au=ln({less_:function(t,e){var n,r=Je(t,"a","less"),i=Je(e,"b","less");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t){return t.less(r,i)}),{$a:r,$b:i})}}),Ru=ln({lessEqual_:function(t,e){var n,r=Je(t,"a","lessEqual"),i=Je(e,"b","lessEqual");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t){return t.lessEqual(r,i)}),{$a:r,$b:i})}}),Tu=ln({lessEqualStrict_:function(t,e){var n=Je(t,"a","lessEqualStrict"),r=Je(e,"b","lessEqualStrict");return N(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),Du=ln({lessStrict_:function(t,e){var n=Je(t,"a","lessStrict"),r=Je(e,"b","lessStrict");return N(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),_u=ln({notEqual_:function(t,e){var n,r=Je(t,"a","notEqual"),i=Je(e,"b","notEqual");return n=kt(r,i),r=n[0],i=n[1],qr(r.shape,i.shape),Mt.runKernelFunc((function(t){return t.notEqual(r,i)}),{$a:r,$b:i})}}),Fu=ln({notEqualStrict_:function(t,e){var n=Je(t,"a","notEqualStrict"),r=Je(e,"b","notEqualStrict");return N(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function Mu(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function zu(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var Lu=ln({gather_:function(t,e,n){void 0===n&&(n=0);var r=Je(t,"x","gather"),i=Je(e,"indices","gather","int32");n=F(n,r.shape)[0];var a=function(t,e,n){for(var r=t.shape[n],i=[],a=1,o=1,s=0;s<n;s++)i.push(t.shape[s]),a*=t.shape[s];for(s=0;s<e.rank;s++)i.push(e.shape[s]);for(s=n+1;s<t.rank;s++)i.push(t.shape[s]),o*=t.shape[s];return{batchSize:a,sliceSize:o,dimSize:r,outputShape:i}}(r,i,n);return Mt.runKernelFunc((function(t,e){var a=t.gather(r,i.flatten(),n);return e([i]),a}),{$x:r},(function(t,e){var i=e[0];return{$x:function(){var e=r.shape,a=i.size,o=e.slice(0,n),s=o.length,u=e.slice(n,e.length).slice(1),c=u.length,l=Mu(0,s),p=Mu(s+1,s+1+c),h=zu([o,[a],u]),f=t.reshape(h),d=i.reshape([a]),m=zu([[s],l,p]),g=f.transpose(m),v=Bu(g,d,r.shape[n]),y=on(m);return v.transpose(y)}}})).reshape(a.outputShape)}}),Bu=ln({unsortedSegmentSum_:function(t,e,n){var r=Je(t,"x","unsortedSegmentSum"),i=Je(e,"segmentIds","unsortedSegmentSum","int32");return C(k(n),(function(){return"numSegments must be of dtype int"})),Mt.runKernelFunc((function(t,e){var a=t.unsortedSegmentSum(r,i,n);return e([i]),a}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=cu(e,kn(e)),r=Lu(t,n),i=Ou(e,gn(0,"int32")),a=r.rank-i.rank,o=0;o<a;++o)i=tr(i,o+1);i=Ys(i,Cn(r.shape,"bool"));var s=kn(r);return Qs(i,r,s)}(t,n)}}}))}});function Pu(t,e,n,r,i,a,o){void 0===a&&(a="NHWC"),C(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),C(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),C(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),C(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===a?s[3]:s[1],p="NHWC"===a?u.shape[3]:u.shape[1];C(l===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),C(p===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+p+") must match output depth for filter "+n.shape[3]+"."})),null!=o&&C(k(i),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+i+"."}));var h=ri(a),f=Xr(s,n.shape,r,1,i,o,!1,h),d=Mt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,f);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return Uu(t,n,r,i,a,1,o)},filter:function(){return qu(t,s,n.shape,r,i,a,o)}}}));return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}function ju(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],i=e[2];return 1===n&&1===r&&1===i}function Vu(t,e,n,r,i){C(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var a=t,o=e,s=!1;4===e.rank&&(s=!0,o=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=o.shape[4];C(5===a.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."})),C(5===o.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank})),C(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),C(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),C(c===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=Yr(a,n.shape,r,1,i),p=Mt.runKernelFunc((function(t){return t.conv3dDerInput(o,n,l)}),{dy5D:o});return s?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}var Wu=ln({conv1d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NWC"),void 0===a&&(a=1);var s=Je(t,"x","conv1d"),u=Je(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),C(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),C(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=o&&C(k(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."})),C(c.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),C(ni(n,a),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+a+"'"})),C("NWC"===i,(function(){return"Error in conv1d: got dataFormat of "+i+" but only NWC is currently supported."}));var p=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),h=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),f=Uu(h,p,[1,n],r,"NHWC",[1,a],o);return l?f.as2D(f.shape[2],f.shape[3]):f.as3D(f.shape[0],f.shape[2],f.shape[3])}}),Uu=ln({conv2d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NHWC"),void 0===a&&(a=[1,1]);var s=Je(t,"x","conv2d"),u=Je(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),C(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=o&&C(k(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var p="NHWC"===i?c.shape[3]:c.shape[1];C(p===u.shape[2],(function(){return"Error in conv2d: depth of input ("+p+") must match input depth for filter "+u.shape[2]+"."})),C(ni(n,a),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"}));var h=ri(i),f=Xr(c.shape,u.shape,n,a,r,o,!1,h),d=[u,c],m=Mt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,f);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var o=e,s=o[0],u=o[1];return C(ei(a),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+a+"'"})),{x:function(){return Hu(u.shape,t,s,n,r,i)},filter:function(){return qu(u,t,s.shape,n,r,i)}}}),"Conv2D",f,d);return l?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Gu=ln({conv3d_:function(t,e,n,r,i,a){void 0===i&&(i="NDHWC"),void 0===a&&(a=[1,1,1]);var o=Je(t,"x","conv3d"),s=Je(e,"filter","conv3d"),u=o,c=!1;4===o.rank&&(c=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),C(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),C(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),C(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),C(function(t,e){return ju(t)||ju(e)}(n,a),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),C("NDHWC"===i,(function(){return"Error in conv3d: got dataFormat of "+i+" but only NDHWC is currently supported."}));var l=Yr(u.shape,s.shape,n,a,r),p=Mt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){C(ju(a),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+a+"'"}));var i=e[0],o=e[1];return{x:function(){return Vu(i.shape,t,o,n,r)},$filter:function(){return function(t,e,n,r,i){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var o=e;4===o.rank&&(o=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),C(5===a.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."})),C(5===o.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+o.shape+"."})),C(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),C(a.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+a.shape[4]+") must match input depth in filter ("+n[3]+"."})),C(o.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+o.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=Yr(a.shape,n,r,1,i);return Mt.runKernelFunc((function(t){return t.conv3dDerFilter(a,o,s)}),{x5D:a,dy5D:o})}(i,t,o.shape,n,r)}}}));return c?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}}),qu=ln({conv2dDerFilter_:function(t,e,n,r,i,a,o){void 0===a&&(a="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),C(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),C(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),C(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===a?s.shape[3]:s.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];C(c===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),C(l===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=o&&C(k(i),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+i+"."}));var p=ri(a),h=Xr(s.shape,n,r,1,i,o,!1,p);return Mt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,h)}),{x4D:s,dy4D:u})}}),Hu=ln({conv2dDerInput_:Pu}),Ku=ln({depthwiseConv2d_:function(t,e,n,r,i,a,o){void 0===i&&(i="NHWC"),void 0===a&&(a=[1,1]);var s=Je(t,"x","depthwiseConv2d"),u=Je(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),C(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),C(c.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==a&&(a=[1,1]),C(ni(n,a),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&C(k(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var p=Xr(c.shape,u.shape,n,a,r,o,!0),h=[c,u],f=Mt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,p);return e([c,u]),n}),{x:c,filter:u},(function(t,e){C(ei(a),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+a+"'"}));var n=e[0],r=e[1];return{x:function(){return Xu(n.shape,t,r,p)},filter:function(){return Yu(n,t,r.shape,p)}}}),"DepthwiseConv2dNative",p,h);return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}}),Xu=ln({depthwiseConv2dDerInput_:function(t,e,n,r){var i=e,a=!1;3===e.rank&&(a=!0,i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var o=Mt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(i,n,r)}),{dy4D:i});return a?o.as3D(o.shape[1],o.shape[2],o.shape[3]):o}}),Yu=ln({depthwiseConv2dDerFilter_:function(t,e,n,r){var i=t;3===t.rank&&(i=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Mt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(i,a,r)}),{x4D:i,dy4D:a})}}),$u=ln({separableConv2d_:function(t,e,n,r,i,a,o){void 0===a&&(a=[1,1]),void 0===o&&(o="NHWC");var s=Je(t,"x","separableConv2d"),u=Je(e,"depthwiseFilter","separableConv2d"),c=Je(n,"pointwiseFilter","separableConv2d"),l=s,p=!1;if(3===s.rank&&(p=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),C(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),C(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),C(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),C(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var h=u.shape[2],f=u.shape[3];C(c.shape[2]===h*f,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+h*f+", but got "+c.shape[2]+"."}));var d=Ku(l,u,r,i,o,a),m=Uu(d,c,1,"valid",o);return p?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Ju=ln({conv2dTranspose_:function(t,e,n,r,i,a){return Pu(n,Je(t,"x","conv2dTranspose"),Je(e,"filter","conv2dTranspose"),r,i,"NHWC",a)}}),Zu=ln({conv3dTranspose_:function(t,e,n,r,i){return Vu(n,Je(t,"x","conv3dTranspose"),Je(e,"filter","conv3dTranspose"),r,i)}}),Qu=ln({matMul_:function(t,e,n,r){var i;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=Je(t,"a","matMul"),o=Je(e,"b","matMul");i=kt(a,o),a=i[0],o=i[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?o.shape[o.rank-1]:o.shape[o.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?o.shape[o.rank-2]:o.shape[o.rank-1],p=a.shape.slice(0,-2),h=o.shape.slice(0,-2),f=O(p),d=O(h);C(a.rank>=2&&o.rank>=2&&a.rank===o.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+a.rank+" and "+o.rank+"."})),C(I(p,h),(function(){return"Error in matMul: outer dimensions ("+p+") and ("+h+") of Tensors with shapes "+a.shape+" and "+o.shape+" must match."})),C(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+a.shape+" and "+o.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var m=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(f,s,c):a.as3D(f,c,s),v=r?o.as3D(d,l,u):o.as3D(d,u,l),y={transposeA:n,transposeB:r};return Mt.runKernelFunc((function(t,e){var i=t.batchMatMul(g,v,n,r);return e([g,v]),i}),{a:g,b:v},(function(t,e){var i=e,a=i[0],o=i[1];return n||r?!n&&r?{a:function(){return t.matMul(o,!1,!1)},b:function(){return t.matMul(a,!0,!1)}}:n&&!r?{a:function(){return o.matMul(t,!1,!0)},b:function(){return a.matMul(t,!1,!1)}}:{a:function(){return o.matMul(t,!0,!0)},b:function(){return t.matMul(a,!0,!0)}}:{a:function(){return t.matMul(o,!1,!0)},b:function(){return a.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(m)}}),tc=ln({dot_:function(t,e){var n=Je(t,"t1","dot"),r=Je(e,"t2","dot");C(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var i=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return C(i===a,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+i+" and "+a+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),ec=ln({outerProduct_:function(t,e){var n=Je(t,"v1","outerProduct"),r=Je(e,"v2","outerProduct");return C(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),nc=ln({reverse_:function(t,e){var n=Je(t,"x","reverse");if(0===n.rank)return n.clone();var r=F(e,n.shape);return Mt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),rc=ln({reverse1d_:function(t){var e=Je(t,"x","reverse");return C(1===e.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),nc(e,0)}}),ic=ln({reverse2d_:function(t,e){var n=Je(t,"x","reverse");return C(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),nc(n,e)}}),ac=ln({reverse3d_:function(t,e){var n=Je(t,"x","reverse");return C(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),nc(n,e)}}),oc=ln({reverse4d_:function(t,e){var n=Je(t,"x","reverse");return C(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),nc(n,e)}});function sc(t,e,n,r,i,a){var o=Je(t,"x","maxPool"),s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),null==r&&(r=[1,1]),C(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),C(ni(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=a&&C(k(i),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var c=Hr(s.shape,e,n,r,i,a);if(1===c.filterWidth&&1===c.filterHeight&&I(c.inShape,c.outShape))return o.clone();var l=[s],p=Mt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,a){var o=a[0],s=a[1];return{x:function(){return function(t,e,n,r,i,a,o,s){var u=Je(t,"dy","maxPoolBackprop"),c=Je(e,"input","maxPoolBackprop"),l=Je(n,"output","maxPoolBackprop");C(c.rank===u.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==a&&(a=[1,1]),C(ni(i,a),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+a+"'"})),C(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),C(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var p=Hr(c.shape,r,i,a,o,s);return Mt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,p)}),{$dy:u,$input:c})}(t,o,s,e,n,r,i)}}}),"MaxPool",c,l);return u?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function uc(t,e,n,r,i,a){var o=Je(t,"x","avgPool","float32");null==r&&(r=[1,1]),C(ni(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),C(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=a&&C(k(i),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var c=Hr(s.shape,e,n,r,i,a);if(1===c.filterWidth&&1===c.filterHeight&&I(c.inShape,c.outShape))return o.clone();var l=Mt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,i,a){var o=Je(t,"dy","avgPoolBackprop"),s=Je(e,"input","avgPoolBackprop");C(s.rank===o.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+o.rank+")"})),null==i&&(i=[1,1]),C(ni(r,i),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+i+"'"}));var u=s,c=o,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),C(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),C(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var p=Hr(u.shape,n,r,i,a),h=Mt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,p)}),{dy4D:c,input4D:u});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}(t,s,e,n,r,i)}}}),"AvgPool",c);return l=l.cast(o.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var cc=ln({maxPool_:function(t,e,n,r,i){return sc(t,e,n,1,r,i)}}),lc=ln({avgPool_:function(t,e,n,r,i){return uc(t,e,n,1,r,i)}}),pc=ln({pool_:function(t,e,n,r,i,a){null==i&&(i=[1,1]),null==a&&(a=1),0===r&&(r="valid");var o=Je(t,"x","maxPool"),s=o,u=!1;3===o.rank&&(u=!0,s=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),C(ni(a,i),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+a+" and dilations '"+i+"'"}));var c,l=Hr(s.shape,e,a,i,r),p=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),i=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],i[e]]}))}([l.filterHeight,l.filterWidth],p):[[0,0],[0,0]];var h=1===p[0]&&1===p[1],f=function(t,e,n){var r=n.map((function(t){return t[0]})),i=n.map((function(t){return t[1]})),a=t.concat(r,i),o=e.map((function(t,e){return(t-a[e]%t)%t})),s=i.map((function(t,e){return t+o[e]}));return[e.map((function(t,e){return[r[e],s[e]]})),e.map((function(t,e){return[0,o[e]]}))]}([l.inHeight,l.inWidth],p,c),d=f[0],m=f[1],g=h?r:"valid",v=h?s:dr(s,p,d),y=("avg"===n?function(){return uc(v,e,a,1,g)}:function(){return sc(v,e,a,1,g)})(),b=h?y:Xn(y,p,m);return u?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}}),hc=ln({maxPool3d_:function(t,e,n,r,i,a,o){void 0===a&&(a="NDHWC");var s=Je(t,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==o&&(o=[1,1,1]),C(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),C("NDHWC"===a,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),C(ni(n,o),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+o+"'"})),null!=i&&C(k(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var l=Kr(u.shape,e,n,o,r,i,a),p=Mt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,a){var s=a[0],u=a[1];return{x:function(){return function(t,e,n,r,i,a,o,s){var u=Je(t,"dy","maxPool3dBackprop"),c=Je(e,"input","maxPool3dBackprop"),l=Je(n,"output","maxPool3dBackprop"),p=u,h=c,f=l,d=!1;4===c.rank&&(d=!0,p=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),h=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),f=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),C(5===p.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+p.rank+"."})),C(5===h.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+h.rank+"."})),C(5===f.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+f.rank+"."})),null==a&&(a=[1,1,1]),C(ni(i,a),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+a+"'"})),null!=s&&C(k(o),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+o+"."}));var m=Kr(h.shape,r,i,a,o,s),g=Mt.runKernelFunc((function(t){return t.maxPool3dBackprop(p,h,f,m)}),{dy5D:p,input5D:h});return d?g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]):g}(t,s,u,e,n,o,r,i)}}}));return c?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}}),fc=ln({avgPool3d_:function(t,e,n,r,i,a,o){void 0===a&&(a="NDHWC");var s=Je(t,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==o&&(o=[1,1,1]),C(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),C("NDHWC"===a,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),C(ni(n,o),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+o+"'"})),null!=i&&C(k(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var l=Kr(u.shape,e,n,o,r,i,a),p=Mt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,i,a,o){var s=Je(t,"dy","avgPool3dBackprop"),u=Je(e,"input","avgPool3dBackprop"),c=s,l=u,p=!1;4===u.rank&&(p=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),C(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),C(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==i&&(i=[1,1,1]),C(ni(r,i),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+i+"'"})),null!=o&&C(k(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+a+"."}));var h=Kr(l.shape,n,r,i,a,o),f=Mt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,h)}),{dy5D:c,input5D:l});return p?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}(t,u,e,n,o,r,i)}}}));return p=p.cast(u.dtype),c?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}}),dc=ln({slice_:function(t,e,n){var r,i,a=Je(t,"x","slice");if(0===a.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice()).forEach((function(t){C(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),i=(i=null==n?new Array(a.rank).fill(-1):"number"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(C(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),a.shape[e]-r[e])})),Rr(a,r,i);var o=a.shape,s={begin:r,size:i};return Mt.runKernelFunc((function(t){return t.slice(a,r,i)}),{x:a},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],o[n]-r[n]-i[n]]);return{x:function(){return t.pad(e)}}}),"Slice",s)}}),mc=ln({slice1d_:function(t,e,n){var r=Je(t,"x","slice1d");return C(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),dc(r,[e],[n])}}),gc=ln({slice2d_:function(t,e,n){var r=Je(t,"x","slice2d");return C(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),dc(r,e,n)}}),vc=ln({slice3d_:function(t,e,n){var r=Je(t,"x","slice3d");return C(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),dc(r,e,n)}}),yc=ln({slice4d_:function(t,e,n){var r=Je(t,"x","slice4d");return C(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),dc(r,e,n)}});function bc(t,e,n,r,i){return e.rank<n.rank&&(e=e.reshape(nn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(nn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==i?r:r.transpose(i)}}}var xc=ln({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","all","bool"),i=F(e,r.shape),a=i,o=an(a,r.rank);null!=o&&(r=r.transpose(o),a=sn(a.length,r.rank));var s=Mt.runKernelFunc((function(t){return t.all(r,a)}),{$x:r});if(n){var u=nn(s.shape,i);return s.reshape(u)}return s}}),wc=ln({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","any","bool"),i=F(e,r.shape),a=i,o=an(a,r.rank);null!=o&&(r=r.transpose(o),a=sn(a.length,r.rank));var s=Mt.runKernelFunc((function(t){return t.any(r,a)}),{$x:r});if(n){var u=nn(s.shape,i);return s.reshape(u)}return s}}),Cc=ln({argMax_:function(t,e){void 0===e&&(e=0);var n=Je(t,"x","argMax");null==e&&(e=0);var r=F(e,n.shape),i=an(r,n.rank);null!=i&&(n=n.transpose(i),r=sn(r.length,n.rank));var a={axis:r[0]},o=[n];return Mt.runKernelFunc((function(t,e){var i=t.argMax(n,r[0]);return e([n]),i}),{x:n},(function(t,e){var n=e[0];return{x:function(){return kn(n)}}}),"ArgMax",a,o)}}),Nc=ln({argMin_:function(t,e){void 0===e&&(e=0);var n=Je(t,"x","argMin");null==e&&(e=0);var r=F(e,n.shape),i=an(r,n.rank);return null!=i&&(n=n.transpose(i),r=sn(r.length,n.rank)),Mt.runKernelFunc((function(t,e){var i=t.argMin(n,r[0]);return e([n]),i}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return kn(n)}}}))}}),Sc=ln({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","logSumExp"),i=F(e,r.shape),a=r.max(i,!0),o=r.sub(a).exp().sum(i).log(),s=a.reshape(o.shape).add(o);if(n){var u=nn(s.shape,i);return s.reshape(u)}return s}}),Ec=ln({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","max"),i=r,a=F(e,r.shape),o=a,s=an(o,r.rank);null!=s&&(r=r.transpose(s),o=sn(o.length,r.rank));var u=[r],c=Mt.runKernelFunc((function(t,e){var n=t.max(r,o);return e([i,n]),n}),{x:r},(function(t,e){return bc(t,e[1],e[0],a,s)}),"Max",{axes:o},u,[!0]);if(n){var l=nn(c.shape,a);c=c.reshape(l)}return c}}),Oc=ln({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","mean"),i=F(e,r.shape),a=O(en(r.shape,i)[1]);return Lr((function(t){var r=gn(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return i.forEach((function(t){n[t]=1})),e.reshape(n).mul(Cn(t.shape,"float32")).div(a)}}}))(r)}}),Ic=ln({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","min"),i=r,a=F(e,r.shape),o=a,s=an(o,r.rank);null!=s&&(r=r.transpose(s),o=sn(o.length,r.rank));var u=[r],c=Mt.runKernelFunc((function(t,e){var n=t.min(r,o);return e([i,n]),n}),{x:r},(function(t,e){return bc(t,e[1],e[0],a,s)}),"Min",{axes:o},u,[!0]);if(n){var l=nn(c.shape,a);c=c.reshape(l)}return c}}),kc=ln({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=F(e,(t=Je(t,"x","moments")).shape),i=t.mean(r,n),a=i.shape;n||(a=nn(i.shape,r));var o=t.toFloat().sub(i.reshape(a)).square();return{mean:i,variance:o.mean(r,n)}}}),Ac=ln({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var i=F(e,r.shape);return Lr((function(t){var e=an(i,t.rank),r=i,a=t;null!=e&&(a=t.transpose(e),r=sn(r.length,t.rank));var o=Mt.runKernelFunc((function(t){return t.sum(a,r)}),{permutedX:a});if(n){var s=nn(o.shape,i);o=o.reshape(s)}return{value:o,gradFunc:function(e){var n=t.shape.slice();return i.forEach((function(t){n[t]=1})),e.reshape(n).mul(Cn(t.shape,"float32"))}}}))(r)}}),Rc=ln({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=Je(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var i=F(e,r.shape),a=an(i,r.rank),o=i,s=r;null!=a&&(s=r.transpose(a),o=sn(o.length,r.rank));var u=Mt.runKernelFunc((function(t){return t.prod(s,o)}),{permutedX:s});if(n){var c=nn(u.shape,i);u=u.reshape(c)}return u}}),Tc=ln({elu_:function(t){var e=Je(t,"x","elu");return Mt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Mt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),Dc=ln({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=Je(t,"x","leakyRelu");return cu(gn(e).mul(n),n)}}),_c=ln({prelu_:function(t,e){var n=Je(t,"x","prelu"),r=Je(e,"alpha","prelu");return Mt.runKernelFunc((function(t,e){var i=t.prelu(n,r);return e([n,r]),i}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],i=n.greater(0);return{x:function(){return Qs(i,t,t.mul(r))},alpha:function(){var e=Qs(i,kn(t),t.mul(n)),a=Gr(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}}),"Prelu")}}),Fc=ln({relu_:function(t){var e=Je(t,"x","relu");return"bool"===e.dtype?e.toInt():Mt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.step().toFloat())}}}),"Relu")}}),Mc=ln({relu6_:function(t){var e=Je(t,"x","relu6");return"bool"===e.dtype?e.toInt():Mt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),"Relu6")}}),zc=ln({selu_:function(t){var e=Je(t,"x","selu");return Mt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(gn(0)),r=gn(Ao),i=gn(Ro),a=t.mul(i),o=t.mul(r).mul(n.toFloat().exp());return Qs(e,a,o)}}}))}}),Lc=ln({transpose_:function(t,e){var n=Je(t,"x","transpose");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),C(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){C(t>=0&&t<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}))})),n.rank<=1)return n.clone();var r={perm:e};return Mt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},(function(t){var n=on(e);return{x:function(){return t.transpose(n)}}}),"Transpose",r)}}),Bc=ln({localResponseNormalization_:function(t,e,n,r,i){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===i&&(i=.5);var a=Je(t,"x","localResponseNormalization");C(4===a.rank||3===a.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+a.rank+"."})),C(k(e),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var o=a,s=!1;3===a.rank&&(s=!0,o=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Mt.runKernelFunc((function(t,a){var s=t.localResponseNormalization4D(o,e,n,r,i);return a([o,s]),s}),{x4D:o},(function(t,a){var o=a[0],s=a[1];return{x4D:function(){return Mt.runKernelFunc((function(a){return a.LRNGrad(t,o,s,e,n,r,i)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Pc=ln({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var i=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(gn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Je(t,"x","norm"),e,n),a=i.shape;if(r){var o=F(n,t.shape);a=nn(i.shape,o)}return i.reshape(a)}}),jc=ln({basicLSTMCell_:function(t,e,n,r,i,a){var o=Je(t,"forgetBias","basicLSTMCell"),s=Je(e,"lstmKernel","basicLSTMCell"),u=Je(n,"lstmBias","basicLSTMCell"),c=Je(r,"data","basicLSTMCell"),l=Je(i,"c","basicLSTMCell"),p=Je(a,"h","basicLSTMCell"),h=c.concat(p,1).matMul(s).add(u),f=h.shape[0],d=h.shape[1]/4,m=[f,d],g=h.slice([0,0],m),v=h.slice([0,d],m),y=h.slice([0,2*d],m),b=h.slice([0,3*d],m),x=g.sigmoid().mulStrict(v.tanh()).addStrict(l.mulStrict(o.add(y).sigmoid())),w=x.tanh().mulStrict(b.sigmoid());return[x,w]}}),Vc=ln({multiRNNCell_:function(t,e,n,r){for(var i=Je(e,"data","multiRNNCell"),a=Ze(n,"c","multiRNNCell"),o=Ze(r,"h","multiRNNCell"),s=i,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],o[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var p=[],h=[];for(c=0;c<u.length;c+=2)p.push(u[c]),h.push(u[c+1]);return[p,h]}}),Wc=ln({movingAverage_:function(t,e,n,r,i){void 0===i&&(i=!0);var a=Je(t,"v","movingAverage"),o=Je(e,"x","movingAverage"),s=Je(n,"decay","movingAverage");At(a,o),C(I(a.shape,o.shape),(function(){return"Shape mismatch in v and x"}));var u=gn(1),c=u.sub(s),l=o.sub(a).mul(c);if(i){C(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var p=Je(r,"step","movingAverage");l=l.div(u.sub(vu(s,p)))}return a.add(l)}}),Uc=ln({stridedSlice_:function(t,e,n,r,i,a,o,s,u){if(void 0===i&&(i=0),void 0===a&&(a=0),void 0===o&&(o=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==o)throw new Error("ellipsis mask is not yet supported");var c=Je(t,"x","stridedSlice"),l=Tr(s),p=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,p.splice(t,0,1)})),c=c.reshape(p);for(var h=0;h<c.rank;h++)e[h]=_r(i,e,r,c.shape,h),n[h]=Fr(a,n,r,c.shape,h),r[h]=r[h]||1;var f=Tr(u);f.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var d=Dr(e,n,r),m=d.filter((function(t,e){return-1===f.indexOf(e)}));return r.every((function(t){return 1===t}))?dc(c,e,d).reshape(m):Mt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(m)}}),Gc=ln({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=Je(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var i=r.shape[r.shape.length-1];if(e>i)throw new Error("'k' passed to topk() must be <= the last dimension ("+i+") but got "+e);var a=Mt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:a[0],indices:a[1]}}}),qc=ln({scatterND_:function(t,e,n){var r=Je(t,"indices","scatterND","int32"),i=Je(e,"updates","scatterND");return function(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,i=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+i+".";if(n.rank<i)throw new Error(a+" update.rank < "+i+". ");if(t.length<r+(n.rank-i))throw new Error(a+" Output shape length < "+(r+(n.rank-i)));if(n.rank!==i+t.length-r)throw new Error(a+" update.rank != "+(i+t.length-r));for(var o=0;o<i;++o)if(n.shape[o]!==e.shape[o])throw new Error(a+" updates.shape["+o+"] ("+n.shape[o]+") != indices.shape["+o+"] ("+e.shape[o]+").");for(o=0;o<n.rank-i;++o)if(n.shape[o+i]!==t[o+r])throw new Error(a+" updates.shape["+(o+i)+"] ("+n.shape[o+i]+") != shape["+(o+i)+"] ("+t[o+i]+")")}(n,e,t)}(i,r,n),Mt.runKernelFunc((function(t){return t.scatterND(r,i,n)}),{$indices:r,$updates:i})}}),Hc=ln({fft_:function(t){C("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Mt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),Kc=ln({ifft_:function(t){C("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Mt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),Xc=ln({rfft_:function(t,e){C("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],i=t.size/r;if(null!=e&&e<r){var a=t.shape.map((function(t){return 0})),o=t.shape.map((function(t){return t}));o[t.shape.length-1]=e,n=t.slice(a,o),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Nn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=pn(n,u).as2D(i,r),l=Hc(c),p=Math.floor(r/2)+1,h=hn(l),f=fn(l),d=h.split([p,r-p],h.shape.length-1),m=f.split([p,r-p],f.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=p,pn(d[0],m[0]).reshape(g)}}),Yc=ln({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),i=Kc(r);return hn(i)}var a=[n,2*(e-1)],o=hn(t).as2D(n,e),s=fn(t).as2D(n,e),u=o.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(gn(-1)),l=o.concat(u,1),p=s.concat(c,1);return r=pn(l,p).as2D(a[0],a[1]),i=Kc(r),hn(i)}}),$c=Object.freeze({fft:Hc,ifft:Kc,rfft:Xc,irfft:Yc}),Jc=ln({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var i=Je(t,"sparseIndices","sparseToDense","int32"),a=Je(e,"sparseValues","sparseToDense"),o=Je(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var i=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+a+".");var o=e.size;if(0!==e.rank&&(1!==e.rank||o!==i))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+i+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,a,n,o),Mt.runKernelFunc((function(t){return t.sparseToDense(i,a,n,o)}),{$sparseIndices:i,$sparseValues:a,$defaultValue:o})}}),Zc=ln({gatherND_:function(t,e){var n=Je(e,"indices","gatherND","int32"),r=Je(t,"x","gatherND");return Mt.runKernelFunc((function(t){return t.gatherND(r,n)}),{$x:r,$indices:n})}}),Qc=ln({diag_:function(t){var e=Je(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Mt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}}),tl=ln({dropout_:function(t,e,n,r){var i=Je(t,"x","dropout");if(C("float32"===i.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+i.dtype+" tensor instead."})),C(e>=0&&e<1,(function(){return"rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof yt?i.clone():i;var a=function(t,e){if(null==e)return t.shape.slice();if(I(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(i,n),o=1-e,s=hr(a,0,1,"float32",r).add(o).floor().div(o);return i.mul(s)}});function el(t,e,n){for(var r=1-t%2,i=new Float32Array(t),a=0;a<t;++a){var o=2*Math.PI*a/(t+r-1);i[a]=e-n*Math.cos(o)}return vn(i,"float32")}var nl,rl=ln({hannWindow_:function(t){return el(t,.5,.5)}}),il=ln({hammingWindow_:function(t){return el(t,.54,.46)}}),al=ln({frame_:function(t,e,n,r,i){void 0===r&&(r=!1),void 0===i&&(i=0);for(var a=0,o=[];a+e<=t.size;)o.push(dc(t,a,e)),a+=n;if(r)for(;a<t.size;){var s=a+e-t.size,u=An([dc(t,a,e-s),Sn([s],i)]);o.push(u),a+=n}return 0===o.length?yn([],[0,e]):An(o).as2D(o.length,e)}}),ol=ln({stft_:function(t,e,n,r,i){var a;void 0===i&&(i=rl),null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));for(var o=al(t,e,n),s=mu(o,i(e)),u=[],c=0;c<o.shape[0];c++)u.push(Xc(s.slice([c,0],[1,e]),r));return An(u)}}),sl=Object.freeze({hannWindow:rl,hammingWindow:il,frame:al,stft:ol});!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(nl||(nl={}));var ul=ln({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=nl.SUM_BY_NONZERO_WEIGHTS);var i=Je(t,"labels","absoluteDifference"),a=Je(e,"predictions","absoluteDifference"),o=null;null!=n&&(o=Je(n,"weights","absoluteDifference")),N(i.shape,a.shape,"Error in absoluteDifference: ");var s=i.sub(a).abs();return cl(s,o,r)}}),cl=ln({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=nl.SUM_BY_NONZERO_WEIGHTS);var r=Je(t,"losses","computeWeightedLoss"),i=null;null!=e&&(i=Je(e,"weights","computeWeightedLoss"));var a=null==i?r:r.mul(i);if(n===nl.NONE)return a;if(n===nl.SUM)return a.sum();if(n===nl.MEAN){if(null==i)return a.mean();var o=r.size/i.size,s=a.sum().div(i.sum());return o>1?s.div(gn(o)):s}if(n===nl.SUM_BY_NONZERO_WEIGHTS){if(null==i)return a.sum().div(gn(r.size));var u=i.mul(Cn(r.shape)).notEqual(gn(0)).sum().toFloat();return a.sum().div(u)}throw Error("Unknown reduction: "+n)}}),ll=ln({cosineDistance_:function(t,e,n,r,i){void 0===i&&(i=nl.SUM_BY_NONZERO_WEIGHTS);var a=Je(t,"labels","cosineDistance"),o=Je(e,"predictions","cosineDistance"),s=null;null!=r&&(s=Je(r,"weights","cosineDistance")),N(a.shape,o.shape,"Error in cosineDistance: ");var u=gn(1).sub(a.mul(o).sum(n,!0));return cl(u,s,i)}}),pl=ln({hingeLoss_:function(t,e,n,r){void 0===r&&(r=nl.SUM_BY_NONZERO_WEIGHTS);var i=Je(t,"labels","hingeLoss"),a=Je(e,"predictions","hingeLoss"),o=null;null!=n&&(o=Je(n,"weights","hingeLoss")),N(i.shape,a.shape,"Error in hingeLoss: ");var s=gn(1);i=gn(2).mul(i).sub(s);var u=s.sub(i.mul(a)).relu();return cl(u,o,r)}}),hl=ln({huberLoss_:function(t,e,n,r,i){void 0===r&&(r=1),void 0===i&&(i=nl.SUM_BY_NONZERO_WEIGHTS);var a=Je(t,"labels","huberLoss"),o=Je(e,"predictions","huberLoss"),s=null;null!=n&&(s=Je(n,"weights","huberLoss")),N(a.shape,o.shape,"Error in huberLoss: ");var u=gn(r),c=o.sub(a).abs(),l=pu(c,u),p=c.sub(l),h=gn(.5).mul(l.square()).add(u.mul(p));return cl(h,s,i)}}),fl=ln({logLoss_:function(t,e,n,r,i){void 0===r&&(r=1e-7),void 0===i&&(i=nl.SUM_BY_NONZERO_WEIGHTS);var a=Je(t,"labels","logLoss"),o=Je(e,"predictions","logLoss"),s=null;null!=n&&(s=Je(n,"weights","logLoss")),N(a.shape,o.shape,"Error in logLoss: ");var u=gn(1),c=gn(r),l=a.mul(o.add(c).log()).neg().sub(u.sub(a).mul(u.sub(o).add(c).log()));return cl(l,s,i)}}),dl=ln({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=nl.SUM_BY_NONZERO_WEIGHTS);var i=Je(t,"labels","meanSquaredError"),a=Je(e,"predictions","meanSquaredError"),o=null;null!=n&&(o=Je(n,"weights","meanSquaredError")),N(i.shape,a.shape,"Error in meanSquaredError: ");var s=i.squaredDifference(a);return cl(s,o,r)}}),ml=ln({sigmoidCrossEntropy_:function(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=nl.SUM_BY_NONZERO_WEIGHTS);var a=Je(t,"multiClassLabels","sigmoidCrossEntropy"),o=Je(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=Je(n,"weights","sigmoidCrossEntropy")),N(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=gn(r),c=gn(1),l=gn(.5);a=a.mul(c.sub(u)).add(l.mul(u))}var p=function(t,e){var n=Je(t,"labels","sigmoidCrossEntropyWithLogits"),r=Je(e,"logits","sigmoidCrossEntropyWithLogits");N(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var i=r.relu(),a=r.mul(n),o=r.abs().neg().exp().log1p();return i.sub(a).add(o)}(a,o);return cl(p,s,i)}}),gl=ln({softmaxCrossEntropy_:function(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=nl.SUM_BY_NONZERO_WEIGHTS);var a=Je(t,"onehotLabels","softmaxCrossEntropy"),o=Je(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=Je(n,"weights","softmaxCrossEntropy")),N(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){var u=gn(r),c=gn(1),l=gn(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l))}var p=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return Lr((function(t,e,r){var i=e.logSumExp([n],!0),a=e.toFloat().sub(i);return r([t,a]),{value:a.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],i=e[1],a=nn(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(i.exp())),t.reshape(a).mul(i.exp().sub(r.toFloat()))]}}}))(t,e)}(a,o);return cl(p,s,i)}}),vl=Object.freeze({get Reduction(){return nl},absoluteDifference:ul,computeWeightedLoss:cl,cosineDistance:ll,hingeLoss:pl,huberLoss:hl,logLoss:fl,meanSquaredError:dl,sigmoidCrossEntropy:ml,softmaxCrossEntropy:gl});function yl(t,e){return void 0===e&&(e=!1),Mt.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],i=er(n),a=t.clone(),o=yn([[1]],[1,1]),s=o.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=i;e=Mt.tidy((function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=yn([[-1]]).where(c.greater(0),yn([[1]])),p=c.sub(l.mul(u)),h=e.div(p);s=1===h.shape[0]?o.clone():o.concat(h.slice([1,0],[h.shape[0]-1,h.shape[1]]),0);var f=l.matMul(p).div(u).neg(),d=a.slice([t,0],[n-t,r]),m=f.mul(s);if(0===t)a=d.sub(m.matMul(s.transpose().matMul(d)));else{var g=d.sub(m.matMul(s.transpose().matMul(d)));a=a.slice([0,0],[t,r]).concat(g,0)}var v=i.slice([0,t],[n,i.shape[1]-t]);if(0===t)i=v.sub(v.matMul(s).matMul(m.transpose()));else{var y=v.sub(v.matMul(s).matMul(m.transpose()));i=i.slice([0,0],[n,t]).concat(y,1)}return[s,a,i]})),s=e[0],a=e[1],i=e[2],qe([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(i=i.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[i,a]}))}var bl=ln({bandPart_:function(t,e,n){if(e%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+e+".");if(n%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+n+".");var r=Je(t,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var i=r.shape,a=r.shape.slice(-2),o=a[0],s=a[1];if(!(e<=o))throw new Error("bandPart(): numLower ("+e+") must not be greater than the number of rows ("+o+").");if(!(n<=s))throw new Error("bandPart(): numUpper ("+n+") must not be greater than the number of columns ("+s+").");e<0&&(e=o),n<0&&(n=s);var u=On(0,o,1,"int32").reshape([-1,1]),c=On(0,s,1,"int32"),l=wu(u,c),p=Ys(l.lessEqual(gn(+e,"int32")),l.greaterEqual(gn(-n,"int32"))),h=Nn([o,s],r.dtype);return gr(br(r.reshape([-1,o,s])).map((function(t){return Qs(p,t,h)}))).reshape(i)}}),xl=ln({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,C(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){C(t[e].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}))},i=1;i<t.length;++i)r(i)}else e=!0,t=Fn(t,t.shape[0],0).map((function(t){return mr(t,[0])}));C(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var a=[],o=t,s=function(t){a.push(Mt.tidy((function(){var e=o[t];if(t>0)for(var n=0;n<t;++n){var r=Ac(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r)}return e.div(Pc(e,"euclidean"))})))};for(i=0;i<t.length;++i)s(i);return e?gr(a,0):a}}),wl=ln({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return yl(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=br(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),i=[],a=[];return r.forEach((function(t){var n=yl(t,e),r=n[0],o=n[1];i.push(r),a.push(o)})),[gr(i,0).reshape(t.shape),gr(a,0).reshape(t.shape)]}}),Cl=Object.freeze({bandPart:bl,gramSchmidt:xl,qr:wl});function Nl(t,e,n,r,i){null==r&&(r=.5),null==i&&(i=Number.NEGATIVE_INFINITY);var a=t.shape[0];return n=Math.min(n,a),C(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),C(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),C(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),C(1===e.rank,(function(){return"scores must be a 1D tensor"})),C(e.shape[0]===a,(function(){return"scores has incompatible shape with boxes. Expected "+a+", but was "+e.shape[0]})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:i}}var Sl=ln({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=Je(t,"images","resizeBilinear");C(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),C(2===e.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var i=r,a=!1;3===r.rank&&(a=!0,i=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var o=e[0],s=e[1],u=Mt.runKernelFunc((function(t,e){return e([i]),t.resizeBilinear(i,o,s,n)}),{x:i},(function(t,e){return{x:function(){return Mt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),"ResizeBilinear",{alignCorners:n,newHeight:o,newWidth:s});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),El=ln({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=Je(t,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),C(2===e.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),C("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var i=r,a=!1;3===r.rank&&(a=!0,i=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var o=e[0],s=e[1],u=Mt.runKernelFunc((function(t,e){return e([i]),t.resizeNearestNeighbor(i,o,s,n)}),{batchImages:i},(function(t,e){return{batchImages:function(){return Mt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Ol=ln({nonMaxSuppression_:function(t,e,n,r,i){void 0===r&&(r=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY);var a=Je(t,"boxes","nonMaxSuppression"),o=Je(e,"scores","nonMaxSuppression"),s=Nl(a,o,n,r,i);n=s.maxOutputSize,r=s.iouThreshold,i=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:i};return Mt.runKernelFunc((function(t){return t.nonMaxSuppression(a,o,n,r,i)}),{boxes:a,scores:o},null,"NonMaxSuppressionV3",u)}}),Il=ln({cropAndResize_:function(t,e,n,r,i,a){var o=Je(t,"image","cropAndResize"),s=Je(e,"boxes","cropAndResize","float32"),u=Je(n,"boxInd","cropAndResize","int32");i=i||"bilinear",a=a||0;var c=s.shape[0];return C(4===o.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+o.rank+"."})),C(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),C(1===u.rank&&u.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),C(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),C(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),C("bilinear"===i||"nearest"===i,(function(){return"method must be bilinear or nearest, but was "+i})),Mt.runKernelFunc((function(t,e){return t.cropAndResize(o,s,u,r,i,a)}),{images:o,boxes:s,boxInd:u},null,"CropAndResize",{method:i,extrapolationValue:a,cropSize:r})}}),kl=Object.freeze({resizeBilinear:Sl,resizeNearestNeighbor:El,nonMaxSuppression:Ol,nonMaxSuppressionAsync:function(t,e,n,r,i){return void 0===r&&(r=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),u(this,void 0,void 0,(function(){var a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:return a=Je(t,"boxes","nonMaxSuppressionAsync"),o=Je(e,"scores","nonMaxSuppressionAsync"),s=Nl(a,o,n,r,i),n=s.maxOutputSize,r=s.iouThreshold,i=s.scoreThreshold,[4,Promise.all([a.data(),o.data()])];case 1:return u=c.sent(),l=u[0],p=u[1],h=pi(l,p,n,r,i),a!==t&&a.dispose(),o!==e&&o.dispose(),[2,h]}}))}))},cropAndResize:Il}),Al=function(t,e){return!(t>0)||"linear"===e},Rl=function(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error("Gradient for activation "+n+" has not been implemented yet.")},Tl=function(t,e){var n=e,r=Gr(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},Dl=function(t,e,n){if("linear"===e)return t;if("relu"===e)return Fc(t);if("elu"===e)return Tc(t);if("relu6"===e)return Mc(t);if("prelu"===e)return _c(t,n);throw new Error("Unknown fused activation "+e+".")},_l=ln({fusedMatMul_:function(t){var e,n=t.a,r=t.b,i=t.transposeA,a=void 0!==i&&i,o=t.transposeB,s=void 0!==o&&o,u=t.bias,c=t.activation,l=void 0===c?"linear":c,p=t.preluActivationWeights;if(!1===Al(Mt.state.gradientDepth,l)){var h=Qu(n,r,a,s);return null!=u&&(h=eu(h,u)),Dl(h,l,p)}var f=Je(n,"a","fused matMul"),d=Je(r,"b","fused matMul");e=kt(f,d),f=e[0],d=e[1];var m=a?f.shape[f.rank-2]:f.shape[f.rank-1],g=s?d.shape[d.rank-1]:d.shape[d.rank-2],v=a?f.shape[f.rank-1]:f.shape[f.rank-2],y=s?d.shape[d.rank-2]:d.shape[d.rank-1],b=f.shape.slice(0,-2),x=d.shape.slice(0,-2),w=O(b),N=O(x);C(f.rank>=2&&d.rank>=2&&f.rank===d.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+f.rank+" and "+d.rank+"."})),C(I(b,x),(function(){return"Error in fused matMul: outer dimensions ("+b+") and ("+x+") of Tensors with shapes "+f.shape+" and "+d.shape+" must match."})),C(m===g,(function(){return"Error in fused matMul: inner shapes ("+m+") and ("+g+") of Tensors with shapes "+f.shape+" and "+d.shape+" and transposeA="+a+" and transposeB="+s+" must match."}));var S,E,k=f.shape.slice(0,-2).concat([v,y]),A=a?f.as3D(w,m,v):f.as3D(w,v,m),R=s?d.as3D(N,y,g):d.as3D(N,g,y);null!=u&&qr(k,(S=kt(S=Je(u,"bias","fused matMul"),f)[0]).shape),null!=p&&(E=Je(p,"prelu weights","fused matMul"));var T={$a:A,$b:R};return null!=u&&(T.$bias=S),null!=p&&(T.$preluActivationWeights=E),Mt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:A,b:R,transposeA:a,transposeB:s,bias:S,activation:l,preluActivationWeights:E});return e([A,R,n]),n}),T,(function(t,e){var n=e[0],r=e[1],i=e[2],o=Rl(t,i,l),c={};return null!=u&&(c={$bias:function(){return Tl(S,o)}}),a||s?!a&&s?Object.assign({$a:function(){return o.matMul(r,!1,!1)},$b:function(){return o.matMul(n,!0,!1)}},c):a&&!s?Object.assign({$a:function(){return r.matMul(o,!1,!0)},$b:function(){return n.matMul(o,!1,!1)}},c):Object.assign({$a:function(){return r.matMul(o,!0,!0)},$b:function(){return o.matMul(n,!0,!0)}},c):Object.assign({$a:function(){return o.matMul(r,!1,!0)},$b:function(){return n.matMul(o,!0,!1)}},c)})).reshape(k)}}),Fl=ln({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,i=t.pad,a=t.dataFormat,o=void 0===a?"NHWC":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,p=t.activation,h=void 0===p?"linear":p,f=t.preluActivationWeights;if(h=h||"linear",!1===Al(Mt.state.gradientDepth,h)){var d=Uu(e,n,r,i,o,u,c);return null!=l&&(d=eu(d,l)),Dl(d,h,f)}var m=Je(e,"x","conv2d"),g=Je(n,"filter","conv2d"),v=m,y=!1;3===m.rank&&(y=!0,v=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),C(4===v.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+v.rank+"."})),C(4===g.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+g.rank+"."})),null!=c&&C(k(i),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+i+"."})),C(v.shape[3]===g.shape[2],(function(){return"Error in conv2d: depth of input ("+v.shape[3]+") must match input depth for filter "+g.shape[2]+"."})),C(ni(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),C("NHWC"===o,(function(){return"Error in conv2d: got dataFormat of "+o+" but only NHWC is currently supported."}));var b,x,w=Xr(v.shape,g.shape,r,u,i,c);null!=l&&(b=kt(b=Je(l,"bias","fused conv2d"),m)[0],qr(w.outShape,b.shape)),null!=f&&(x=Je(f,"prelu weights","fused conv2d"));var N={x:v,filter:g};null!=l&&(N.bias=b),null!=f&&(N.preluActivationWeights=x);var S=[g,v],E=Mt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:v,filter:g,convInfo:w,bias:b,activation:h,preluActivationWeights:x});return e([g,v,n]),n}),N,(function(t,e){var n=e,a=n[0],o=n[1],s=n[2],c=Rl(t,s,h);C(ei(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var p={};return null!=l&&(p={bias:function(){return Tl(b,c)}}),Object.assign({x:function(){return Hu(o.shape,c,a,r,i)},filter:function(){return qu(o,c,a.shape,r,i)}},p)}),"FusedConv2D",{convInfo:w,activation:h},S,[!0]);return y?E.as3D(E.shape[1],E.shape[2],E.shape[3]):E}}),Ml=ln({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,i=t.pad,a=t.dataFormat,o=void 0===a?"NHWC":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,p=t.activation,h=void 0===p?"linear":p,f=t.preluActivationWeights;if(!1===Al(Mt.state.gradientDepth,h)){var d=Ku(e,n,r,i,o,u,c);return null!=l&&(d=eu(d,l)),Dl(d,h,f)}var m=Je(e,"x","depthwiseConv2d"),g=Je(n,"filter","depthwiseConv2d"),v=m,y=!1;3===m.rank&&(y=!0,v=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),C(4===v.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+v.rank+"."})),C(4===g.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+g.rank+"."})),C(v.shape[3]===g.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+v.shape[3]+") must match the inChannels dimension in filter "+g.shape[2]+"."})),null==u&&(u=[1,1]),C(ni(r,u),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),null!=c&&C(k(i),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+i+"."}));var b,x,w=Xr(v.shape,g.shape,r,u,i,c,!0);null!=l&&(b=kt(b=Je(l,"bias","fused conv2d"),m)[0],qr(w.outShape,b.shape)),null!=f&&(x=Je(f,"prelu weights","fused depthwiseConv2d"));var N={x:v,filter:g};null!=l&&(N.bias=b),null!=f&&(N.preluActivationWeights=x);var S=[g,v],E=Mt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:v,filter:g,convInfo:w,bias:b,activation:h,preluActivationWeights:x});return e([g,v,n]),n}),N,(function(t,e){C(ei(u),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+u+"'"}));var n=e[0],r=e[1],i=e[2],a=Rl(t,i,h),o={};return null!=l&&(o={bias:function(){return Tl(b,a)}}),Object.assign({x:function(){return Xu(r.shape,a,n,w)},filter:function(){return Yu(r,a,n.shape,w)}},o)}),"FusedDepthwiseConv2D",{convInfo:w,activation:h},S,[!0]);return y?E.as3D(E.shape[1],E.shape[2],E.shape[3]):E}}),zl=Object.freeze({matMul:_l,conv2d:Fl,depthwiseConv2d:Ml}),Ll=Object.freeze({image:kl,linalg:Cl,losses:vl,spectral:$c,fused:zl,signal:sl,square:ts,conv1d:Wu,conv2d:Uu,conv3d:Gu,depthwiseConv2d:Ku,separableConv2d:$u,conv2dTranspose:Ju,conv3dTranspose:Zu,op:ln,batchNormalization2d:Vs,batchNormalization3d:Ws,batchNormalization4d:Us,batchNormalization:Gs,batchNorm:qs,batchNorm2d:Hs,batchNorm3d:Ks,batchNorm4d:Xs,booleanMaskAsync:function(t,e,n){return u(this,void 0,void 0,(function(){var r,i,a,o,s,u,l,p,h,f,d,m,g;return c(this,(function(c){switch(c.label){case 0:for(r=Je(t,"tensor","boolMask"),i=Je(e,"mask","boolMask","bool"),a=null==n?0:n,o=i.rank,s=r.shape,C(o>0,(function(){return"mask cannot be scalar"})),N(s.slice(a,a+o),i.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,l=a;l<a+o;l++)u*=s[l];return p=s.slice(0,a).concat([u],s.slice(a+o)),h=r.reshape(p),f=i.reshape([-1]),[4,tu(f)];case 1:return d=c.sent(),m=d.squeeze([1]),g=Lu(h,m,a),t!==r&&r.dispose(),e!==i&&i.dispose(),m.dispose(),h.dispose(),f.dispose(),d.dispose(),[2,g]}}))}))},complex:pn,real:hn,imag:fn,concat:An,concat1d:Rn,concat2d:Tn,concat3d:Dn,concat4d:_n,split:Fn,matMul:Qu,dot:tc,outerProduct:ec,reverse:nc,reverse1d:rc,reverse2d:ic,reverse3d:ac,reverse4d:oc,maxPool:cc,avgPool:lc,pool:pc,maxPool3d:hc,avgPool3d:fc,slice:dc,slice1d:mc,slice2d:gc,slice3d:vc,slice4d:yc,abs:es,acos:ns,acosh:rs,asin:is,asinh:as,atan:os,atanh:ss,ceil:us,clipByValue:cs,cos:ls,cosh:ps,erf:hs,exp:fs,expm1:ds,floor:ms,log:gs,log1p:vs,logSigmoid:ys,neg:bs,reciprocal:xs,round:ws,rsqrt:Cs,sigmoid:Ns,sign:Ss,isNaN:Es,isInf:Os,isFinite:Is,sin:ks,sinh:As,softplus:Rs,sqrt:Ts,step:Ds,tan:_s,tanh:Fs,all:xc,any:wc,argMax:Cc,argMin:Nc,logSumExp:Sc,max:Ec,mean:Oc,min:Ic,moments:kc,sum:Ac,prod:Rc,equal:Nu,equalStrict:Su,greater:Eu,greaterEqual:Ou,greaterEqualStrict:Iu,greaterStrict:ku,less:Au,lessEqual:Ru,lessEqualStrict:Tu,lessStrict:Du,notEqual:_u,notEqualStrict:Fu,add:eu,addN:nu,addStrict:ru,atan2:iu,div:au,divNoNan:ou,divStrict:su,floorDiv:uu,maximum:cu,maximumStrict:lu,minimum:pu,minimumStrict:hu,mod:fu,modStrict:du,mul:mu,mulStrict:gu,pow:vu,powStrict:yu,squaredDifference:bu,squaredDifferenceStrict:xu,sub:wu,subStrict:Cu,elu:Tc,leakyRelu:Dc,prelu:_c,relu:Fc,relu6:Mc,selu:zc,logicalAnd:Ys,logicalNot:$s,logicalOr:Js,logicalXor:Zs,where:Qs,whereAsync:tu,buffer:Kn,print:function(t,e){void 0===e&&(e=!1),console.log(t.toString(e))},batchToSpaceND:Xn,broadcastTo:Yn,cast:$n,clone:Jn,cumsum:Zn,depthToSpace:Qn,expandDims:tr,eye:er,multinomial:nr,oneHot:rr,pad:ir,pad1d:ar,pad2d:or,pad3d:sr,pad4d:ur,rand:cr,randomNormal:lr,randomGamma:pr,randomUniform:hr,reshape:fr,spaceToBatchND:dr,squeeze:mr,stack:gr,tile:vr,truncatedNormal:yr,unstack:br,setdiff1dAsync:xr,fill:Sn,linspace:En,ones:Cn,range:On,scalar:gn,tensor:dn,tensor1d:vn,tensor2d:yn,tensor3d:bn,tensor4d:xn,tensor5d:function(t,e,n){if(S(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=Ye(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return mn(t,e,r,n)},tensor6d:function(t,e,n){if(S(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=Ye(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return mn(t,e=e||r,r,n)},variable:wn,zeros:Nn,onesLike:In,zerosLike:kn,transpose:Lc,softmax:Br,logSoftmax:Pr,localResponseNormalization:Bc,norm:Pc,gather:Lu,unsortedSegmentSum:Bu,basicLSTMCell:jc,multiRNNCell:Vc,movingAverage:Wc,stridedSlice:Uc,topk:Gc,scatterND:qc,fft:Hc,ifft:Kc,rfft:Xc,irfft:Yc,sparseToDense:Jc,gatherND:Zc,diag:Qc,dropout:tl,hannWindow:rl,hammingWindow:il,frame:al,stft:ol,inTopKAsync:function(t,e,n){return void 0===n&&(n=1),u(this,void 0,void 0,(function(){var r,i,a,o,s,u,l,p,h,f,d,m,g,v;return c(this,(function(c){switch(c.label){case 0:return r=Je(t,"predictions","inTopK"),i=Je(e,"targets","inTopK"),C(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),C(r.rank-1===i.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+i.rank})),N(r.shape.slice(0,r.shape.length-1),i.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),a=r.shape[r.shape.length-1],C(n>0&&n<=a,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+a+"), but got "+n})),[4,r.data()];case 1:return o=c.sent(),[4,i.data()];case 2:for(s=c.sent(),u=[o.length/a,a],p=u[1],h=z("bool",l=u[0]),f=0;f<l;f++){for(d=f*p,m=o.subarray(d,d+p),g=[],v=0;v<m.length;v++)g.push({value:m[v],index:v});for(g.sort((function(t,e){return e.value-t.value})),h[f]=0,v=0;v<n;v++)if(g[v].index===s[f]){h[f]=1;break}}return t!==r&&r.dispose(),e!==i&&i.dispose(),[2,dn(h,i.shape,"bool")]}}))}))}});function Bl(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&C("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}))}))}function Pl(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var jl=function(t){function e(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new jr(e,Mt),e}return s(e,t),e.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,p().get("IS_NODE")&&Xe("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n"));var r={};return this.data.set(r,{values:t,dtype:n}),r},e.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},e.prototype.numDataIds=function(){return this.data.numDataIds()},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.readSync(t)]}))}))},e.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?si(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},e.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return it(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Kn(t.shape,t.dtype,n)},e.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Mt.makeTensorFromDataId(r,e,n,this)},e.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=et(),t(),[2,{kernelMs:et()-e}]}))}))},e.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},e.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Mt.keep(t.clone()),imag:Mt.keep(e.clone())},n},e.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(Bl(t,"slice"),Mr(t.shape,e,n)){var r=zr(e,t.strides),i=O(n);return dn(this.readSync(t.dataId).subarray(r,r+i),n,t.dtype)}for(var a=Kn(n,t.dtype),o=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s).map((function(t,n){return t+e[n]}));a.values[s]=o.get.apply(o,u)}return a.toTensor()},e.prototype.stridedSlice=function(t,e,n,r){Bl(t,"stridedSlice");var i=Dr(e,n,r);if(i.some((function(t){return 0===t})))return dn([],i);for(var a=Kn(i,t.dtype),o=this.bufferSync(t),s=0;s<a.size;s++){for(var u=a.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];a.set.apply(a,[o.get.apply(o,c)].concat(u))}return a.toTensor()},e.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=Kn([t.size,t.size],t.dtype),r=n.values,i=0;i<e.length;i++)r[i*t.size+i]=e[i];return n.toTensor()},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),i=0,a=0;a<t.rank;a++)a!==e&&(r[i++]=t.shape[a]);var o=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)o[e]=a,u[a]=this.slice(t,o,s).reshape(r);return u},e.prototype.reverse=function(t,e){Bl(t,"reverse");for(var n=Kn(t.shape,t.dtype),r=this.bufferSync(t),i=function(i){var a=n.indexToLoc(i),o=a.slice();e.forEach((function(e){return o[e]=t.shape[e]-1-o[e]})),n.set.apply(n,[r.get.apply(r,o)].concat(a))},a=0;a<n.size;a++)i(a);return n.toTensor()},e.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return hn(t)})),i=t.map((function(t){return fn(t)}));return pn(this.concat(r,e),this.concat(i,e))}var a=t.map((function(t){var n=O(t.shape.slice(e));return t.as2D(-1,n)})),o=cn(a.map((function(t){return t.shape})),1),s=Kn(o,t[0].dtype).values;if(1===a[0].shape[0]){var u=0;a.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;a.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,i=0;i<t.shape[0];++i)for(var a=i*o[1]+c,u=0;u<t.shape[1];++u)s[a+u]=e[r++];c+=t.shape[1]}))}var l=cn(t.map((function(t){return t.shape})),e);return dn(s,l,t[0].dtype)},e.prototype.neg=function(t){return Bl(t,"neg"),this.multiply(gn(-1),t)},e.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Ot(t.dtype,e.dtype),(function(t,e){return t+e}))},e.prototype.addN=function(t){var e=this;Bl(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=Kn(t[0].shape,t[0].dtype),i=r.values,a=0;a<t.length;a++)for(var o=n[a],s=0;s<i.length;s++)i[s]+=o[s];return r.toTensor()},e.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Ot(t.dtype,e.dtype),(function(t,e){return t-e}))},e.prototype.pow=function(t,e){return Bl([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},e.prototype.batchMatMul=function(t,e,n,r){Bl([t,e],"matMul");for(var i=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],o=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],p=l[0],h=l[1],f=l[2],d=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],m=d[0],g=d[1],v=d[2],y=a*o,b=Kn([s,a,o],t.dtype),x=b.values,w=this.blockSize,C=0;C<s;C++)for(var N=0;N<a;N+=w)for(var S=0;S<o;S+=w)for(var E=0;E<i;E+=w)for(var O=Math.min(N+w,a),I=Math.min(S+w,o),k=Math.min(E+w,i),A=N;A<O;A++)for(var R=S;R<I;R++){for(var T=0,D=E;D<k;D++)T+=u[C*p+A*h+D*f]*c[D*m+R*g+C*v];x[C*y+(A*o+R)]+=T}return b.toTensor()},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,i=t.transposeB,a=t.bias,o=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,i);return a&&(u=this.add(u,a)),o&&(u=Pl(this,u,o,s)),u},e.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Ot(t.dtype,e.dtype),(function(t,e){return t*e}))},e.prototype.realDivide=function(t,e){return Bl([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",(function(t,e){return t/e}))},e.prototype.floorDiv=function(t,e){return Bl([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},e.prototype.sum=function(t,e){Bl(t,"sum"),rn("sum",e,t.rank);for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,Ot(t.dtype,"int32")),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=0,h=0;h<o;++h)p+=u[l+h];s[c]=p}return a},e.prototype.prod=function(t,e){Bl(t,"sum");for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,Ot(t.dtype,"int32")),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=1,h=0;h<o;++h)p*=u[l+h];s[c]=p}return a},e.prototype.unsortedSegmentSum=function(t,e,n){Bl(t,"unsortedSegmentSum");for(var r=[],i=t.rank-e.rank,a=0;a<i;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var o=gn(a,"int32"),s=Nu(o,e).asType("float32").mul(t).sum(0);r.push(s)}return gr(r)},e.prototype.argMin=function(t,e){Bl(t,"argMin");var n=[e];rn("argMin",n,t.rank);for(var r=en(t.shape,n),i=r[0],a=r[1],o=Nn(i,"int32"),s=O(a),u=this.readSync(o.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var p=l*s,h=c[p],f=0,d=0;d<s;++d){var m=c[p+d];m<h&&(h=m,f=d)}u[l]=f}return o},e.prototype.argMax=function(t,e){Bl(t,"argMax");var n=[e];rn("argMax",n,t.rank);for(var r=en(t.shape,n),i=r[0],a=r[1],o=Nn(i,"int32"),s=O(a),u=this.readSync(o.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var p=l*s,h=c[p],f=0,d=0;d<s;++d){var m=c[p+d];m>h&&(h=m,f=d)}u[l]=f}return o},e.prototype.cumsum=function(t,e,n,r){if(Bl(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var i=Ot(t.dtype,"int32"),a=Nn(t.shape,i),o=this.readSync(a.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var p=0;p<u;p++){var h=c(l,p);if(0===p)o[h]=n?0:s[h];else{var f=c(l,p-1);o[h]=n?s[f]+o[f]:s[h]+o[f]}}return a},e.prototype.equal=function(t,e){return Bl([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},e.prototype.notEqual=function(t,e){return Bl([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},e.prototype.less=function(t,e){return Bl([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},e.prototype.lessEqual=function(t,e){return Bl([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},e.prototype.greater=function(t,e){return Bl([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},e.prototype.greaterEqual=function(t,e){return Bl([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},e.prototype.logicalNot=function(t){Bl(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,"bool")},e.prototype.logicalAnd=function(t,e){return Bl([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},e.prototype.logicalOr=function(t,e){return Bl([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},e.prototype.select=function(t,e,n){Bl([t,e,n],"select");for(var r=this.readSync(t.dataId),i=this.readSync(e.dataId),a=this.readSync(n.dataId),o=Nn(e.shape,Ot(e.dtype,n.dtype)),s=this.readSync(o.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:O(e.shape.slice(1)),l=0;l<r.length;l++)for(var p=0;p<c;p++)1===r[l]?s[u++]=i[l]:s[u++]=a[l];return o},e.prototype.where=function(t){Bl([t],"where");var e=this.readSync(t.dataId);return gi(t.shape,e)},e.prototype.topk=function(t,e,n){return Bl(t,"topk"),mi(this.readSync(t.dataId),t.shape,t.dtype,e)},e.prototype.min=function(t,e){Bl(t,"min"),rn("min",e,t.rank);for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,t.dtype),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=u[l],h=0;h<o;++h){var f=u[l+h];f<p&&(p=f)}s[c]=p}return a},e.prototype.minimum=function(t,e){return Bl([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},e.prototype.mod=function(t,e){return Bl([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},e.prototype.max=function(t,e){Bl(t,"max"),rn("max",e,t.rank);for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,t.dtype),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=u[l],h=0;h<o;++h){var f=u[l+h];f>p&&(p=f)}s[c]=p}return a},e.prototype.maximum=function(t,e){return Bl([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},e.prototype.all=function(t,e){Bl(t,"all"),rn("all",e,t.rank);for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,t.dtype),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=u[l],h=0;h<o;++h){var f=u[l+h];p=p&&f}s[c]=p}return a},e.prototype.any=function(t,e){Bl(t,"any"),rn("any",e,t.rank);for(var n=en(t.shape,e),r=n[0],i=n[1],a=Nn(r,t.dtype),o=O(i),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*o,p=u[l],h=0;h<o;++h){var f=u[l+h];p=p||f}s[c]=p}return a},e.prototype.squaredDifference=function(t,e){return Bl([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},e.prototype.ceil=function(t){Bl(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.floor=function(t){Bl(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.sign=function(t){Bl(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,"float32")},e.prototype.isNaN=function(t){Bl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isInf=function(t){Bl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isFinite=function(t){Bl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.round=function(t){Bl(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=Math.floor(e[r]);e[r]-i<.5?n[r]=Math.floor(e[r]):e[r]-i>.5?n[r]=Math.ceil(e[r]):n[r]=i%2==0?i:i+1}return this.makeOutput(n,t.shape,"float32")},e.prototype.exp=function(t){Bl(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.expm1=function(t){Bl(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.log=function(t){Bl(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.log(i)}return this.makeOutput(n,t.shape,"float32")},e.prototype.log1p=function(t){Bl(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.log1p(i)}return this.makeOutput(n,t.shape,"float32")},e.prototype.sqrt=function(t){Bl(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=Math.sqrt(i)}return this.makeOutput(n,t.shape,"float32")},e.prototype.rsqrt=function(t){Bl(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var i=e[r];n[r]=1/Math.sqrt(i)}return this.makeOutput(n,t.shape,"float32")},e.prototype.reciprocal=function(t){Bl(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,"float32")},e.prototype.linear=function(t){return t},e.prototype.relu=function(t){Bl(t,"relu");for(var e=Nn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),i=0;i<r.length;++i)n[i]=Math.max(0,r[i]);return e},e.prototype.relu6=function(t){Bl(t,"relu");for(var e=Nn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),i=0;i<r.length;++i)n[i]=Math.min(Math.max(0,r[i]),6);return e},e.prototype.prelu=function(t,e){return Bl([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},e.prototype.elu=function(t){Bl(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var i=n[r];e[r]=i>=0?i:Math.exp(i)-1}return this.makeOutput(e,t.shape,"float32")},e.prototype.eluDer=function(t,e){Bl([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),i=this.readSync(t.dataId),a=0;a<r.length;++a){var o=r[a];n[a]=o>=1?i[a]:i[a]*(o+1)}return this.makeOutput(n,e.shape,"float32")},e.prototype.selu=function(t){Bl(t,"selu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var i=n[r];e[r]=i>=0?1.0507009873554805*i:1.7580993408473768*(Math.exp(i)-1)}return this.makeOutput(e,t.shape,"float32")},e.prototype.clip=function(t,e,n){Bl(t,"clip");for(var r=new Float32Array(t.size),i=this.readSync(t.dataId),a=0;a<i.length;++a){var o=i[a];r[a]=o>n?n:o<e?e:o}return this.makeOutput(r,t.shape,"float32")},e.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var i=n[2*r],a=n[2*r+1];e[r]=Math.hypot(i,a)}return this.makeOutput(e,t.shape,"float32")},e.prototype.int=function(t){Bl(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,"int32")},e.prototype.sigmoid=function(t){Bl(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,"float32")},e.prototype.softplus=function(t){Bl(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),i=0;i<r.length;++i){var a,o=r[i]>-e,s=r[i]<e,u=Math.exp(r[i]);a=s?u:o?r[i]:Math.log(1+u),n[i]=a}return this.makeOutput(n,t.shape,"float32")},e.prototype.sin=function(t){Bl(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cos=function(t){Bl(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tan=function(t){Bl(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asin=function(t){Bl(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acos=function(t){Bl(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan=function(t){Bl(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan2=function(t,e){return Bl([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},e.prototype.sinh=function(t){Bl(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cosh=function(t){Bl(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tanh=function(t){Bl(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=A(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asinh=function(t){Bl(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acosh=function(t){Bl(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atanh=function(t){Bl(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.erf=function(t){Bl(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var i=Math.sign(n[r]),a=Math.abs(n[r]),o=1/(1+.3275911*a);e[r]=i*(1-((((1.061405429*o-1.453152027)*o+1.421413741)*o-.284496736)*o+.254829592)*o*Math.exp(-a*a))}return this.makeOutput(e,t.shape,"float32")},e.prototype.step=function(t,e){void 0===e&&(e=0),Bl(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];isNaN(a)?n[i]=NaN:n[i]=a>0?1:e}return this.makeOutput(n,t.shape,"float32")},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,i=t.bias,a=t.activation,o=t.preluActivationWeights,s=this.conv2d(e,n,r);return i&&(s=this.add(s,i)),a&&(s=Pl(this,s,a,o)),s},e.prototype.conv2d=function(t,e,n){Bl([t,e],"conv2d");for(var r=n.filterHeight,i=n.filterWidth,a=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=Kn(n.outShape,t.dtype),p=t.strides[0],h=c?t.strides[1]:t.strides[2],f=c?t.strides[2]:1,d=c?1:t.strides[1],m=l.strides[0],g=c?l.strides[1]:l.strides[2],v=c?l.strides[2]:1,y=c?1:l.strides[1],b=this.readSync(t.dataId),x=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var N=C*p,S=C*m,E=0;E<n.outHeight;++E)for(var O=S+E*g,I=E*n.strideHeight-u,k=0;k<r;k++){var A=I+k*a;if(!(A<0||A>=n.inHeight))for(var R=k*e.strides[0],T=N+A*h,D=0;D<n.outWidth;++D)for(var _=O+D*v,F=D*n.strideWidth-s,M=0;M<i;M++){var z=F+M*o;if(!(z<0||z>=n.inWidth))for(var L=T+z*f,B=R+M*e.strides[1],P=0;P<n.inChannels;++P){for(var j=b[L+P*d],V=0;V<n.outChannels;++V)w[_+V*y]+=j*x[B+V];B+=n.outChannels}}}return l.toTensor()},e.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,i=n.filterHeight,a=n.filterWidth,o=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,p=n.padInfo.top,h=Kn(n.outShape,t.dtype),f=this.readSync(t.dataId),d=this.readSync(e.dataId),m=h.values,g=0;g<n.batchSize;++g)for(var v=g*t.strides[0],y=g*h.strides[0],b=0;b<n.outDepth;++b)for(var x=y+b*h.strides[1],w=b*n.strideDepth-c,C=0;C<r;C++){var N=w+C*o;if(!(N<0||N>=n.inDepth))for(var S=C*e.strides[0],E=v+N*t.strides[1],O=0;O<n.outHeight;++O)for(var I=x+O*h.strides[2],k=O*n.strideHeight-p,A=0;A<i;A++){var R=k+A*s;if(!(R<0||R>=n.inHeight))for(var T=S+A*e.strides[1],D=E+R*t.strides[2],_=0;_<n.outWidth;++_)for(var F=I+_*n.outChannels,M=_*n.strideWidth-l,z=0;z<a;z++){var L=M+z*u;if(!(L<0||L>=n.inWidth))for(var B=T+z*e.strides[2],P=D+L*n.inChannels,j=B,V=0;V<n.inChannels;++V){for(var W=f[P+V],U=0;U<n.outChannels;++U)m[F+U]+=W*d[j+U];j+=n.outChannels}}}}return h.toTensor()},e.prototype.conv2dDerInput=function(t,e,n){Bl([t,e],"conv2dDerInput");for(var r=Kn(n.inShape,"float32"),i=r.values,a=this.readSync(t.dataId),o=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],p=n.batchSize,h=n.filterHeight,f=n.filterWidth,d=n.inChannels,m=n.inHeight,g=n.inWidth,v=n.outChannels,y=n.outHeight,b=n.outWidth,x=n.strideHeight,w=n.strideWidth,C=n.dataFormat,N=h-1-n.padInfo.top,S=f-1-n.padInfo.left,E="channelsLast"===C,O=r.strides[0],I=E?r.strides[1]:r.strides[2],k=E?r.strides[2]:1,A=E?1:r.strides[1],R=t.strides[0],T=E?t.strides[1]:t.strides[2],D=E?t.strides[2]:1,_=E?1:t.strides[1],F=0;F<p;++F)for(var M=0;M<d;++M)for(var z=0;z<m;++z)for(var L=z-N,B=Math.max(0,Math.ceil(L/x)),P=Math.min(y,(h+L)/x),j=0;j<g;++j){for(var V=j-S,W=Math.max(0,Math.ceil(V/w)),U=Math.min(b,(f+V)/w),G=0,q=B;q<P;++q)for(var H=q*x-L,K=W;K<U;++K)for(var X=R*F+T*q+D*K,Y=u*(h-1-H)+c*(f-1-(K*w-V))+l*M,$=0;$<v;++$)G+=a[X+_*$]*o[Y+$];i[O*F+I*z+k*j+A*M]=G}return r.toTensor()},e.prototype.conv3dDerInput=function(t,e,n){for(var r=Kn(n.inShape,"float32"),i=r.values,a=r.strides,o=a[0],s=a[1],u=a[2],c=a[3],l=this.readSync(t.dataId),p=t.strides,h=p[0],f=p[1],d=p[2],m=p[3],g=this.readSync(e.dataId),v=e.strides,y=v[0],b=v[1],x=v[2],w=v[3],C=n.batchSize,N=n.filterDepth,S=n.filterHeight,E=n.filterWidth,O=n.inChannels,I=n.inDepth,k=n.inHeight,A=n.inWidth,R=n.outChannels,T=n.outDepth,D=n.outHeight,_=n.outWidth,F=n.strideDepth,M=n.strideHeight,z=n.strideWidth,L=N-1-n.padInfo.front,B=S-1-n.padInfo.top,P=E-1-n.padInfo.left,j=0;j<C;++j)for(var V=0;V<O;++V)for(var W=0;W<I;++W)for(var U=W-L,G=Math.max(0,Math.ceil(U/F)),q=Math.min(T,(N+U)/F),H=0;H<k;++H)for(var K=H-B,X=Math.max(0,Math.ceil(K/M)),Y=Math.min(D,(S+K)/M),$=0;$<A;++$){for(var J=$-P,Z=Math.max(0,Math.ceil(J/z)),Q=Math.min(_,(E+J)/z),tt=0,et=G;et<q;++et)for(var nt=et*F-U,rt=X;rt<Y;++rt)for(var it=rt*M-K,at=Z;at<Q;++at)for(var ot=h*j+f*et+d*rt+m*at,st=y*(N-1-nt)+b*(S-1-it)+x*(E-1-(at*z-J))+w*V,ut=0;ut<R;++ut)tt+=l[ot+ut]*g[st+ut];i[o*j+s*W+u*H+c*$+V]=tt}return r.toTensor()},e.prototype.conv2dDerFilter=function(t,e,n){Bl([t,e],"conv2dDerFilter");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s="channelsLast"===n.dataFormat,u=Kn(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,p=this.bufferSync(t),h=this.bufferSync(e),f=0;f<a;++f)for(var d=Math.max(0,Math.ceil((l-f)/r)),m=Math.min(n.outHeight,(n.inHeight+l-f)/r),g=0;g<o;++g)for(var v=Math.max(0,Math.ceil((c-g)/i)),y=Math.min(n.outWidth,(n.inWidth+c-g)/i),b=0;b<n.inChannels;++b)for(var x=0;x<n.outChannels;++x){for(var w=0,C=0;C<n.batchSize;++C)for(var N=d;N<m;++N)for(var S=f+N*r-l,E=v;E<y;++E){var O=g+E*i-c;w+=s?p.get(C,S,O,b)*h.get(C,N,E,x):p.get(C,b,S,O)*h.get(C,x,N,E)}u.set(w,f,g,b,x)}return u.toTensor()},e.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,i=n.strideHeight,a=n.strideWidth,o=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=Kn(n.filterShape,"float32"),l=c.values,p=c.strides,h=p[0],f=p[1],d=p[2],m=p[3],g=this.readSync(e.dataId),v=e.strides,y=v[0],b=v[1],x=v[2],w=v[3],C=this.readSync(t.dataId),N=t.strides,S=N[0],E=N[1],O=N[2],I=N[3],k=n.padInfo.front,A=n.padInfo.left,R=n.padInfo.top,T=0;T<o;++T)for(var D=Math.max(0,Math.ceil((k-T)/r)),_=Math.min(n.outDepth,(n.inDepth+k-T)/r),F=T*h,M=0;M<s;++M)for(var z=Math.max(0,Math.ceil((R-M)/i)),L=Math.min(n.outHeight,(n.inHeight+R-M)/i),B=M*f+F,P=0;P<u;++P)for(var j=Math.max(0,Math.ceil((A-P)/a)),V=Math.min(n.outWidth,(n.inWidth+A-P)/a),W=P*d+B,U=0;U<n.inChannels;++U)for(var G=U*m+W,q=0;q<n.outChannels;++q){for(var H=0,K=0;K<n.batchSize;++K)for(var X=K*S,Y=K*y,$=D;$<_;++$)for(var J=(T+$*r-k)*E+X,Z=$*b+Y,Q=z;Q<L;++Q)for(var tt=(M+Q*i-R)*O+J,et=Q*x+Z,nt=j;nt<V;++nt){var rt=nt*w+et;H+=C[(P+nt*a-A)*I+tt+U]*g[rt+q]}l[G+q]=H}return c.toTensor()},e.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,i=t.bias,a=t.activation,o=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return i&&(s=this.add(s,i)),a&&(s=Pl(this,s,a,o)),s},e.prototype.depthwiseConv2D=function(t,e,n){Bl([t,e],"depthwiseConv2D");for(var r=n.filterHeight,i=n.filterWidth,a=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=Kn(n.outShape,t.dtype),p=this.readSync(t.dataId),h=this.readSync(e.dataId),f=l.values,d=0;d<n.batchSize;++d)for(var m=d*t.strides[0],g=d*l.strides[0],v=0;v<n.outHeight;++v)for(var y=g+v*l.strides[1],b=v*n.strideHeight-s,x=0;x<r;++x){var w=b+x*a;if(!(w<0||w>=n.inHeight))for(var C=x*e.strides[0],N=m+w*t.strides[1],S=0;S<n.outWidth;++S)for(var E=y+S*l.strides[2],O=S*n.strideWidth-u,I=0;I<i;++I){var k=O+I*o;if(!(k<0||k>=n.inWidth))for(var A=C+I*e.strides[1],R=N+k*n.inChannels,T=E,D=A,_=0;_<n.inChannels;++_){for(var F=p[R+_],M=0;M<c;++M)f[T+M]+=F*h[D+M];T+=c,D+=c}}}return l.toTensor()},e.prototype.depthwiseConv2DDerInput=function(t,e,n){Bl([t,e],"depthwiseConv2DDerInput");for(var r=Kn(n.inShape,"float32"),i=r.values,a=r.strides,o=a[0],s=a[1],u=a[2],c=this.readSync(t.dataId),l=t.strides,p=l[0],h=l[1],f=l[2],d=this.readSync(e.dataId),m=e.strides,g=m[0],v=m[1],y=m[2],b=n.batchSize,x=n.filterHeight,w=n.filterWidth,C=n.inChannels,N=n.inHeight,S=n.inWidth,E=n.outChannels,O=n.outHeight,I=n.outWidth,k=n.strideHeight,A=n.strideWidth,R=x-1-n.padInfo.top,T=w-1-n.padInfo.left,D=E/C,_=0;_<b;++_)for(var F=0;F<C;++F)for(var M=0;M<N;++M)for(var z=M-R,L=Math.max(0,Math.ceil(z/k)),B=Math.min(O,(x+z)/k),P=0;P<S;++P){for(var j=P-T,V=Math.max(0,Math.ceil(j/A)),W=Math.min(I,(w+j)/A),U=0,G=L;G<B;++G)for(var q=G*k-z,H=V;H<W;++H)for(var K=p*_+h*G+f*H,X=g*(x-1-q)+v*(w-1-(H*A-j))+y*F,Y=0;Y<D;++Y)U+=c[K+(F*D+Y)]*d[X+Y];i[o*_+s*M+u*P+F]=U}return r.toTensor()},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){Bl([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s=Kn(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,p=this.bufferSync(t),h=this.bufferSync(e),f=0;f<a;++f)for(var d=Math.max(0,Math.ceil((c-f)/r)),m=Math.min(n.outHeight,(n.inHeight+c-f)/r),g=0;g<o;++g)for(var v=Math.max(0,Math.ceil((u-g)/i)),y=Math.min(n.outWidth,(n.inWidth+u-g)/i),b=0;b<n.outChannels;++b){for(var x=Math.trunc(b/l),w=b%l,C=0,N=0;N<n.batchSize;++N)for(var S=d;S<m;++S)for(var E=f+S*r-c,O=v;O<y;++O){var I=g+O*i-u;C+=p.get(N,E,I,x)*h.get(N,S,O,b)}s.set(C,f,g,x,w)}return s.toTensor()},e.prototype.tile=function(t,e){return Bl(t,"tile"),di(this.bufferSync(t),e)},e.prototype.pad=function(t,e,n){Bl(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),i=e.map((function(t){return t[0]})),a=this.bufferSync(t),o=Kn(r,t.dtype);0!==n&&o.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map((function(t,e){return t+i[e]}));o.set.apply(o,[a.get.apply(a,u)].concat(c))}return o.toTensor()},e.prototype.transpose=function(t,e){Bl(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var i=this.readSync(t.dataId),a=Kn(n,t.dtype),o=this.bufferSync(t);for(r=0;r<t.size;++r){for(var s=o.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[e[c]];var l=a.locToIndex(u);a.values[l]=i[r]}return a.toTensor()},e.prototype.gather=function(t,e,n){Bl([t,e],"gather");var r=t.shape.slice(),i=this.readSync(e.dataId);r[n]=i.length;for(var a=Kn(r,t.dtype),o=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=i[u[n]];var l=o.locToIndex(c);a.values[s]=o.values[l]}return a.toTensor()},e.prototype.batchToSpaceND=function(t,e,n){Bl([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),i=wr(t.shape,e,r),a=Cr(i.length,e.length),o=Nr(t.shape,e,r),s=Sr(n,e.length),u=Er(o,n,e.length);return t.reshape(i).transpose(a).reshape(o).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){Bl([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),i=[[0,0]];i.push.apply(i,n);for(var a=1+e.length;a<t.shape.length;++a)i.push([0,0]);var o=t.pad(i),s=wr(o.shape,e,r,!1),u=Cr(s.length,e.length,!1),c=Nr(o.shape,e,r,!1);return o.reshape(s).transpose(u).reshape(c)},e.prototype.pool=function(t,e,n){Bl(t,"pool");for(var r=e.strideHeight,i=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,p="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=this.readSync(t.dataId),f=Kn(e.outShape,t.dtype),d=f.values,m=e.outShape[1]*e.outShape[2]*e.outShape[3],g=e.outShape[2]*e.outShape[3],v=e.outShape[3],y=0;y<e.batchSize;++y)for(var b=y*m,x=y*t.strides[0],w=0;w<e.inChannels;++w)for(var C=0;C<e.outHeight;++C)for(var N=C*r-c,S=Math.max(0,N),E=Math.min(e.inHeight,s+N),O=b+C*g,I=0;I<e.outWidth;++I){for(var k=I*i-l,A=Math.max(0,k),R=Math.min(e.inWidth,u+k),T=p,D=0,_=0,F=S;F<E;F+=a){for(var M=x+F*t.strides[1],z=A;z<R;z+=o){var L=h[M+z*t.strides[2]+w];"max"===n&&L>T?T=L:"avg"===n&&(D+=L,_++)}if(isNaN(T))break}d[O+I*v+w]="avg"===n?D/_:T}return f.toTensor()},e.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},e.prototype.maxPoolPositions=function(t,e){for(var n=Kn(e.outShape,"int32"),r=e.strideHeight,i=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,p=this.bufferSync(t),h=0;h<e.batchSize;++h)for(var f=0;f<e.inChannels;++f)for(var d=0;d<e.outHeight;++d){for(var m=d*r-c,g=m;g<0;)g+=a;for(var v=Math.min(e.inHeight,s+m),y=0;y<e.outWidth;++y){for(var b=y*i-l,x=b;x<0;)x+=o;for(var w=Math.min(e.inWidth,u+b),C=Number.NEGATIVE_INFINITY,N=-1,S=g;S<v;S+=a)for(var E=S-m,O=x;O<w;O+=o){var I=O-b,k=p.get(h,S,O,f);k>C&&(C=k,N=E*u+I)}n.set(N,h,d,y,f)}}return n.toTensor()},e.prototype.maxPoolBackprop=function(t,e,n,r){Bl([e,n],"maxPoolBackprop");for(var i=this.maxPoolPositions(e,r),a=r.strideHeight,o=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,p=l-1-r.padInfo.left,h=c-1-r.padInfo.top,f=Kn(e.shape,"float32"),d=this.bufferSync(i),m=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var v=0;v<r.inChannels;++v)for(var y=0;y<r.inHeight;++y)for(var b=0;b<r.inWidth;++b){for(var x=y-h,w=b-p,C=0,N=0;N<c;N+=s){var S=(x+N)/a;if(!(S<0||S>=r.outHeight||Math.floor(S)!==S))for(var E=0;E<l;E+=u){var O=(w+E)/o;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var I=c*l-1-d.get(g,S,O,v)===N*l+E?1:0;0!==I&&(C+=m.get(g,S,O,v)*I)}}}f.set(C,g,y,b,v)}return f.toTensor()},e.prototype.avgPoolBackprop=function(t,e,n){Bl([t,e],"avgPoolBackprop");for(var r=n.strideHeight,i=n.strideWidth,a=n.filterHeight,o=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,p=l-1-n.padInfo.left,h=c-1-n.padInfo.top,f=Kn(e.shape,"float32"),d=1/(a*o),m=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var v=0;v<n.inChannels;++v)for(var y=0;y<n.inHeight;++y)for(var b=0;b<n.inWidth;++b){for(var x=y-h,w=b-p,C=0,N=0;N<c;N+=s){var S=(x+N)/r;if(!(S<0||S>=n.outHeight||Math.floor(S)!==S))for(var E=0;E<l;E+=u){var O=(w+E)/i;O<0||O>=n.outWidth||Math.floor(O)!==O||(C+=m.get(g,S,O,v))}}f.set(C*d,g,y,b,v)}return f.toTensor()},e.prototype.pool3d=function(t,e,n){Bl(t,"pool3d");for(var r=e.strideDepth,i=e.strideHeight,a=e.strideWidth,o=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.front,f=e.padInfo.top,d=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),v=Kn(e.outShape,t.dtype),y=v.values,b=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],x=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],N=0;N<e.batchSize;++N)for(var S=N*b,E=N*t.strides[0],O=0;O<e.inChannels;++O)for(var I=0;I<e.outDepth;++I){for(var k=I*r-h,A=k;A<0;)A+=o;for(var R=Math.min(e.inDepth,c+k),T=S+I*x,D=0;D<e.outHeight;++D){for(var _=D*i-f,F=_;F<0;)F+=s;for(var M=Math.min(e.inHeight,l+_),z=T+D*w,L=0;L<e.outWidth;++L){for(var B=L*a-d,P=B;P<0;)P+=u;for(var j=Math.min(e.inWidth,p+B),V=z+L*C,W=m,U=0,G=0,q=A;q<R;q+=o){for(var H=E+q*t.strides[1],K=F;K<M;K+=s){for(var X=H+K*t.strides[2],Y=P;Y<j;Y+=u){var $=g[X+Y*t.strides[3]+O];if("max"===n&&$>W?W=$:"avg"===n&&(U+=$,G++),isNaN(W))break}if(isNaN(W))break}if(isNaN(W))break}y[V+O]="avg"===n?U/G:W}}}return v.toTensor()},e.prototype.avgPool3d=function(t,e){return Bl(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},e.prototype.avgPool3dBackprop=function(t,e,n){Bl([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,i=n.strideHeight,a=n.strideWidth,o=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,p=n.dilationWidth,h=n.effectiveFilterDepth,f=n.effectiveFilterHeight,d=n.effectiveFilterWidth,m=h-1-n.padInfo.front,g=d-1-n.padInfo.left,v=f-1-n.padInfo.top,y=Kn(e.shape,"float32"),b=1/(o*s*u),x=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var N=0;N<n.inDepth;++N)for(var S=0;S<n.inHeight;++S)for(var E=0;E<n.inWidth;++E){for(var O=N-m,I=S-v,k=E-g,A=0,R=0;R<h;R+=c){var T=(O+R)/r;if(!(T<0||T>=n.outDepth||Math.floor(T)!==T))for(var D=0;D<f;D+=l){var _=(I+D)/i;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var F=0;F<d;F+=p){var M=(k+F)/a;M<0||M>=n.outWidth||Math.floor(M)!==M||(A+=x.get(w,T,_,M,C))}}}y.set(A*b,w,N,S,E,C)}return y.toTensor()},e.prototype.maxPool3d=function(t,e){return Bl(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},e.prototype.maxPool3dPositions=function(t,e){for(var n=Kn(e.outShape,"int32"),r=e.strideDepth,i=e.strideHeight,a=e.strideWidth,o=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.front,f=e.padInfo.top,d=e.padInfo.left,m=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var v=0;v<e.inChannels;++v)for(var y=0;y<e.outDepth;++y){for(var b=y*r-h,x=b;x<0;)x+=o;for(var w=Math.min(e.inDepth,c+b),C=0;C<e.outHeight;++C){for(var N=C*i-f,S=N;S<0;)S+=s;for(var E=Math.min(e.inHeight,l+N),O=0;O<e.outWidth;++O){for(var I=O*a-d,k=I;k<0;)k+=u;for(var A=Math.min(e.inWidth,p+I),R=Number.NEGATIVE_INFINITY,T=-1,D=x;D<w;D+=o)for(var _=D-b,F=S;F<E;F+=s)for(var M=F-N,z=k;z<A;z+=u){var L=z-I,B=m.get(g,D,F,z,v);B>=R&&(R=B,T=_*l*p+M*l+L)}n.set(T,g,y,C,O,v)}}}return n.toTensor()},e.prototype.maxPool3dBackprop=function(t,e,n,r){Bl([e,n],"maxPool3dBackprop");for(var i=this.maxPool3dPositions(e,r),a=r.strideDepth,o=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,p=r.effectiveFilterDepth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,d=p-1-r.padInfo.front,m=f-1-r.padInfo.left,g=h-1-r.padInfo.top,v=Kn(e.shape,"float32"),y=this.bufferSync(i),b=this.bufferSync(t),x=0;x<r.batchSize;++x)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var N=0;N<r.inHeight;++N)for(var S=0;S<r.inWidth;++S){for(var E=C-d,O=N-g,I=S-m,k=0,A=0;A<p;A+=u){var R=(E+A)/a;if(!(R<0||R>=r.outDepth||Math.floor(R)!==R))for(var T=0;T<h;T+=c){var D=(O+T)/o;if(!(D<0||D>=r.outHeight||Math.floor(D)!==D))for(var _=0;_<f;_+=l){var F=(I+_)/s;if(!(F<0||F>=r.outWidth||Math.floor(F)!==F)){var M=p*h*f-1-y.get(x,R,D,F,w)===A*h*f+T*f+_?1:0;0!==M&&(k+=b.get(x,R,D,F,w)*M)}}}}v.set(k,x,C,N,S,w)}return v.toTensor()},e.prototype.cast=function(t,e){return ii(t,e,this)},e.prototype.reshape=function(t,e){return ai(t,e)},e.prototype.avgPool=function(t,e){return Bl(t,"avgPool"),this.pool(t,e,"avg").toFloat()},e.prototype.resizeBilinear=function(t,e,n,r){Bl(t,"resizeBilinear");for(var i=t.shape,a=i[0],o=i[1],s=i[2],u=i[3],c=this.readSync(t.dataId),l=new Float32Array(O([a,e,n,u])),p=[r&&e>1?o-1:o,r&&n>1?s-1:s],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],f=0,d=p[0]/h[0],m=p[1]/h[1],g=0;g<a;g++)for(var v=0;v<e;v++)for(var y=d*v,b=Math.floor(y),x=y-b,w=Math.min(o-1,Math.ceil(y)),C=g*t.strides[0]+b*t.strides[1],N=g*t.strides[0]+w*t.strides[1],S=0;S<n;S++)for(var E=m*S,I=Math.floor(E),k=E-I,A=Math.min(s-1,Math.ceil(E)),R=C+I*t.strides[2],T=N+I*t.strides[2],D=C+A*t.strides[2],_=N+A*t.strides[2],F=0;F<u;F++){var M=c[R+F],z=c[T+F],L=M+(c[D+F]-M)*k,B=L+(z+(c[_+F]-z)*k-L)*x;l[f++]=B}return dn(l,[a,e,n,u])},e.prototype.resizeBilinearBackprop=function(t,e,n){Bl([t,e],"resizeBilinearBackprop");for(var r=e.shape,i=r[0],a=r[1],o=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],p=new Float32Array(i*a*o*s),h=[n&&c>1?a-1:a,n&&l>1?o-1:o],f=[n&&c>1?c-1:c,n&&l>1?l-1:l],d=h[0]/f[0],m=h[1]/f[1],g=this.readSync(t.dataId),v=0,y=0;y<i;y++)for(var b=y*e.strides[0],x=0;x<c;x++)for(var w=x*d,C=Math.floor(w),N=Math.min(Math.ceil(w),a-1),S=b+C*e.strides[1],E=b+N*e.strides[1],O=w-C,I=1-O,k=0;k<l;k++)for(var A=k*m,R=Math.floor(A),T=Math.min(Math.ceil(A),o-1),D=A-R,_=1-D,F=S+R*e.strides[2],M=S+T*e.strides[2],z=E+R*e.strides[2],L=E+T*e.strides[2],B=I*_,P=I*D,j=O*_,V=O*D,W=0;W<s;W++){var U=g[v++];p[F+W]+=U*B,p[M+W]+=U*P,p[z+W]+=U*j,p[L+W]+=U*V}return xn(p,[i,o,a,s],e.dtype)},e.prototype.resizeNearestNeighbor=function(t,e,n,r){Bl(t,"resizeNearestNeighbor");for(var i=t.shape,a=i[0],o=i[1],s=i[2],u=i[3],c=this.readSync(t.dataId),l=new Float32Array(a*e*n*u),p=[r&&e>1?o-1:o,r&&n>1?s-1:s],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],f=p[0]/h[0],d=p[1]/h[1],m=0,g=0;g<a;g++)for(var v=g*t.strides[0],y=0;y<e;y++)for(var b=f*y,x=v+Math.min(o-1,r?Math.round(b):Math.floor(b))*t.strides[1],w=0;w<n;w++)for(var C=d*w,N=x+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],S=0;S<u;S++){var E=c[N+S];l[m++]=E}return dn(l,[a,e,n,u],t.dtype)},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){Bl([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,i=r[0],a=r[1],o=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],p=new Float32Array(i*a*o*s),h=this.readSync(t.dataId),f=[n&&c>1?a-1:a,n&&l>1?o-1:o],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],m=f[0]/d[0],g=f[1]/d[1],v=1/m,y=1/g,b=2*Math.ceil(v)+2,x=2*Math.ceil(y)+2,w=0;w<i;w++)for(var C=w*e.strides[0],N=0;N<a;N++)for(var S=C+N*e.strides[1],E=Math.floor(N*v),O=Math.floor(E-b/2),I=0;I<o;I++)for(var k=S+I*e.strides[2],A=Math.floor(I*y),R=Math.floor(A-x/2),T=0;T<s;T++){for(var D=0,_=0;_<b;_++){var F=_+O;if(!(F<0||F>=c)){var M=C+F*t.strides[1],z=F*m;if(N===Math.min(a-1,n?Math.round(z):Math.floor(z)))for(var L=0;L<x;L++){var B=L+R;if(!(B<0||B>=l)){var P=M+B*t.strides[2],j=B*g;I===Math.min(o-1,n?Math.round(j):Math.floor(j))&&(D+=h[P+T])}}}}p[k+T]=D}return xn(p,e.shape,e.dtype)},e.prototype.batchNormalization=function(t,e,n,r,i,a){Bl([t,e,n,i,a],"batchNorm");for(var o=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=i?this.readSync(i.dataId):new Float32Array([1]),l=a?this.readSync(a.dataId):new Float32Array([0]),p=new Float32Array(o.length),h=l.length,f=c.length,d=u.length,m=s.length,g=0,v=0,y=0,b=0,x=0;x<o.length;++x)p[x]=l[g++]+(o[x]-s[v++])*c[y++]/Math.sqrt(u[b++]+r),g>=h&&(g=0),v>=m&&(v=0),y>=f&&(y=0),b>=d&&(b=0);return xn(p,t.shape)},e.prototype.localResponseNormalization4D=function(t,e,n,r,i){Bl(t,"localResponseNormalization4D");var a=t.shape[3],o=a-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),i=t-n+Math.min(n+e,o),u=0;r<=i;r++){var c=s[r];u+=c*c}return u}for(var p=0;p<u;p++){var h=l(p),f=s[p]*Math.pow(n+r*h,-i);c[p]=f}return xn(c,t.shape)},e.prototype.LRNGrad=function(t,e,n,r,i,a,o){Bl(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),p=new Float32Array(t.size),h=t.size,f=0;f<h;f++){for(var d=f%s,m=f-d+Math.max(0,d-r),g=f-d+Math.min(s,d+r+1),v=0,y=m;y<g;y++)v+=Math.pow(c[y],2);for(v=a*v+i,y=m;y<g;y++){var b=-2*a*o*c[y]*l[f]/v;f===y&&(b+=Math.pow(v,-o)),b*=u[f],p[y]+=b}}return xn(p,t.shape)},e.prototype.multinomial=function(t,e,n,r){Bl(t,"multinomial");for(var i=e?t:Br(t),a=i.shape[0],o=i.shape[1],s=Nn([a,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(i.dataId),l=0;l<a;++l){var p=l*o,h=new Float32Array(o-1);h[0]=c[p];for(var f=1;f<h.length;++f)h[f]=h[f-1]+c[p+f];for(var d=Un(r.toString()),m=l*n,g=0;g<n;++g){var v=d();u[m+g]=h.length;for(var y=0;y<h.length;y++)if(v<h[y]){u[m+g]=y;break}}}return s},e.prototype.oneHot=function(t,e,n,r){Bl(t,"oneHot");var i=new Float32Array(t.size*e);i.fill(r);for(var a=this.readSync(t.dataId),o=0;o<t.size;++o)a[o]>=0&&a[o]<e&&(i[o*e+a[o]]=n);return yn(i,[t.size,e],"int32")},e.prototype.nonMaxSuppression=function(t,e,n,r,i){return Bl(t,"nonMaxSuppression"),pi(this.readSync(t.dataId),this.readSync(e.dataId),n,r,i)},e.prototype.fft=function(t){return this.fftBatch(t,!1)},e.prototype.ifft=function(t){return this.fftBatch(t,!0)},e.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],i=Kn(t.shape,"float32"),a=Kn(t.shape,"float32"),o=hn(t).as2D(n,r),s=fn(t).as2D(n,r),u=0;u<n;u++)for(var c=o.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),p=pn(c,l),h=this.readSync(this.fftImpl(p,e).dataId),f=0;f<r;f++){var d=ui(h,f);i.values[u*r+f]=d.real,a.values[u*r+f]=d.imag}return pn(i.toTensor(),a.toTensor()).as2D(n,r)},e.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var i=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(i=pn(hn(i).div(gn(r)),fn(i).div(gn(r)))),i}var a=this.readSync(t.dataId),o=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return pn(o.real,o.imag).as2D(t.shape[0],t.shape[1])},e.prototype.isExponentOf2=function(t){return 0==(t&t-1)},e.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),i=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),i=0;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}(r),o=pn(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),i=2;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}(r),u=pn(s.real,s.imag).as1D();o=this.fftRadix2(o,i,n),u=this.fftRadix2(u,i,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),i=0;i<Math.ceil(t/2);i++){var a=(e?2:-2)*Math.PI*(i/t);n[i]=Math.cos(a),r[i]=Math.sin(a)}return{real:n,imag:r}}(e,n),l=pn(c.real,c.imag).mul(u),p=o.add(l),h=o.sub(l),f=hn(p).concat(hn(h)),d=fn(p).concat(fn(h));return pn(f,d).as1D()},e.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),i=0;i<e;i++){for(var a=0,o=0,s=0;s<e;s++){var u=li(i*s,e,n),c=ui(t,s);a+=c.real*u.real-c.imag*u.imag,o+=c.real*u.imag+c.imag*u.real}n&&(a/=e,o/=e),ci(r,a,o,i)}return r},e.prototype.depthToSpace=function(t,e,n){C("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),C(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],i=t.shape[1],a=t.shape[2],o=t.shape[3],s=i*e,u=a*e,c=o/(e*e),l=this.readSync(t.dataId),p=new Float32Array(r*s*u*c),h=0,f=0;f<r;++f)for(var d=0;d<s;++d)for(var m=Math.floor(d/e),g=d%e,v=0;v<u;++v)for(var y=Math.floor(v/e),b=(g*e+v%e)*c,x=0;x<c;++x){var w=x+b+o*(y+a*(m+i*f));p[h++]=l[w]}return xn(p,[r,s,u,c])},e.prototype.broadcastedBinaryOp=function(t,e,n,r){var i=qr(t.shape,e.shape),a=Kn(i,n),o=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Ur(t.shape,i),c=Ur(e.shape,i),l=a.values;if(u.length+c.length===0)for(var p=0;p<l.length;++p)l[p]=r(o[p%o.length],s[p%s.length]);else{var h=this.bufferSync(t),f=this.bufferSync(e),d=function(n){var i=a.indexToLoc(n),p=i.slice(-t.rank);u.forEach((function(t){return p[t]=0}));var d=h.locToIndex(p),m=i.slice(-e.rank);c.forEach((function(t){return m[t]=0}));var g=f.locToIndex(m);l[n]=r(o[d],s[g])};for(p=0;p<l.length;++p)d(p)}return a.toTensor()},e.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=qr(t.shape,e.shape),i=Kn(r,"float32"),a=Kn(r,"float32"),o=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Ur(t.shape,r),c=Ur(e.shape,r),l=i.values,p=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;h++){var f=h%o.length,d=h%s.length,m=n(o[2*f],o[2*f+1],s[2*d],s[2*d+1]);l[h]=m.real,p[h]=m.imag}else{var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),v=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var a=i.indexToLoc(r),h=a.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var f=g.locToIndex(h),d=a.slice(-e.rank);c.forEach((function(t){return d[t]=0}));var m=v.locToIndex(d),y=n(o[2*f],o[2*f+1],s[2*m],s[2*m+1]);l[r]=y.real,p[r]=y.imag};for(h=0;h<l.length;h++)y(h)}return this.complex(i.toTensor(),a.toTensor())},e.prototype.split=function(t,e,n){return fi(t,e,n)},e.prototype.dispose=function(){},e.prototype.floatPrecision=function(){return 32},e.prototype.epsilon=function(){return 1e-7},e.prototype.cropAndResize=function(t,e,n,r,i,a){for(var o=t.shape,s=o[0],u=o[1],c=o[2],l=o[3],p=e.shape[0],h=r[0],f=r[1],d=Kn([p,h,f,l],"float32"),m=this.readSync(e.dataId),g=this.readSync(n.dataId),v=this.readSync(t.dataId),y=t.strides,b=d.strides,x=0;x<p;x++){var w=4*x,C=m[w],N=m[w+1],S=m[w+2],E=m[w+3],O=g[x];if(!(O>=s))for(var I=h>1?(S-C)*(u-1)/(h-1):0,k=f>1?(E-N)*(c-1)/(f-1):0,A=0;A<h;A++){var R=h>1?C*(u-1)+A*I:.5*(C+S)*(u-1);if(R<0||R>u-1)for(var T=0;T<f;T++)for(var D=0;D<l;D++){var _=D+T*b[2]+A*b[1]+x*b[0];d.values[_]=a}else if("bilinear"===i){var F=Math.floor(R),M=Math.ceil(R),z=R-F;for(T=0;T<f;T++)if((q=f>1?N*(c-1)+T*k:.5*(N+E)*(c-1))<0||q>c-1)for(D=0;D<l;D++)_=D+T*b[2]+A*b[1]+x*b[0],d.values[_]=a;else{var L=Math.floor(q),B=Math.ceil(q),P=q-L;for(D=0;D<l;D++){var j=v[_=D+L*y[2]+F*y[1]+O*y[0]],V=v[_=D+B*y[2]+F*y[1]+O*y[0]],W=v[_=D+L*y[2]+M*y[1]+O*y[0]],U=j+(V-j)*P,G=W+(v[_=D+B*y[2]+M*y[1]+O*y[0]]-W)*P;_=D+T*b[2]+A*b[1]+x*b[0],d.values[_]=U+(G-U)*z}}}else for(T=0;T<f;++T){var q;if((q=f>1?N*(c-1)+T*k:.5*(N+E)*(c-1))<0||q>c-1)for(D=0;D<l;D++)_=D+T*b[2]+A*b[1]+x*b[0],d.values[_]=a;else{var H=Math.round(q),K=Math.round(R);for(D=0;D<l;D++){var X=D+H*y[2]+K*y[1]+O*y[0],Y=D+T*b[2]+A*b[1]+x*b[0];d.values[Y]=v[X]}}}}}return d.toTensor()},e.prototype.sparseToDense=function(t,e,n,r){var i=Ar(0,t,n),a=i.sliceRank,o=i.numUpdates,s=i.sliceSize,u=i.strides,c=i.outputSize;return this.scatter(t,e,n,c,s,o,a,u,r,!1)},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],i=Or(t,e),a=i[0],o=i[1],s=i[2],u=i[3];if(0===o)return dn([],a,t.dtype);for(var c=new dt([o,s],t.dtype),l=this.readSync(e.dataId),p=this.readSync(t.dataId),h=0;h<o;h++){for(var f=[],d=0,m=0;m<r;m++){var g=l[h*r+m];d+=g*u[m],f.push(g)}if(d<0||d>=t.size/s)throw new Error("Invalid indices: "+f+" does not index into "+t.shape);for(var v=0;v<s;v++)c.values[h*s+v]=p[d*s+v]}return c.toTensor().reshape(a)},e.prototype.scatterND=function(t,e,n){var r=Ar(0,t,n),i=r.sliceRank,a=r.numUpdates,o=r.sliceSize,s=r.strides,u=r.outputSize,c=gn(0);return this.scatter(t,e,n,u,o,a,i,s,c,!0)},e.prototype.fill=function(t,e,n){var r=L(n=n||K(e),O(t));return r.fill(e),Mt.makeTensor(r,t,n,this)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){var e=L(t.dtype,O(t.shape));return this.makeOutput(e,t.shape,t.dtype)},e.prototype.linspace=function(t,e,n){return oi(t,e,n)},e.prototype.scatter=function(t,e,n,r,i,a,o,s,u,c){var l=[r/i,i],p=this.readSync(t.dataId),h=this.readSync(e.dataId);if(0===r)return dn([],n,e.dtype);var f=new dt(l,e.dtype);f.values.fill(this.readSync(u.dataId)[0]);for(var d=0;d<a;d++){for(var m=[],g=0,v=0;v<o;v++){var y=p[d*o+v];m.push(y),g+=y*s[v]}if(g<0||g>=r/i)throw new Error("Invalid indices: "+m+" does not index into "+n);for(var b=0;b<i;b++)c?f.values[g*i+b]+=h[d*i+b]:f.values[g*i+b]=0===e.rank?h[0]:h[d*i+b]}return f.toTensor().reshape(n)},e}(Vr);Mt.registerBackend("cpu",(function(){return new jl}),1),g({kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,i=n;Bl(r,"square");for(var a=i.data.get(r.dataId).values,o=new Float32Array(a.length),s=0;s<a.length;++s){var u=a[s];o[s]=u*u}return{dataId:i.write(o,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}}),g({kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,i=n,a=new To(r.shape,"return x * x;");return i.runWebGLProgram(a,[r],r.dtype)}});var Vl,Wl=function(t){this.variableNames=["A"];var e=Ci(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},Ul=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var e=Ci(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    "};g({kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,i=e.pixels,a=r.numChannels,o="undefined"!=typeof HTMLVideoElement&&i instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&i instanceof HTMLImageElement,u=o?[i.videoWidth,i.videoHeight]:[i.width,i.height],c=u[0],l=u[1],h=[l,c],f=[l,c,a];(s||o)&&(null==Vl&&(Vl=document.createElement("canvas").getContext("2d")),Vl.canvas.width=c,Vl.canvas.height=l,Vl.drawImage(i,0,0,c,l),i=Vl.canvas);var d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=Pt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),i);var m=p().getBool("WEBGL_PACK")?new Ul(f):new Wl(f),g=n.runWebGLProgram(m,[d],"int32");return n.disposeData(d.dataId),g}});var Gl=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();p().get("IS_BROWSER")&&p().setPlatform("browser",new Gl);var ql,Hl=function(){function t(){this.util=n(13),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=p().global.fetch?p().global.fetch(t,e):(null==ql&&(ql=n(12)),ql(t,e))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();p().get("IS_NODE")&&p().setPlatform("node",new Hl);var Kl={float32:4,int32:4,uint16:2,uint8:1,bool:1},Xl=4;function Yl(t,e){for(var n={},r=0,i=function(e){var i=e.name,a=e.dtype,o=e.shape,s=O(o),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Kl[c.dtype],p=t.slice(r,r+s*l),h="uint8"===c.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===a)u=Float32Array.from(h,(function(t){return t*c.scale+c.min}));else{if("int32"!==a)throw new Error("Unsupported dtype in weight '"+i+"': "+a);u=Int32Array.from(h,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if("string"===a){var f=O(e.shape);u=[];for(var d=0;d<f;d++){var m=new Uint32Array(t.slice(r,r+Xl))[0];r+=Xl;var g=new Uint8Array(t.slice(r,r+m));u.push(g),r+=m}}else{var v=Kl[a];if(p=t.slice(r,r+s*v),"float32"===a)u=new Float32Array(p);else if("int32"===a)u=new Int32Array(p);else{if("bool"!==a)throw new Error("Unsupported dtype in weight '"+i+"': "+a);u=new Uint8Array(p)}r+=s*v}n[i]=dn(u,o,a)},a=0,o=e;a<o.length;a++)i(o[a]);return n}function $l(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),i=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),i),i+=t.byteLength})),r.buffer}var Jl=void 0!==i&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Zl(t){return Jl?i.byteLength(t):new Blob([t]).size}function Ql(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function tp(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function ep(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Zl(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Zl(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var np=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var i=[];return("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&i.push(n)})),i},t}(),rp="://",ip=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){C(null!=e,(function(){return"scheme must not be undefined or null."})),e.endsWith(rp)&&(e=e.slice(0,e.indexOf(rp))),C(e.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();C(null==r.managers[e],(function(){return"A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function ap(t){if(-1===t.indexOf(rp))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+ip.getSchemes().join(","));return{scheme:t.split(rp)[0],path:t.split(rp)[1]}}function op(t,e,n){return void 0===n&&(n=!1),u(this,void 0,void 0,(function(){var r,i,a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:return C(t!==e,(function(){return"Old path and new path are the same: '"+t+"'"})),C((r=np.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),C(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),i=r[0],C((a=np.getSaveHandlers(e)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+e+"."})),C(a.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."})),o=a[0],s=ap(t).scheme,u=ap(t).path,l=s===ap(t).scheme,[4,i.load()];case 1:return p=c.sent(),n&&l?[4,ip.getManager(s).removeModel(u)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,o.save(p)];case 4:return h=c.sent(),!n||l?[3,6]:[4,ip.getManager(s).removeModel(u)];case 5:c.sent(),c.label=6;case 6:return[2,h.modelArtifactsInfo]}}))}))}var sp="models_store",up="model_info_store";function cp(){if(!p().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function lp(t){var e=t.result;e.createObjectStore(sp,{keyPath:"modelPath"}),e.createObjectStore(up,{keyPath:"modelPath"})}var pp=function(){function t(t){if(this.indexedDB=cp(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var i=n.indexedDB.open("tensorflowjs",1);i.onupgradeneeded=function(){return lp(i)},i.onsuccess=function(){var a=i.result;if(null==e){var o=a.transaction(sp,"readonly"),s=o.objectStore(sp).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return a.close(),r(s.error)},o.oncomplete=function(){return a.close()}}else{var u,c=ep(e),l=a.transaction(up,"readwrite"),p=l.objectStore(up),h=p.put({modelPath:n.modelPath,modelArtifactsInfo:c});h.onsuccess=function(){var i=(u=a.transaction(sp,"readwrite")).objectStore(sp).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});i.onsuccess=function(){return t({modelArtifactsInfo:c})},i.onerror=function(t){var e=(p=l.objectStore(up)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(i.error)},e.onerror=function(t){return a.close(),r(i.error)}}},h.onerror=function(t){return a.close(),r(h.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()}}}},i.onerror=function(t){return r(i.error)}}))},t.URL_SCHEME="indexeddb://",t}(),hp=function(t){return p().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(pp.URL_SCHEME)?(e=t.slice(pp.URL_SCHEME.length),new pp(e)):null;var e};np.registerSaveRouter(hp),np.registerLoadRouter(hp);var fp=function(){function t(){this.indexedDB=cp()}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t=this;return c(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return lp(r)},r.onsuccess=function(){var t=r.result,i=t.transaction(up,"readonly"),a=i.objectStore(up).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var i=r[n];t[i.modelPath]=i.modelArtifactsInfo}e(t)},a.onerror=function(e){return t.close(),n(a.error)},i.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){var r;return t=(r=t).startsWith(pp.URL_SCHEME)?r.slice(pp.URL_SCHEME.length):r,[2,new Promise((function(n,r){var i=e.indexedDB.open("tensorflowjs",1);i.onupgradeneeded=function(){return lp(i)},i.onsuccess=function(){var e,a=i.result,o=a.transaction(up,"readwrite"),s=o.objectStore(up),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var i=s.delete(t),o=function(){var i=(e=a.transaction(sp,"readwrite")).objectStore(sp).delete(t);i.onsuccess=function(){return n(u.result.modelArtifactsInfo)},i.onerror=function(t){return r(u.error)}};i.onsuccess=o,i.onerror=function(t){return o(),a.close(),r(u.error)}},u.onerror=function(t){return a.close(),r(u.error)},o.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()}}},i.onerror=function(t){return r(i.error)}}))]}))}))},t}();if(p().getBool("IS_BROWSER"))try{ip.registerManager(pp.URL_SCHEME,new fp)}catch(o){}var dp="/",mp="tensorflowjs_models",gp="info",vp="model_topology",yp="weight_specs",bp="weight_data",xp="model_metadata";function wp(t){return{info:[mp,t,gp].join(dp),topology:[mp,t,vp].join(dp),weightSpecs:[mp,t,yp].join(dp),weightData:[mp,t,bp].join(dp),modelMetadata:[mp,t,xp].join(dp)}}function Cp(t){var e=t.split(dp);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(dp)}var Np=function(){function t(t){if(!p().getBool("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=wp(this.modelPath)}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(a){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=ep(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(o=t.weightData,Jl?i.from(o).toString("base64"):btoa(String.fromCharCode.apply(null,new Uint8Array(o))))),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}var o;return[2]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,a,o,s;return c(this,(function(u){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(o=JSON.parse(a),e.format=o.format,e.generatedBy=o.generatedBy,e.convertedBy=o.convertedBy,e.userDefinedMetadata=o.userDefinedMetadata),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(Jl){var e=i.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),a=0;a<n.length;++a)r.set([n.charCodeAt(a)],a);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),Sp=function(t){return p().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Np.URL_SCHEME)?(e=t.slice(Np.URL_SCHEME.length),new Np(e)):null;var e};np.registerSaveRouter(Sp),np.registerLoadRouter(Sp);var Ep=function(){function t(){C(p().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),C(void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a;return c(this,(function(o){for(t={},e=mp+dp,n=dp+gp,r=0;r<this.LS.length;++r)(i=this.LS.key(r)).startsWith(e)&&i.endsWith(n)&&(a=Cp(i),t[a]=JSON.parse(this.LS.getItem(i)));return[2,t]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){var i;if(t=(i=t).startsWith(Np.URL_SCHEME)?i.slice(Np.URL_SCHEME.length):i,e=wp(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(p().getBool("IS_BROWSER"))try{ip.registerManager(Np.URL_SCHEME,new Ep)}catch(o){}var Op="model",Ip=".json",kp=".weights.bin";function Ap(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Rp=function(){function t(e){if(!p().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Op),this.modelTopologyFileName=e+Ip,this.weightDataFileName=e+kp}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,i,a,o;return c(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},i=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,a.href=i,[4,Ap((function(){return a.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==t.weightData?[3,4]:((o=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,o.href=e,[4,Ap((function(){return o.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:ep(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),Tp=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n=this;return c(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,i){var a=new FileReader;a.onload=function(a){var o=JSON.parse(a.target.result),s=o.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=o.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void i(t)}var l=[],p=[],h=[];u.forEach((function(t){t.paths.forEach((function(t){p.push(t),h.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,i=p.indexOf(t);h[i]=n,-1===h.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Ql(h),format:o.format,generatedBy:o.generatedBy,convertedBy:o.convertedBy,userDefinedMetadata:o.userDefinedMetadata})},e.onerror=function(e){return i("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t])}))}))}else i(new Error("weightManifest field is missing from file "+t.name))}else i(new Error("modelTopology field is missing from file "+t.name))},a.onerror=function(e){return i("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},a.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return tp(t.name)})),i={},a=0,o=t;a<o.length;a++)o[a].paths.forEach((function(t){var a=tp(t);if(-1!==n.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: '"+a+"'");if(n.push(a),-1===r.indexOf(a))throw new Error("Weight file with basename '"+a+"' is not provided.");i[t]=e[r.indexOf(a)]}));if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return i},t}();function Dp(t,e,n,r){!function(t){C(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,e){C(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),C(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+e})),C(e>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}))}(n=null==n?0:n,r=null==r?1:r);var i=0;return Promise.all(t.map((function(a){return a.then((function(a){var o=n+ ++i/t.length*(r-n);return e(o),a})),a})))}function _p(t,e){return u(this,void 0,void 0,(function(){var n,r,i,a,o,s,u,l,h;return c(this,(function(c){switch(c.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?p().platform.fetch:e.fetchFunc,r=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),i=0,a=.5,null!=e.onProgress?[3,2]:[4,Promise.all(r)];case 1:return o=c.sent(),[3,4];case 2:return[4,Dp(r,e.onProgress,i,a)];case 3:o=c.sent(),c.label=4;case 4:return s=o.map((function(t){return t.arrayBuffer()})),u=.5,l=1,null!=e.onProgress?[3,6]:[4,Promise.all(s)];case 5:return h=c.sent(),[3,8];case 6:return[4,Dp(s,e.onProgress,u,l)];case 7:h=c.sent(),c.label=8;case 8:return[2,h]}}))}))}function Fp(t){var e=this;return function(n,r,i){return void 0===r&&(r=""),u(e,void 0,void 0,(function(){var e,a,o,s,u,l,p,h,f,d;return c(this,(function(c){switch(c.label){case 0:if(e=n.map((function(){return!1})),a={},o=null!=i?i.map((function(){return!1})):[],s=[],n.forEach((function(t,n){var r=0;t.weights.forEach((function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,c=Kl[u]*O(t.shape),l=function(){e[n]=!0,null==a[n]&&(a[n]=[]),a[n].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=i?i.forEach((function(e,n){e===t.name&&(l(),o[n]=!0)})):l(),s.push(t.name),r+=c}))})),!o.every((function(t){return t})))throw u=i.filter((function(t,e){return!o[e]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),p=[],l.forEach((function(t){n[t].paths.forEach((function(t){var e=r+(r.endsWith("/")?"":"/")+t;p.push(e)}))})),[4,t(p)];case 1:return h=c.sent(),f={},d=0,l.forEach((function(t){for(var e=n[t].paths.length,r=0,i=0;i<e;i++)r+=h[d+i].byteLength;for(var o=new ArrayBuffer(r),s=new Uint8Array(o),u=0,c=0;c<e;c++){var l=new Uint8Array(h[d+c]);s.set(l,u),u+=l.byteLength}a[t].forEach((function(t){var e=Yl(o.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)f[n]=e[n]})),d+=e})),[2,f]}}))}))}}np.registerSaveRouter((function(t){return p().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Rp.URL_SCHEME)?(void 0===(e=t.slice(Rp.URL_SCHEME.length))&&(e="model"),new Rp(e)):null;var e}));var Mp=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(C("function"==typeof e.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=p().platform.fetch,C(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&C(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,i;return c(this,(function(a){switch(a.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((i=a.sent()).ok)return[2,{modelArtifactsInfo:ep(t),responses:[i]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+i.status+".")}}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=c.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");c.label=2;case 2:return c.trys.push([2,4,,5]),[4,t.json()];case 3:return e=c.sent(),[3,5];case 4:throw c.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=e.modelTopology,i=e.weightsManifest,a=e.generatedBy,o=e.convertedBy,s=e.format,u=e.userDefinedMetadata,null==r&&null==i)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==i?[3,7]:[4,this.loadWeights(i)];case 6:h=c.sent(),l=h[0],p=h[1],c.label=7;case 7:return[2,{modelTopology:r,weightSpecs:l,weightData:p,userDefinedMetadata:u,generatedBy:a,convertedBy:o,format:s}]}}))}))},t.prototype.loadWeights=function(t){return u(this,void 0,void 0,(function(){var e,n,r,i,a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],i=n[1],a=this.weightPathPrefix||r,o=[],s=0,u=t;s<u.length;s++)l=u[s],o.push.apply(o,l.weights);return p=[],t.forEach((function(t){t.paths.forEach((function(t){p.push(a+t+i)}))})),[4,_p(p,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return h=c.sent(),[2,[o,Ql(h)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function zp(t){return null!=t.match(Mp.URL_SCHEME_REGEX)}var Lp=function(t,e){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return zp(t)})):zp(t))?Bp(t,{onProgress:e}):null};function Bp(t,e){return new Mp(t,e)}np.registerSaveRouter(Lp),np.registerLoadRouter(Lp);var Pp,jp=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Vp=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}(),Wp=Object.freeze({browserFiles:function(t){return new Tp(t)},browserHTTPRequest:function(t,e){return Bp(t,e)},concatenateArrayBuffers:Ql,decodeWeights:Yl,encodeWeights:function(t,e){return u(this,void 0,void 0,(function(){var n,r,i,a,o,s=this;return c(this,(function(l){switch(l.label){case 0:for(n=[],r=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),a=function(a){var o=i[a],l=Array.isArray(t)?t[a].tensor:t[o];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+o+"': "+l.dtype);var p={name:o,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var h=new Promise((function(t){return u(s,void 0,void 0,(function(){var e,n,r,i,a,o,s;return c(this,(function(u){switch(u.label){case 0:return[4,l.bytes()];case 1:for(e=u.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Xl*e.length,r=new Uint8Array(n),i=0,a=0;a<e.length;a++)o=e[a],s=new Uint8Array(new Uint32Array([o.length]).buffer),r.set(s,i),i+=Xl,r.set(o,i),i+=o.length;return t(r),[2]}}))}))}));r.push(h)}else r.push(l.data());null!=e&&(p.group=e),n.push(p)},o=0;o<i.length;++o)a(o);return[4,Promise.all(r)];case 1:return[2,{data:$l(l.sent()),specs:n}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new jp(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new jp({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new jp({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return np.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:ep,getSaveHandlers:function(t){return np.getSaveHandlers(t)},http:Bp,isHTTPScheme:zp,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),u(this,void 0,void 0,(function(){return c(this,(function(i){return[2,Fp((function(t){return _p(t,{requestInit:r})}))(t,e,n)]}))}))},registerLoadRouter:function(t){return np.registerLoadRouter(t)},registerSaveRouter:function(t){return np.registerSaveRouter(t)},weightsLoaderFactory:Fp,withSaveHandler:function(t){return new Vp(t)},copyModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,op(t,e,!1)]}))}))},listModels:function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,o;return c(this,(function(s){switch(s.label){case 0:t=ip.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(i=r[n],[4,ip.getManager(i).listModels()]):[3,4];case 2:for(o in a=s.sent())e[i+rp+o]=a[o];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,op(t,e,!0)]}))}))},removeModel:function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=ap(t),[2,ip.getManager(e.scheme).removeModel(e.path)]}))}))}}),Up=ln({confusionMatrix_:function(t,e,n){var r=Je(t,"labels","confusionMatrix"),i=Je(e,"predictions","confusionMatrix");C(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),C(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),C(1===i.rank,(function(){return"Expected the rank of predictions to be 1, but got "+i.rank})),C(r.shape[0]===i.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+i.shape[0]+". Labels and predictions should have the same number of elements."})),C(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var a=rr(r.asType("int32"),n),o=rr(i.asType("int32"),n);return a.transpose().matMul(o).asType("int32")}}),Gp=(Object.freeze({confusionMatrix:Up}),ln({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n=!1,r=!1,i=!1,a=!1,o=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)i=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);o=!0}if(i&&i&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=d("FromPixels",Mt.backendName))return Mt.runKernel("FromPixels",{pixels:t},{numChannels:e});var s,u,c=i?[t.videoWidth,t.videoHeight]:[t.width,t.height],l=c[0],p=c[1];if(o?s=t.getContext("2d").getImageData(0,0,l,p).data:r||n?s=t.data:(a||i)&&(null==Pp&&(Pp=document.createElement("canvas").getContext("2d")),Pp.canvas.width=l,Pp.canvas.height=p,Pp.drawImage(t,0,0,l,p),s=Pp.getImageData(0,0,l,p).data),4===e)u=new Int32Array(s);else{var h=l*p;u=new Int32Array(h*e);for(var f=0;f<h;f++)for(var m=0;m<e;++m)u[f*e+m]=s[4*f+m]}return bn(u,[p,l,e],"int32")}})),qp=Object.freeze({toPixels:function(t,e){return u(this,void 0,void 0,(function(){var n,r,i,a,o,s,u,l,p,h,f,d,m,g,v,y,b,x,w,C,N,S,E;return c(this,(function(c){switch(c.label){case 0:if(n=Je(t,"img","toPixels"),t instanceof yt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),i=r[0],a=r[1],(o=2===n.rank?1:n.shape[2])>4||2===o)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+o);return[4,n.data()];case 1:return s=c.sent(),u=n.min(),l=n.max(),[4,Promise.all([u.data(),l.data()])];case 2:if(p=c.sent(),h=p[0],f=p[1],d=h[0],m=f[0],u.dispose(),l.dispose(),"float32"===n.dtype){if(d<0||m>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+d+" - "+m+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(d<0||m>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+d+" - "+m+"].")}for(g="float32"===n.dtype?255:1,v=new Uint8ClampedArray(a*i*4),y=0;y<i*a;++y)b=void 0,x=void 0,w=void 0,C=void 0,1===o?(b=s[y]*g,x=s[y]*g,w=s[y]*g,C=255):3===o?(b=s[3*y]*g,x=s[3*y+1]*g,w=s[3*y+2]*g,C=255):4===o&&(b=s[4*y]*g,x=s[4*y+1]*g,w=s[4*y+2]*g,C=s[4*y+3]*g),v[0+(N=4*y)]=Math.round(b),v[N+1]=Math.round(x),v[N+2]=Math.round(w),v[N+3]=Math.round(C);return null!=e&&(e.width=a,e.height=i,S=e.getContext("2d"),E=new ImageData(v,a,i),S.putImageData(E,0,0)),n!==t&&n.dispose(),[2,v]}}))}))},fromPixels:Gp}),Hp=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Kp=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Xp(t){C(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),C("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),C(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Kp.register(t)}var Yp=Object.freeze({Serializable:Hp,SerializationMap:Kp,registerClass:Xp}),$p=.001,Jp=.1;function Zp(){return 32===Mt.backend.floatPrecision()?$p:Jp}function Qp(t,e,n){var r=!0;if((V(t)||V(e))&&(r=!1),V(t)&&V(e)&&(r=!0),r){var i=t.constructor.name,a=e.constructor.name;if(i!==a)throw new Error("Arrays are of different type. Actual: "+i+". Expected: "+a)}if(Array.isArray(t)&&Array.isArray(e)){var o=Ye(t),s=Ye(e);if(!I(o,s))throw new Error("Arrays have different shapes. Actual: ["+o+"]. Expected: ["+s+"]")}var u=V(t)?t:E(t),c=V(e)?e:E(e);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var p=u[l],h=c[l];if(!n(p,h))throw new Error("Arrays differ: actual["+l+"] = "+p+", expected["+l+"] = "+h+".\nActual:   "+u+".\nExpected: "+c+".")}}function th(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}Object.freeze({TEST_EPSILON_FLOAT16:Jp,expectArraysClose:function(t,e,n){return null==n&&(n=Zp()),Qp(t,e,(function(t,e){return th(t,e,n)}))},testEpsilon:Zp,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return G(t)||G(t[0])||G(e)||G(e[0])?Qp(t,n,(function(t,e){return t==e})):Qp(t,e,(function(t,e){return th(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=Zp()),!th(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});var eh="1.4.0",nh=(Object.freeze({gpgpu_util:Ua,webgl_util:je,forceHalfFloat:function(){p().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:Qo,setWebGLContext:Ut,GPGPUContext:Ga}),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),i=r.value,a=r.grads;if(null!=n){var o=n.map((function(t){return{name:t.name,tensor:a[t.name]}}));this.applyGradients(o)}else this.applyGradients(a);return qe(a),e?i:(i.dispose(),null)},Object.defineProperty(e.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),e.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},e.prototype.computeGradients=function(t,e){return function(t,e){C(X(t),(function(){return"The f passed in variableGrads(f) must be a function"})),C(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof St})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Mt.registeredVariables)e.push(Mt.registeredVariables[r]);var i=n?e.filter((function(t){return!t.trainable})):null,a=e.length;C((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+a+" variables is trainable."}));var o=Mt.gradients(t,e,null,!0),s=o.value,u=o.grads;C(u.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),C(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=i&&i.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}(t,e)},e.prototype.dispose=function(){null!=this.iterations_&&qe(this.iterations_)},e.prototype.saveIterations=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:gn(this.iterations_,"int32")}]}))}))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},e.prototype.extractIterations=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},e}(Hp));Object.defineProperty(nh,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var rh=function(t){function e(e,n,r){void 0===r&&(r=null);var i=t.call(this)||this;return i.learningRate=e,i.rho=n,i.epsilon=r,i.accumulatedGrads=[],i.accumulatedUpdates=[],null==r&&(i.epsilon=Mt.backend.epsilon()),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var i=Mt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:Ge((function(){return kn(i).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:Ge((function(){return kn(i).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var o=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Ge((function(){var t=o.mul(e.rho).add(a.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(o.add(e.epsilon).sqrt()).mul(a),r=s.mul(e.rho).add(n.square().mul(1-e.rho));o.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(i);i.assign(u)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedUpdates&&(qe(this.accumulatedGrads.map((function(t){return t.variable}))),qe(this.accumulatedUpdates.map((function(t){return t.variable}))))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="Adadelta",e}(nh);Xp(rh);var ih=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var i=Mt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:Ge((function(){return Sn(i.shape,e.initialAccumulatorValue).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var o=e.accumulatedGrads[r].variable;Ge((function(){var t=o.add(a.square());o.assign(t);var n=a.div(t.add(Mt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(i);i.assign(n)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedGrads&&qe(this.accumulatedGrads.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="Adagrad",e}(nh);Xp(ih);var ah=function(t){function e(e,n,r,i){void 0===i&&(i=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=i,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Ge((function(){a.accBeta1=gn(n).variable(),a.accBeta2=gn(r).variable()})),null==i&&(a.epsilon=Mt.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ge((function(){var r=wu(1,e.accBeta1),i=wu(1,e.accBeta2);n.forEach((function(n,a){var o=Mt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+"/m",variable:Ge((function(){return kn(o).variable(!1)}))}),null==e.accumulatedSecondMoment[a]&&(e.accumulatedSecondMoment[a]={originalName:n+"/v",variable:Ge((function(){return kn(o).variable(!1)}))});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedSecondMoment[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),p=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),h=l.div(r),f=p.div(i);u.assign(l),c.assign(p);var d=h.div(f.sqrt().add(e.epsilon)).mul(-e.learningRate).add(o);o.assign(d)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&qe(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&qe(this.accumulatedSecondMoment.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e,n=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Ge((function(){n.accBeta1.assign(vu(n.beta1,n.iterations_+1)),n.accBeta2.assign(vu(n.beta2,n.iterations_+1))})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="Adam",e}(nh);Xp(ah);var oh=function(t){function e(e,n,r,i,a){void 0===i&&(i=null),void 0===a&&(a=0);var o=t.call(this)||this;return o.learningRate=e,o.beta1=n,o.beta2=r,o.epsilon=i,o.decay=a,o.accumulatedFirstMoment=[],o.accumulatedWeightedInfNorm=[],Ge((function(){o.iteration=gn(0).variable(),o.accBeta1=gn(n).variable()})),null==i&&(o.epsilon=Mt.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ge((function(){var r=wu(1,e.accBeta1),i=au(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,a){var o=Mt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+"/m",variable:kn(o).variable(!1)}),null==e.accumulatedWeightedInfNorm[a]&&(e.accumulatedWeightedInfNorm[a]={originalName:n+"/v",variable:kn(o).variable(!1)});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedWeightedInfNorm[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),p=c.mul(e.beta2),h=s.abs(),f=p.maximum(h);u.assign(l),c.assign(f);var d=i.div(r).mul(l.div(f.add(e.epsilon))).add(o);o.assign(d)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&qe(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&qe(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="Adamax",e}(nh);Xp(oh);var sh=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=Mt.registeredVariables[n];Ge((function(){var t=e.c.mul(i).add(a);a.assign(t)}))}})),this.incrementIterations()},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=He(gn(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGD",e}(nh);Xp(sh);var uh=function(t){function e(e,n,r){void 0===r&&(r=!1);var i=t.call(this,e)||this;return i.learningRate=e,i.momentum=n,i.useNesterov=r,i.accumulations=[],i.m=gn(i.momentum),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var i=Mt.registeredVariables[n];null==e.accumulations[r]&&(e.accumulations[r]={originalName:n+"/momentum",variable:Ge((function(){return kn(i).variable(!1)}))});var a=e.accumulations[r].variable,o=Array.isArray(t)?t[r].tensor:t[n];null!=o&&Ge((function(){var t,n=e.m.mul(a).add(o);t=e.useNesterov?e.c.mul(o.add(n.mul(e.m))).add(i):e.c.mul(n).add(i),a.assign(n),i.assign(t)}))})),this.incrementIterations()},e.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&qe(this.accumulations.map((function(t){return t.variable})))},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="Momentum",e}(sh);Xp(uh);var ch=function(t){function e(e,n,r,i,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===i&&(i=null),void 0===a&&(a=!1);var o=t.call(this)||this;return o.learningRate=e,o.decay=n,o.momentum=r,o.epsilon=i,o.accumulatedMeanSquares=[],o.accumulatedMoments=[],o.accumulatedMeanGrads=[],o.centered=a,null==i&&(o.epsilon=Mt.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var i=Mt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:Ge((function(){return kn(i).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:Ge((function(){return kn(i).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:Ge((function(){return kn(i).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var o=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Ge((function(){var t=o.mul(e.decay).add(a.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(a.mul(1-e.decay)),c=s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));o.assign(t),n.assign(u),s.assign(c);var l=i.sub(c);i.assign(l)}else{var p=o.mul(e.decay).add(a.square().mul(1-e.decay));c=s.mul(e.momentum).add(a.mul(e.learningRate).div(p.add(e.epsilon).sqrt())),o.assign(p),s.assign(c),l=i.sub(c),i.assign(l)}}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&qe(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&qe(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&qe(this.accumulatedMoments.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSProp",e}(nh);Xp(ch);var lh=function(){function t(){}return t.sgd=function(t){return new sh(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new uh(t,e,n)},t.rmsprop=function(t,e,n,r,i){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===i&&(i=!1),new ch(t,e,n,r,i)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new ah(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new rh(t,e,n)},t.adamax=function(t,e,n,r,i){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===i&&(i=0),new oh(t,e,n,r,i)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new ih(t,e)},t}(),ph={sgd:lh.sgd,momentum:lh.momentum,adadelta:lh.adadelta,adagrad:lh.adagrad,rmsprop:lh.rmsprop,adamax:lh.adamax,adam:lh.adam},hh="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==a?a:function(t){return t()};function fh(){return new Promise((function(t){return hh((function(){return t()}))}))}gt=Ll}).call(this,n(1),n(5),n(4).Buffer,n(9).setImmediate)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return wt})),n.d(e,"b",(function(){return Ct}));var r,i,a,o=n(0),s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function u(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}(a=r||(r={}))[a.DT_INVALID=0]="DT_INVALID",a[a.DT_FLOAT=1]="DT_FLOAT",a[a.DT_DOUBLE=2]="DT_DOUBLE",a[a.DT_INT32=3]="DT_INT32",a[a.DT_UINT8=4]="DT_UINT8",a[a.DT_INT16=5]="DT_INT16",a[a.DT_INT8=6]="DT_INT8",a[a.DT_STRING=7]="DT_STRING",a[a.DT_COMPLEX64=8]="DT_COMPLEX64",a[a.DT_INT64=9]="DT_INT64",a[a.DT_BOOL=10]="DT_BOOL",a[a.DT_QINT8=11]="DT_QINT8",a[a.DT_QUINT8=12]="DT_QUINT8",a[a.DT_QINT32=13]="DT_QINT32",a[a.DT_BFLOAT16=14]="DT_BFLOAT16",a[a.DT_FLOAT_REF=101]="DT_FLOAT_REF",a[a.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",a[a.DT_INT32_REF=103]="DT_INT32_REF",a[a.DT_UINT8_REF=104]="DT_UINT8_REF",a[a.DT_INT16_REF=105]="DT_INT16_REF",a[a.DT_INT8_REF=106]="DT_INT8_REF",a[a.DT_STRING_REF=107]="DT_STRING_REF",a[a.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",a[a.DT_INT64_REF=109]="DT_INT64_REF",a[a.DT_BOOL_REF=110]="DT_BOOL_REF",a[a.DT_QINT8_REF=111]="DT_QINT8_REF",a[a.DT_QUINT8_REF=112]="DT_QUINT8_REF",a[a.DT_QINT32_REF=113]="DT_QINT32_REF",a[a.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",function(t){!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(i||(i={}));var l={};function p(t){return l[t]}function h(t,e,n,r){var i=e.inputParams[t];if(i&&void 0!==i.inputIndexStart){var a=i.inputIndexStart,o=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?a+1:i.inputIndexEnd;if("tensor"===i.type)return f(e.inputNames[i.inputIndexStart],n,r);if("tensors"===i.type)return e.inputNames.slice(a,o).map((function(t){return f(t,n,r)}));var s=Array.prototype.slice.call(f(e.inputNames.slice(a)[0],n,r).dataSync());return"number"===i.type?s[0]:s}var u=e.attrParams[t];return u&&u.value}function f(t,e,n){var r=g(t),i=r[0],a=r[1],o=n.currentContextIds.find((function(t){return!!e[m(i,t)]}));return void 0!==o?e[m(i,o)][a]:void 0}function d(t,e){var n=g(t),r=n[0],i=n[1];return[m(r,e&&e.currentContextId),i]}function m(t,e){return e?t+"-"+e:t}function g(t){var e=t.lastIndexOf(":");return-1===e?[t,0]:[t.substring(0,e),Number(t.substring(e+1))]}function v(t,e){for(var n=[],r=0;r<t.length;r+=e)n.push(t.slice(r,r+e));return n}var y=Object.freeze({json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),b=Object.freeze({json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),x=Object.freeze({json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]}]}),w=Object.freeze({json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}]}),C=Object.freeze({json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]}),N=Object.freeze({json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),S=Object.freeze({json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]}),E=Object.freeze({json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]}),O=Object.freeze({json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]}),I=Object.freeze({json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),k=Object.freeze({json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),A=Object.freeze({json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]}),R=Object.freeze({json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]}]}),T=Object.freeze({json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]}),D=Object.freeze({json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]}),_=Object.freeze({json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]}]}),F=function(){function t(){var t=[y,b,x,w,C,N,S,I,O,E,k,A,R,T,D,_],e=[].concat.apply([],t.map((function(t){return t.json})));this.opMappers=e.reduce((function(t,e){return t[e.tfOpName]=e,t}),{})}return Object.defineProperty(t,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),t.prototype.transformGraph=function(t,e){var n=this;void 0===e&&(e={});var r=[],i=[],a=t.node.reduce((function(t,e){return t[e.name]=n.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&i.push(t[e.name]),t}),{}),o=[],s=[],u={},c={};null!=e&&(u=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));var l=Object.keys(a);return l.forEach((function(t){var e=a[t];e.inputNames.forEach((function(t){var n=d(t)[0];e.inputs.push(a[n]),a[n].children.push(e)}))})),0===Object.keys(c).length?l.forEach((function(t){var e=a[t];0===e.children.length&&s.push(e)})):Object.keys(c).forEach((function(t){var e=d(t)[0],n=a[e];null!=n&&(n.signatureKey=c[t],s.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((function(t){var e=d(t)[0],n=a[e];n&&(n.signatureKey=u[t],o.push(n))})):o=r,{nodes:a,inputs:o,outputs:s,weights:i,placeholders:r,signature:e}},t.prototype.mapSignatureEntries=function(t){return Object.keys(t||{}).reduce((function(e,n){return e[t[n].name]=n,e}),{})},t.prototype.mapNode=function(t){var e=p(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});var n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((function(t){return t.startsWith("^")?t.substr(1):t})),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((function(t,e){return t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t}),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((function(e,n){var r=n.type,i=void 0;switch(n.type){case"string":void 0===(i=z(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=z(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":void 0===(i=q(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=q(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":void 0===(i=B(t.attr,n.tfName,n.defaultValue||0))&&n.tfDeprecatedName&&(i=B(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":void 0===(i=G(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=G(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":void 0===(i=L(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=L(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":void 0===(i=K(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=K(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":void 0===(i=U(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=U(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":void 0===(i=H(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=H(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":void 0===(i=j(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=j(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":void 0===(i=V(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(i=V(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+n.type+" for op: "+t.op)}return e[n.name]={value:i,type:r},e}),{})),n},t}();function M(e,n){var r=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){var n=Object(o.W)().global;if(void 0!==n.atob)return n.atob(e);if(void 0!==t)return new t(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return n?r:r.toLowerCase()}function z(t,e,n,r){void 0===r&&(r=!1);var i=t[e];return null!=i?M(i.s,r):n}function L(t,e,n){var r=t[e];return r?r.b:n}function B(t,e,n){var r=t[e]||{},i=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof i?i:parseInt(i,10)}function P(t){switch("string"==typeof t&&(t=r[t]),t){case r.DT_FLOAT:return"float32";case r.DT_INT32:case r.DT_INT64:return"int32";case r.DT_BOOL:return"bool";case r.DT_DOUBLE:return"float32";case r.DT_STRING:return"string";default:return null}}function j(t,e,n){var r=t[e];return r&&r.type?P(r.type):n}function V(t,e,n){var r=t[e];return r&&r.list&&r.list.type?r.list.type.map((function(t){return P(t)})):n}function W(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((function(t){return"number"==typeof t.size?t.size:parseInt(t.size,10)})):[]}function U(t,e,n){var r=t[e];return r&&r.shape?W(r.shape):n}function G(t,e,n){var r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((function(t){return"number"==typeof t?t:parseInt(t,10)})):n}function q(t,e,n,r){void 0===r&&(r=!1);var i=t[e];return i&&i.list&&i.list.s?i.list.s.map((function(t){return M(t,r)})):n}function H(t,e,n){var r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((function(t){return W(t)})):n}function K(t,e,n){var r=t[e];return r&&r.list&&r.list.b?r.list.b:n}var X=function(){function t(t,e,n){var r=this;this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((function(t){return r.getInput(t)})),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((function(t,e){return t[e]=r.getAttr(e),t}),{}))}return t.prototype.getInput=function(t){return f(t,this.tensorMap,this.context)},t.prototype.getAttr=function(t,e){var n=this.node.rawAttrs[t];if(null!=n.tensor)return f(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return B(this.node.rawAttrs,t,e);if(null!=n.s)return z(this.node.rawAttrs,t,e);if(null!=n.b)return L(this.node.rawAttrs,t,e);if(null!=n.shape)return U(this.node.rawAttrs,t,e);if(null!=n.type)return j(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return G(this.node.rawAttrs,t,e);if(null!=n.list.s)return q(this.node.rawAttrs,t,e);if(null!=n.list.shape)return H(this.node.rawAttrs,t,e);if(null!=n.list.b)return K(this.node.rawAttrs,t,e);if(null!=n.list.type)return V(this.node.rawAttrs,t,e)}return e},t}(),Y=function(t,e,n){switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[Object(o.f)(h("a",t,e,n),h("b",t,e,n))];case"AddN":return[Object(o.g)(h("tensors",t,e,n))];case"FloorMod":case"Mod":return[Object(o.Nb)(h("a",t,e,n),h("b",t,e,n))];case"Mul":return[Object(o.Pb)(h("a",t,e,n),h("b",t,e,n))];case"RealDiv":case"Div":return[Object(o.S)(h("a",t,e,n),h("b",t,e,n))];case"DivNoNan":return[Object(o.T)(h("a",t,e,n),h("b",t,e,n))];case"FloorDiv":return[Object(o.gb)(h("a",t,e,n),h("b",t,e,n))];case"Sub":return[Object(o.Nc)(h("a",t,e,n),h("b",t,e,n))];case"Minimum":return[Object(o.Mb)(h("a",t,e,n),h("b",t,e,n))];case"Maximum":return[Object(o.Ib)(h("a",t,e,n),h("b",t,e,n))];case"Pow":return[Object(o.Zb)(h("a",t,e,n),h("b",t,e,n))];case"SquaredDifference":return[Object(o.Jc)(h("a",t,e,n),h("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},$=function(t,e,n){switch(t.op){case"Abs":case"ComplexAbs":return[Object(o.c)(h("x",t,e,n))];case"Acos":return[Object(o.d)(h("x",t,e,n))];case"Acosh":return[Object(o.e)(h("x",t,e,n))];case"Asin":return[Object(o.l)(h("x",t,e,n))];case"Asinh":return[Object(o.m)(h("x",t,e,n))];case"Atan":return[Object(o.n)(h("x",t,e,n))];case"Atan2":return[Object(o.o)(h("x",t,e,n),h("y",t,e,n))];case"Atanh":return[Object(o.p)(h("x",t,e,n))];case"Ceil":return[Object(o.A)(h("x",t,e,n))];case"Complex":return[Object(o.C)(h("real",t,e,n),h("imag",t,e,n))];case"Cos":return[Object(o.M)(h("x",t,e,n))];case"Cosh":return[Object(o.N)(h("x",t,e,n))];case"Elu":return[Object(o.V)(h("x",t,e,n))];case"Erf":return[Object(o.Y)(h("x",t,e,n))];case"Exp":return[Object(o.Z)(h("x",t,e,n))];case"Expm1":return[Object(o.bb)(h("x",t,e,n))];case"Floor":return[Object(o.fb)(h("x",t,e,n))];case"Log":return[Object(o.yb)(h("x",t,e,n))];case"Log1p":return[Object(o.zb)(h("x",t,e,n))];case"Imag":return[Object(o.nb)(h("x",t,e,n))];case"Neg":return[Object(o.Sb)(h("x",t,e,n))];case"Reciprocal":return[Object(o.gc)(h("x",t,e,n))];case"Real":return[Object(o.fc)(h("x",t,e,n))];case"Relu":return[Object(o.hc)(h("x",t,e,n))];case"Round":return[Object(o.lc)(h("x",t,e,n))];case"Selu":return[Object(o.pc)(h("x",t,e,n))];case"Sigmoid":return[Object(o.tc)(h("x",t,e,n))];case"Sin":return[Object(o.vc)(h("x",t,e,n))];case"Sign":return[Object(o.uc)(h("x",t,e,n))];case"Sinh":return[Object(o.wc)(h("x",t,e,n))];case"Softplus":return[Object(o.Dc)(h("x",t,e,n))];case"Sqrt":return[Object(o.Hc)(h("x",t,e,n))];case"Square":return[Object(o.Ic)(h("x",t,e,n))];case"Tanh":return[Object(o.Qc)(h("x",t,e,n))];case"Tan":return[Object(o.Pc)(h("x",t,e,n))];case"Relu6":case"ClipByValue":return[Object(o.B)(h("x",t,e,n),h("clipValueMin",t,e,n),h("clipValueMax",t,e,n))];case"Rsqrt":return[Object(o.mc)(f(t.inputNames[0],e,n))];case"Prod":return[Object(o.bc)(h("x",t,e,n),h("axes",t,e,n))];case"LeakyRelu":return[Object(o.sb)(h("x",t,e,n),h("alpha",t,e,n))];case"Prelu":return[Object(o.ac)(h("x",t,e,n),h("alpha",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},J=function(){function t(e,n,r,i,a,o,s){this.name=e,this.dtype=n,this.maxSize=r,this.elementShape=i,this.identicalElementShapes=a,this.dynamicSize=o,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.id=t.nextId++}return Object.defineProperty(t.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),t.prototype.clearAndClose=function(){this.tensors.forEach((function(t){return t.tensor.dispose()})),this.tensors=[],this.closed_=!0},t.prototype.size=function(){return this.tensors.length},t.prototype.read=function(t){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||t>=this.tensors.length)throw new Error("Tried to read from index "+t+", but array size is: "+this.tensors.length);var e=this.tensors[t];if(e.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+t+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor},t.prototype.readMany=function(t){var e=this;return t.map((function(t){return e.read(t)}))},t.prototype.write=function(t,e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error("Tried to write to index "+t+", but array is not resizeable and size is: "+this.maxSize);var n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+",\n          because the value dtype is "+e.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,e.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+t+"."),n&&n.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been read.");if(n&&n.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been written.");n.tensor=e,n.written=!0,this.tensors[t]=n},t.prototype.writeMany=function(t,e){var n=this;if(t.length!==e.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+t.length+" is not the same as tensors size: "+e.length+".");t.forEach((function(t,r){return n.write(t,e[r])}))},t.prototype.gather=function(t,e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+e);if(!t){t=[];for(var n=0;n<this.size();n++)t.push(n)}if(0===t.length)return Object(o.Rc)([],[0].concat(this.elementShape));var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),Object(o.Lc)(r,0)},t.prototype.concat=function(t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+t);if(0===this.size())return Object(o.Rc)([],[0].concat(this.elementShape));for(var e=[],n=0;n<this.size();n++)e.push(n);var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),Object(o.D)(r,0)},t.prototype.scatter=function(t,e){if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+t.length+" vs. "+e.shape[0]);var n=Math.max.apply(Math,t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size ("+n+"  vs. "+this.maxSize+")");this.writeMany(t,Object(o.bd)(e,0))},t.prototype.split=function(t,e){var n=this;if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);var r=0,i=t.map((function(t){return r+=t}));if(r!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+e.shape);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+t.length+"), and the TensorArray is not marked as dynamically resizeable");var a=0===r?0:e.size/r,s=[];Object(o.Vc)((function(){e=e.reshape([1,r,a]);for(var u=0;u<t.length;++u){var c=[0,0===u?0:i[u-1],0],l=[1,t[u],a];s[u]=Object(o.xc)(e,c,l).reshape(n.elementShape)}return s}));for(var u=[],c=0;c<t.length;c++)u[c]=c;this.writeMany(u,s)},t.prototype.assertShapesMatchAllowUndefinedSize=function(t,e,n){void 0===n&&(n=""),o.cd.assert(this.shapesEqualAllowUndefinedSize(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))},t.prototype.shapesEqualAllowUndefinedSize=function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0},t.nextId=0,t}();var Z=function(t,e,n){var r,i;switch(t.op){case"Conv1D":var a=h("stride",t,e,n),s=h("pad",t,e,n),u=h("dataFormat",t,e,n).toUpperCase(),c=h("dilation",t,e,n);return[Object(o.I)(h("x",t,e,n),h("filter",t,e,n),a,s,u,c)];case"Conv2D":a=h("strides",t,e,n),s=h("pad",t,e,n),u=h("dataFormat",t,e,n).toUpperCase();var l=h("dilations",t,e,n);return[Object(o.J)(h("x",t,e,n),h("filter",t,e,n),[a[1],a[2]],s,u,[l[1],l[2]])];case"_FusedConv2D":case"FusedDepthwiseConv2dNative":var p=(r=h("fusedOps",t,e,n))[0],f=r[1],d="biasadd"===p,m="prelu"===f,g="fusedbatchnorm"===p,v=h("numArgs",t,e,n);if(d){if(m&&2!==v)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!m&&1!==v)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(g)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");a=h("strides",t,e,n),s=h("pad",t,e,n),u=h("dataFormat",t,e,n).toUpperCase(),l=h("dilations",t,e,n);var y=(i=h("args",t,e,n))[0],b=i[1];return[("_FusedConv2D"===t.op?o.hb.conv2d:o.hb.depthwiseConv2d)({x:h("x",t,e,n),filter:h("filter",t,e,n),strides:[a[1],a[2]],pad:s,dataFormat:u,dilations:[l[1],l[2]],bias:y,activation:f,preluActivationWeights:b})];case"Conv2DBackpropInput":case"Conv2dTranspose":var x=h("outputShape",t,e,n);return a=h("strides",t,e,n),s=h("pad",t,e,n),[Object(o.K)(h("x",t,e,n),h("filter",t,e,n),x,[a[1],a[2]],s)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":return a=h("strides",t,e,n),s=h("pad",t,e,n),l=h("dilations",t,e,n),u=h("dataFormat",t,e,n).toUpperCase(),[Object(o.Q)(h("input",t,e,n),h("filter",t,e,n),[a[1],a[2]],s,u,[l[1],l[2]])];case"Conv3D":return a=h("strides",t,e,n),s=h("pad",t,e,n),u=h("dataFormat",t,e,n).toUpperCase(),l=h("dilations",t,e,n),[Object(o.L)(h("x",t,e,n),h("filter",t,e,n),[a[1],a[2],a[3]],s,u,[l[1],l[2],l[3]])];case"AvgPool":a=h("strides",t,e,n),s=h("pad",t,e,n);var w=h("kernelSize",t,e,n);return[Object(o.q)(h("x",t,e,n),[w[1],w[2]],[a[1],a[2]],s)];case"MaxPool":return a=h("strides",t,e,n),s=h("pad",t,e,n),w=h("kernelSize",t,e,n),[Object(o.Gb)(h("x",t,e,n),[w[1],w[2]],[a[1],a[2]],s)];case"AvgPool3D":return a=h("strides",t,e,n),s=h("pad",t,e,n),w=h("kernelSize",t,e,n),[Object(o.r)(h("x",t,e,n),[w[1],w[2],w[3]],[a[1],a[2],a[3]],s)];case"MaxPool3D":return a=h("strides",t,e,n),s=h("pad",t,e,n),w=h("kernelSize",t,e,n),[Object(o.Hb)(h("x",t,e,n),[w[1],w[2],w[3]],[a[1],a[2],a[3]],s)];default:throw TypeError("Node type "+t.op+" is not implemented")}},Q=function(t,e,n){switch(t.op){case"Fill":var r=h("shape",t,e,n),i=h("dtype",t,e,n),a=h("value",t,e,n);return[Object(o.eb)(r,a,i)];case"LinSpace":var s=h("start",t,e,n),u=h("stop",t,e,n),c=h("num",t,e,n);return[Object(o.wb)(s,u,c)];case"Multinomial":var l=h("logits",t,e,n),p=h("numSamples",t,e,n),f=h("seed",t,e,n);return[Object(o.Rb)(l,p,f)];case"OneHot":var d=h("indices",t,e,n),m=h("depth",t,e,n),g=h("onValue",t,e,n),v=h("offValue",t,e,n);return[Object(o.Vb)(d,m,g,v)];case"Ones":return[Object(o.Wb)(h("shape",t,e,n),h("dtype",t,e,n))];case"OnesLike":return[Object(o.Xb)(h("x",t,e,n))];case"RandomUniform":return[Object(o.dc)(h("shape",t,e,n),h("minval",t,e,n),h("maxval",t,e,n),h("dtype",t,e,n))];case"Range":s=h("start",t,e,n);var y=h("stop",t,e,n),b=h("step",t,e,n);return[Object(o.ec)(s,y,b,h("dtype",t,e,n))];case"TruncatedNormal":r=h("shape",t,e,n);var x=h("mean",t,e,n),w=h("stdDev",t,e,n);return f=h("seed",t,e,n),[Object(o.ad)(r,x,w,h("dtype",t,e,n),f)];case"Zeros":return[Object(o.hd)(h("shape",t,e,n),h("dtype",t,e,n))];case"ZerosLike":return[Object(o.id)(h("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}};var tt=function(t,e,n){switch(t.op){case"TopKV2":var r=h("x",t,e,n),i=h("k",t,e,n),a=h("sorted",t,e,n),s=Object(o.Xc)(r,i,a);return[s.values,s.indices];default:throw TypeError("Node type "+t.op+" is not implemented")}},et=function(t,e,n){switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":var r=h("default",t,e,n);return[f(t.name,e,n)||r];case"Placeholder":return[f(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[h("x",t,e,n).clone()];case"IdentityN":return h("x",t,e,n).map((function(t){return t.clone()}));case"Snapshot":return[h("x",t,e,n).clone()];case"Shape":return[Object(o.Sc)(h("x",t,e,n).shape,"int32")];case"ShapeN":return h("x",t,e,n).map((function(t){return Object(o.Sc)(t.shape)}));case"Size":return[Object(o.nc)(h("x",t,e,n).size,"int32")];case"Rank":return[Object(o.nc)(h("x",t,e,n).rank,"int32")];case"NoOp":return[Object(o.nc)(1)];case"Print":var i=h("x",t,e,n),a=h("data",t,e,n),s=h("message",t,e,n),u=h("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(s);for(var c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError("Node type "+t.op+" is not implemented")}},nt=function(t,e,n){switch(t.op){case"ResizeBilinear":var r=h("images",t,e,n),i=h("size",t,e,n),a=h("alignCorners",t,e,n);return[o.ob.resizeBilinear(r,[i[0],i[1]],a)];case"ResizeNearestNeighbor":return r=h("images",t,e,n),i=h("size",t,e,n),a=h("alignCorners",t,e,n),[o.ob.resizeNearestNeighbor(r,[i[0],i[1]],a)];case"CropAndResize":var s=h("image",t,e,n),u=h("boxes",t,e,n),c=h("boxInd",t,e,n),l=h("cropSize",t,e,n),p=h("method",t,e,n),f=h("extrapolationValue",t,e,n);return[o.ob.cropAndResize(s,u,c,l,p,f)];default:throw TypeError("Node type "+t.op+" is not implemented")}},rt=function(t,e,n){switch(t.op){case"Equal":return[Object(o.X)(h("a",t,e,n),h("b",t,e,n))];case"NotEqual":return[Object(o.Ub)(h("a",t,e,n),h("b",t,e,n))];case"Greater":return[Object(o.kb)(h("a",t,e,n),h("b",t,e,n))];case"GreaterEqual":return[Object(o.lb)(h("a",t,e,n),h("b",t,e,n))];case"Less":return[Object(o.tb)(h("a",t,e,n),h("b",t,e,n))];case"LessEqual":return[Object(o.ub)(h("a",t,e,n),h("b",t,e,n))];case"LogicalAnd":return[Object(o.Bb)(h("a",t,e,n),h("b",t,e,n))];case"LogicalNot":return[Object(o.Cb)(h("a",t,e,n))];case"LogicalOr":return[Object(o.Db)(h("a",t,e,n),h("b",t,e,n))];case"Select":return[Object(o.fd)(h("condition",t,e,n),h("a",t,e,n),h("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},it=function(t,e,n){var r,i;switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Object(o.Eb)(h("a",t,e,n),h("b",t,e,n),h("transposeA",t,e,n),h("transposeB",t,e,n))];case"Transpose":return[Object(o.Zc)(h("x",t,e,n),h("perm",t,e,n))];case"_FusedMatMul":var a=(r=h("fusedOps",t,e,n))[0],s=r[1],u="biasadd"===a,c="prelu"===s,l=h("numArgs",t,e,n);if(u){if(c&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!c&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}var p=(i=h("args",t,e,n))[0],f=i[1];return[o.hb.matMul({a:h("a",t,e,n),b:h("b",t,e,n),transposeA:h("transposeA",t,e,n),transposeB:h("transposeB",t,e,n),bias:p,activation:s,preluActivationWeights:f})];default:throw TypeError("Node type "+t.op+" is not implemented")}},at=function(t,e,n){switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Object(o.t)(h("x",t,e,n),h("mean",t,e,n),h("variance",t,e,n),h("offset",t,e,n),h("scale",t,e,n),h("epsilon",t,e,n))];case"LRN":return[Object(o.xb)(h("x",t,e,n),h("radius",t,e,n),h("bias",t,e,n),h("alpha",t,e,n),h("beta",t,e,n))];case"Softmax":return[Object(o.Cc)(h("x",t,e,n))];case"LogSoftmax":return[Object(o.Ab)(h("x",t,e,n))];case"SparseToDense":return[Object(o.Fc)(h("sparseIndices",t,e,n),h("outputShape",t,e,n),h("sparseValues",t,e,n),h("defaultValue",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},ot=function(t,e,n){switch(t.op){case"Max":var r=h("axis",t,e,n),i=h("keepDims",t,e,n);return[Object(o.Fb)(h("x",t,e,n),r,i)];case"Mean":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.Jb)(h("x",t,e,n),r,i)];case"Min":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.Lb)(h("x",t,e,n),r,i)];case"Sum":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.Oc)(h("x",t,e,n),r,i)];case"All":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.h)(h("x",t,e,n),r,i)];case"Any":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.i)(h("x",t,e,n),r,i)];case"ArgMax":return r=h("axis",t,e,n),[Object(o.j)(h("x",t,e,n),r)];case"ArgMin":return r=h("axis",t,e,n),[Object(o.k)(h("x",t,e,n),r)];case"Prod":return r=h("axis",t,e,n),i=h("keepDims",t,e,n),[Object(o.bc)(h("x",t,e,n),r,i)];default:throw TypeError("Node type "+t.op+" is not implemented")}},st=function(t,e,n){switch(t.op){case"ConcatV2":case"Concat":var r=h("n",t,e,n),i=h("axis",t,e,n),a=h("tensors",t,e,n);return a=a.slice(0,r),[Object(o.D)(a,i)];case"GatherV2":case"Gather":i=h("axis",t,e,n);var s=h("x",t,e,n),u=h("indices",t,e,n);return[Object(o.ib)(s,u.asType("int32"),i)];case"ReverseV2":case"Reverse":return i=h("axis",t,e,n),s=h("x",t,e,n),[Object(o.jc)(s,i)];case"Slice":var c=h("begin",t,e,n),l=h("size",t,e,n);return[Object(o.xc)(h("x",t,e,n),c,l)];case"StridedSlice":c=h("begin",t,e,n);var p=h("end",t,e,n),f=h("strides",t,e,n),d=h("beginMask",t,e,n),m=h("endMask",t,e,n),g=h("ellipsisMask",t,e,n),v=h("newAxisMask",t,e,n),y=h("shrinkAxisMask",t,e,n),b=h("x",t,e,n);if(1===c.length&&b.shape.length>1)for(var x=1;x<b.shape.length;x++)c.push(0),p.push(b.shape[x]),f.push(f[0]);return[Object(o.Mc)(b,c,p,f,d,m,g,v,y)];case"Pack":return Object(o.Vc)((function(){var r=h("axis",t,e,n),i=h("tensors",t,e,n),a=i[0].shape,s=i[0].squeeze().shape,u=i.map((function(t){var e=o.cd.arraysEqual(t.shape,a);if(!e&&!o.cd.arraysEqual(t.squeeze().shape,s))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)}));return[Object(o.Lc)(u,r)]}));case"Unpack":return Object(o.Vc)((function(){var r=h("axis",t,e,n),i=h("tensor",t,e,n);return Object(o.bd)(i,r)}));case"Tile":var w=h("reps",t,e,n);return[Object(o.Wc)(h("x",t,e,n),w)];case"Split":case"SplitV":i=h("axis",t,e,n);var C=h("numOrSizeSplits",t,e,n);return Object(o.Gc)(h("x",t,e,n),C,i);case"ScatterNd":u=h("indices",t,e,n);var N=h("values",t,e,n),S=h("shape",t,e,n);return[Object(o.oc)(u,N,S)];case"GatherNd":var E=h("x",t,e,n);return u=h("indices",t,e,n),[Object(o.jb)(E,u)];case"SparseToDense":u=h("sparseIndices",t,e,n),S=h("outputShape",t,e,n);var O=h("sparseValues",t,e,n),I=h("defaultValue",t,e,n);return[Object(o.Fc)(u,O,S,O.dtype===I.dtype?I:I.asType(O.dtype))];default:throw TypeError("Node type "+t.op+" is not implemented")}},ut=function(t,e,n){switch(t.op){case"FFT":return[Object(o.db)(h("x",t,e,n))];case"IFFT":return[Object(o.mb)(h("x",t,e,n))];case"RFFT":return[Object(o.kc)(h("x",t,e,n))];case"IRFFT":return[Object(o.qb)(h("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},ct=function(t,e,n){switch(t.op){case"Cast":return[Object(o.z)(h("x",t,e,n),h("dtype",t,e,n))];case"ExpandDims":var r=h("axis",t,e,n);return[Object(o.ab)(h("x",t,e,n),r)];case"Squeeze":return r=h("axis",t,e,n),[Object(o.Kc)(h("x",t,e,n),r)];case"Reshape":return[Object(o.ic)(h("x",t,e,n),h("shape",t,e,n))];case"PadV2":case"Pad":return[Object(o.Yb)(h("x",t,e,n),v(h("padding",t,e,n),2),h("constantValue",t,e,n))];case"SpaceToBatchND":var i=h("blockShape",t,e,n),a=v(h("paddings",t,e,n),2);return[Object(o.Ec)(h("x",t,e,n),i,a)];case"BatchToSpaceND":i=h("blockShape",t,e,n);var s=v(h("crops",t,e,n),2);return[Object(o.x)(h("x",t,e,n),i,s)];case"DepthToSpace":var u=h("blockSize",t,e,n),c=h("dataFormat",t,e,n).toUpperCase();return[Object(o.P)(h("x",t,e,n),u,c)];default:throw TypeError("Node type "+t.op+" is not implemented")}};function lt(t,e,n){var r=function(t,e,n){switch(t.category){case"arithmetic":return Y(t,e,n);case"basic_math":return $(t,e,n);case"control":return function(t,e,n){return u(this,void 0,void 0,(function(){var r,i,a,s,u,l,p,d,m,g,v,y,b,x,w,C,N,S,E,O,I,k,A,R,T,D,_,F,M,z,L,B,P,j,V;return c(this,(function(c){switch(c.label){case 0:switch(t.op){case"LoopCond":return[3,1];case"Switch":return[3,2];case"Merge":return[3,4];case"Enter":return[3,5];case"Exit":return[3,6];case"NextIteration":return[3,7];case"TensorArrayV3":return[3,8];case"TensorArrayWriteV3":return[3,9];case"TensorArrayReadV3":return[3,10];case"TensorArrayGatherV3":return[3,11];case"TensorArrayScatterV3":return[3,12];case"TensorArrayConcatV3":return[3,13];case"TensorArraySplitV3":return[3,14];case"TensorArraySizeV3":return[3,15];case"TensorArrayCloseV3":return[3,16]}return[3,17];case 1:return[2,[h("pred",t,e,n).clone()]];case 2:return r=h("pred",t,e,n),i=h("data",t,e,n),[4,r.data()];case 3:return[2,c.sent()[0]?[void 0,i.clone()]:[i.clone(),void 0]];case 4:return[2,(a=t.inputNames.find((function(t){return void 0!==f(t,e,n)})))?[f(a,e,n).clone()]:void 0];case 5:return s=h("frameName",t,e,n),u=h("tensor",t,e,n),n.enterFrame(s),[2,[u.clone()]];case 6:return l=h("tensor",t,e,n),n.exitFrame(),[2,[l.clone()]];case 7:return p=h("tensor",t,e,n),n.nextIteration(),[2,[p.clone()]];case 8:return d=h("size",t,e,n),m=h("dtype",t,e,n),g=h("elementShape",t,e,n),v=h("dynamicSize",t,e,n),y=h("clearAfterRead",t,e,n),b=h("identicalElementShapes",t,e,n),x=h("name",t,e,n),w=new J(x,m,d,g,b,v,y),n.addTensorArray(w),[2,[Object(o.nc)(w.id),Object(o.nc)(1)]];case 9:return C=h("tensorArrayId",t,e,n),N=h("index",t,e,n),S=h("tensor",t,e,n),n.getTensorArray(C).write(N,S),[2,[Object(o.nc)(1)]];case 10:return E=h("tensorArrayId",t,e,n),O=h("index",t,e,n),[2,[n.getTensorArray(E).read(O)]];case 11:return I=h("tensorArrayId",t,e,n),k=h("indices",t,e,n),A=h("dtype",t,e,n),[2,[n.getTensorArray(I).gather(k,A)]];case 12:return R=h("tensorArrayId",t,e,n),T=h("indices",t,e,n),D=h("tensor",t,e,n),n.getTensorArray(R).scatter(T,D),[2,[Object(o.nc)(1)]];case 13:return _=h("tensorArrayId",t,e,n),F=n.getTensorArray(_),M=h("dtype",t,e,n),[2,[F.concat(M)]];case 14:return z=h("tensorArrayId",t,e,n),L=h("tensor",t,e,n),B=h("lengths",t,e,n),n.getTensorArray(z).split(B,L),[2,[Object(o.nc)(1)]];case 15:return P=h("tensorArrayId",t,e,n),j=n.getTensorArray(P),[2,[Object(o.nc)(j.size(),"int32")]];case 16:return V=h("tensorArrayId",t,e,n),n.getTensorArray(V).clearAndClose(),[2,[Object(o.nc)(0)]];case 17:throw TypeError("Node type "+t.op+" is not implemented")}}))}))}(t,e,n);case"convolution":return Z(t,e,n);case"creation":return Q(t,e,n);case"dynamic":return function(t,e,n){return u(this,void 0,void 0,(function(){var r,i,a,s,u;return c(this,(function(c){switch(c.label){case 0:switch(t.op){case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return[3,1];case"Where":return[3,3];case"ListDiff":return[3,5]}return[3,6];case 1:return r=h("boxes",t,e,n),i=h("scores",t,e,n),a=h("maxOutputSize",t,e,n),s=h("iouThreshold",t,e,n),u=h("scoreThreshold",t,e,n),[4,o.ob.nonMaxSuppressionAsync(r,i,a,s,u)];case 2:return[2,[c.sent()]];case 3:return[4,Object(o.gd)(h("condition",t,e,n).asType("bool"))];case 4:return[2,[c.sent()]];case 5:return[2,Object(o.sc)(h("x",t,e,n),h("y",t,e,n))];case 6:throw TypeError("Node type "+t.op+" is not implemented")}}))}))}(t,e,n);case"evaluation":return tt(t,e,n);case"image":return nt(t,e,n);case"graph":return et(t,e,n);case"logical":return rt(t,e,n);case"matrices":return it(t,e,n);case"normalization":return at(t,e,n);case"reduction":return ot(t,e,n);case"slice_join":return st(t,e,n);case"spectral":return ut(t,e,n);case"transformation":return ct(t,e,n);case"custom":var r=p(t.op);if(r&&r.customExecutor)return r.customExecutor(new X(t,e,n));throw TypeError("Custom op "+t.op+" is not registered.");default:throw TypeError("Unknown op '"+t.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}}(t,e,n);return r instanceof Promise?r.then((function(t){return[].concat(t)})):[].concat(r)}var pt=function(){function t(t,e){this.weightMap=t,this.tensorArrayMap=e,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return t.prototype.newFrame=function(t,e){return{id:t,frameName:e,iterationId:0}},Object.defineProperty(t.prototype,"currentContext",{get:function(){return this.contexts},set:function(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),t.prototype.generateCurrentContextIds=function(){for(var t=[],e=0;e<this.contexts.length-1;e++){var n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t},t.prototype.contextIdforContexts=function(t){return t?t.map((function(t){return 0===t.id&&0===t.iterationId?"":t.frameName+"-"+t.iterationId})).join("/"):""},t.prototype.enterFrame=function(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},t.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},t.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},t.prototype.getWeight=function(t){return this.weightMap[t]},t.prototype.addTensorArray=function(t){this.tensorArrayMap[t.id]=t},t.prototype.getTensorArray=function(t){return this.tensorArrayMap[t]},t}();function ht(t,e,n){for(var r=new Set,i=[],a=null,o=null,s=new Set,u=Object.keys(t).map((function(t){return g(t)[0]})),c=e.slice();c.length>0;){var l=c.pop();(mt(l)||gt(l))&&null==a&&(o=(a=l).children.map((function(t){return t.name})).filter((function(t){return r.has(t)}))),r.add(l.name),null==n[l.name]&&-1===u.indexOf(l.name)&&(0!==l.inputs.length?l.inputs.forEach((function(t){s.has(t.name)||(s.add(t.name),c.push(t))})):i.push(l.name))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:i,dynamicNode:a,syncInputs:o}}var ft=["Switch","Merge","Enter","Exit","NextIteration"],dt=["NonMaxSuppressionV2","NonMaxSuppressionV3","Where"];function mt(t){return ft.indexOf(t.op)>=0}function gt(t){return dt.indexOf(t.op)>=0}var vt=function(){function t(t){this.graph=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature}return Object.defineProperty(t.prototype,"weightMap",{get:function(){return this._weightMap},set:function(t){var e=Object.keys(t).map((function(e){return t[e].map((function(t){return t.id}))}));this.weightIds=[].concat.apply([],e),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this._inputs.map((function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this._outputs.map((function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this._inputs.map((function(t){return t.signatureKey||t.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this._outputs.map((function(t){return t.signatureKey||t.name}))},enumerable:!0,configurable:!0}),t.prototype.getCompilationKey=function(t,e){var n=t.map((function(t){return t.name})).sort(),r=e.map((function(t){return t.name})).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)},t.prototype.compile=function(t,e){var n=ht(t,e,this.weightMap),r=n.missingInputs,i=n.dynamicNode,a=n.syncInputs;if(null!=i)throw new Error("This execution contains the node '"+i.name+"', which has the dynamic op '"+i.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+a+"]");if(r.length>0){var o=e.map((function(t){return t.name})),s=Object.keys(t);throw new Error("Cannot compute the outputs ["+o+"] from the provided inputs ["+s+"]. Missing the following inputs: ["+r+"]")}return function(t,e,n){var r=n.usedNodes,i=n.inputs,a=[];Object.keys(i).map((function(t){return g(t)[0]})).map((function(e){return t.nodes[e]})).forEach((function(t){r.has(t.name)&&a.push(t)})),t.weights.forEach((function(t){r.has(t.name)&&a.push(t)}));for(var o=new Set,s=[];a.length>0;){var u=a.pop();o.add(u.name),e[u.name]||s.push(u),u.children.forEach((function(t){!o.has(t.name)&&r.has(t.name)&&t.inputs.every((function(t){return o.has(t.name)}))&&a.push(t)}))}return s}(this.graph,this.weightMap,n)},t.prototype.execute=function(t,e){var n=this;t=this.mapInputs(t);var r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);var i=r.map((function(t){return n.graph.nodes[g(t)[0]]})),a=e.map((function(t){return n.graph.nodes[g(t)[0]]})),u=this.getCompilationKey(i,a),c=this.compiledMap.get(u);null==c&&(c=this.compile(t,a),this.compiledMap.set(u,c));var l={};return Object(o.Vc)((function(){var r=new pt(n._weightMap,l),i=s({},n.weightMap);Object.keys(t).forEach((function(e){var n=g(e),r=n[0],a=[];a[n[1]]=t[e],i[r]=a}));for(var a=n.getFrozenTensorIds(i),o={},u=0;u<c.length;u++){var p=c[u];if(!i[p.name]){var h=lt(p,i,r);if(h instanceof Promise)throw new Error("The execution of the op '"+p.op+"' returned a promise. Please use model.executeAsync() instead.");i[p.name]=h,n.checkTensorForDisposal(p.name,p,i,r,a,e,o)}}return e.map((function(t){return f(t,i,r)}))}))},t.prototype.getFrozenTensorIds=function(t){var e=[].concat.apply([],Object.keys(t).map((function(e){return t[e]})).map((function(t){return t.map((function(t){return t.id}))})));return new Set(e)},t.prototype.checkTensorForDisposal=function(t,e,n,r,i,a,o){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((function(t){null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)})),e.inputs.forEach((function(t){if("control"!==t.category){var e=function(t,e,n){return e[m(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((function(t){if(t&&!i.has(t.id)){var e=o[t.id];1===e?(t.dispose(),delete o[t.id]):null!=e&&o[t.id]--}}))}})))},t.prototype.executeAsync=function(t,e){return u(this,void 0,void 0,(function(){var n,r,i,a,o,s,u=this;return c(this,(function(c){switch(c.label){case 0:return t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e),n={},r=new pt(this._weightMap,n),[4,this.executeWithControlFlow(t,r,e)];case 1:return i=c.sent(),a=e.map((function(t){return f(t,i,r)})),o=new Set(a.map((function(t){return t.id}))),s=new Set(Object.keys(t).map((function(e){return t[e].id}))),Object.keys(i).forEach((function(t){i[t].forEach((function(t){!t||t.isDisposed||o.has(t.id)||s.has(t.id)||-1!==u.weightIds.indexOf(t.id)||t.dispose()}))})),[2,a]}}))}))},t.prototype.executeWithControlFlow=function(t,e,n){return u(this,void 0,void 0,(function(){var r,i,a,o,u,l,p,h,d,m,v,y,b,x,w,C,N=this;return c(this,(function(c){switch(c.label){case 0:r=Object.keys(t),i=r.map((function(t){return N.graph.nodes[g(t)[0]]})),a=n.map((function(t){return N.graph.nodes[g(t)[0]]})),o=ht(t,a,this.weightMap),u=o.usedNodes,l=o.missingInputs,p=o.dynamicNode,h=o.syncInputs,d=i.concat(this.graph.weights).map((function(t){return{node:t,contexts:e.currentContext}})),m=s({},this.weightMap),Object.keys(t).forEach((function(e){var n=g(e),r=n[0],i=[];i[n[1]]=t[e],m[r]=i})),v={},y=this.getFrozenTensorIds(m),b={},c.label=1;case 1:return d.length>0?(x=this.processStack(i,d,e,m,b,y,n,v,u),[4,Promise.all(x)]):[3,3];case 2:return c.sent(),[3,1];case 3:if(null==p&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),(w=a.filter((function(t){return!mt(t)&&!f(t.name,m,e)})).map((function(t){return t.name}))).length>0)throw C="",null!=p&&(C="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+h+"]"),new Error("Cannot compute the outputs ["+w+"] from the provided inputs ["+r+"]. Consider providing the following inputs: ["+l+"]. "+C);return[2,m]}}))}))},t.prototype.processStack=function(t,e,n,r,i,a,o,s,u){for(var c=this,l=[],p=function(){var p=e.pop();n.currentContext=p.contexts;var m="";if("Enter"===p.node.op&&h("isConstant",p.node,r,n)&&(m=d(p.node.name,n)[0]),-1===t.indexOf(p.node)){var g=lt(p.node,r,n);m||(m=d(p.node.name,n)[0]);var v=n.currentContext;g instanceof Promise?l.push(g.then((function(t){return r[m]=t,n.currentContext=v,c.checkTensorForDisposal(m,p.node,r,n,a,o,s),c.processChildNodes(p.node,e,n,r,i,u),t}))):(r[m]=g,f.checkTensorForDisposal(m,p.node,r,n,a,o,s),f.processChildNodes(p.node,e,n,r,i,u))}else f.processChildNodes(p.node,e,n,r,i,u)},f=this;e.length>0;)p();return l},t.prototype.processChildNodes=function(t,e,n,r,i,a){t.children.forEach((function(t){var o=d(t.name,n)[0];!i[o]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((function(t){return!!f(t,r,n)}))&&(i[o]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((function(t){return!!f(t,r,n)}))&&(i[o]=!0,e.push({contexts:n.currentContext,node:t})))}))},t.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach((function(e){return t.weightMap[e].forEach((function(t){return t.dispose()}))}))},t.prototype.checkInputShapeAndType=function(t){var e=this;Object.keys(t).forEach((function(n){var r=t[n],i=g(n)[0],a=e.graph.nodes[i];if(a.attrParams.shape&&a.attrParams.shape.value){var s=a.attrParams.shape.value,u=s.length===r.shape.length&&r.shape.every((function(t,e){return-1===s[e]||s[e]===t}));o.cd.assert(u,(function(){return"The shape of dict['"+a.name+"'] provided in model.execute(dict) must be ["+s+"], but was ["+r.shape+"]"}))}a.attrParams.dtype&&a.attrParams.dtype.value&&o.cd.assert(r.dtype===a.attrParams.dtype.value,(function(){return"The dtype of dict['"+a.name+"'] provided in model.execute(dict) must be "+a.attrParams.dtype.value+", but was "+r.dtype}))}))},t.prototype.mapInputs=function(t){var e={};for(var n in t)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?e[this._signature.inputs[n].name]=t[n]:e[n]=t[n];return e},t.prototype.checkInputs=function(t){var e=this,n=Object.keys(t).filter((function(t){var n=g(t)[0];return null==e.graph.nodes[n]}));if(n.length>0)throw new Error("The dict provided in model.execute(dict) has keys: ["+n+"] that are not part of graph")},t.prototype.mapOutputs=function(t){var e=this;return t.map((function(t){return null!=e._signature&&null!=e._signature.outputs&&null!=e._signature.outputs[t]?e._signature.outputs[t].name:t}),{})},t.prototype.checkOutputs=function(t){var e=this;t.forEach((function(t){var n=g(t)[0];if(!e.graph.nodes[n])throw new Error("The output '"+t+"' is not found in the graph")}))},t}(),yt="?tfjs-format=file",bt="model.json",xt=function(){function t(t,e){void 0===e&&(e={}),this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}return Object.defineProperty(t.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),t.prototype.findIOHandler=function(){var t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=o.pb.browserHTTPRequest(t,this.loadOptions);else{var e=o.pb.getLoadHandlers(t,this.loadOptions.onProgress);if(0===e.length)e.push(o.pb.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error("Found more than one ("+e.length+") load handlers for URL '"+[t]+"'");this.handler=e[0]}},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r;return c(this,(function(i){switch(i.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return t=i.sent(),e=t.modelTopology,n={},null!=t.userDefinedMetadata&&(n=t.userDefinedMetadata.signature),this.version=e.versions.producer+"."+e.versions.minConsumer,r=o.pb.decodeWeights(t.weightData,t.weightSpecs),this.executor=new vt(F.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),[2,!0]}}))}))},t.prototype.predict=function(t,e){return this.execute(t,this.outputNodes)},t.prototype.normalizeInputs=function(t){if(!(t instanceof o.b||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+t.length+" input tensors.");return this.inputNodes.reduce((function(e,n,r){return e[n]=t[r],e}),{})},t.prototype.normalizeOutputs=function(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]},t.prototype.execute=function(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);var n=this.executor.execute(t,e);return n.length>1?n:n[0]},t.prototype.executeAsync=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:return t=this.normalizeInputs(t),e=this.normalizeOutputs(e),[4,this.executor.executeAsync(t,e)];case 1:return[2,(n=r.sent()).length>1?n:n[0]]}}))}))},t.prototype.convertTensorMapToTensorsMap=function(t){return Object.keys(t).reduce((function(e,n){return e[n]=[t[n]],e}),{})},t.prototype.dispose=function(){this.executor.dispose()},t}();function wt(t,e){return void 0===e&&(e={}),u(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=""+t+bt+yt),[4,(n=new xt(t,e)).load()];case 1:return r.sent(),[2,n]}}))}))}var Ct="1.4.0"}).call(this,n(4).Buffer)},function(t,e,n){"use strict";(function(t,r){n.d(e,"a",(function(){return gt}));var i=n(0),a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function o(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function s(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,s)}u((r=r.apply(t,e||[])).next())}))}function u(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;function c(t,e){return t(e={exports:{}},e.exports),e.exports}var l=c((function(t){!function(t,e,n){function r(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new function(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)})),p=c((function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new function(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)})),h=c((function(t){!function(t,e,n){function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)})),f=c((function(t){!function(t,e,n){function r(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)})),d=c((function(t){!function(t,e,n){function r(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.w,i=e.X,a=e.i;return e.w=r=r+1640531527|0,n=i[a+34&127],t=i[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=i[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,i,a,o,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),i=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,i=0==(n=s[127&a]^=r+o)?i+1:0);for(i>=128&&(s[127&(e&&e.length||0)]=-1),i=127,a=512;a>0;--a)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;t.w=o,t.X=s,t.i=i}(e,t)}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)})),m=c((function(t){!function(t,e,n){function r(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,i=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&r(i,n),a.state=function(){return r(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)})),g=c((function(t){!function(e,r){var i,a=this,o=256,s=6,u="random",c=r.pow(o,s),l=r.pow(2,52),p=2*l,h=o-1;function f(t,n,f){var v=[],y=m(function t(e,n){var r,i=[],a=typeof e;if(n&&"object"==a)for(r in e)try{i.push(t(e[r],n-1))}catch(t){}return i.length?i:"string"==a?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(o):(t=new Uint8Array(o),(a.crypto||a.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=a.navigator,r=n&&n.plugins;return[+new Date,a,r,a.screen,g(e)]}}():t,3),v),b=new function(t){var e,n=t.length,r=this,i=0,a=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<o;)s[i]=i++;for(i=0;i<o;i++)s[i]=s[a=h&a+t[i%n]+(e=s[i])],s[a]=e;(r.g=function(t){for(var e,n=0,i=r.i,a=r.j,s=r.S;t--;)e=s[i=h&i+1],n=n*o+s[h&(s[i]=s[a=h&a+e])+(s[a]=e)];return r.i=i,r.j=a,n})(o)}(v),x=function(){for(var t=b.g(s),e=c,n=0;t<l;)t=(t+n)*o,e*=o,n=b.g(1);for(;t>=p;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,m(g(b.S),e),(n.pass||f||function(t,e,n,i){return i&&(i.S&&d(i,b),t.state=function(){return d(b,{})}),n?(r[u]=t,e):t})(x,y,"global"in n?n.global:this==r,n.state)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",i=0;i<r.length;)e[h&i]=h&(n^=19*e[h&i])+r.charCodeAt(i++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=f,m(r.random(),e),t.exports){t.exports=f;try{i=n(14)}catch(t){}}}([],Math)}));g.alea=l,g.xor128=p,g.xorwow=h,g.xorshift7=f,g.xor4096=d,g.tychei=m;var v=g.alea;function y(t,e,n,r){if(void 0===n&&(n=new Map),void 0===r&&(r=new Set),null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);var i=e(t);if(i.recurse&&null!==i.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(i.recurse){if(C(t)){var a=Array.isArray(t)?[]:{};for(var o in r.add(t),t){var s=y(t[o],e,n,r);a[o]=s}return r.delete(t),a}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,i.value),i.value}function b(t,e){return void 0===e&&(e=x),function t(e,n,r){void 0===r&&(r=new Set);var i=e[0];if(r.has(i))throw new Error("Circular references are not supported.");var a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(C(i)){var o=Array.isArray(i)?[]:{};r.add(i);var s=function(i){var a=t(e.map((function(t){return t[i]})),n,r);o[i]=a};for(var u in i)s(u);return r.delete(i),o}throw new Error("Can't recurse into non-iterable type: "+i)}return a.value}(t,e)}function x(t){return null===t?null:C(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function w(t,e){return s(this,void 0,void 0,(function(){var n,r,i,a,o,s;return u(this,(function(u){switch(u.label){case 0:n=new Map,y(t,e,n),r=0,i=Array.from(n.keys()),u.label=1;case 1:return r<i.length?(a=i[r],(o=n.get(a))instanceof Promise?[4,o]:[3,3]):[3,4];case 2:s=u.sent(),n.set(a,s),u.label=3;case 3:return r++,[3,1];case 4:return[2,y(t,e,n)]}}))}))}function C(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof i.b))}function N(t){return function(t,e){return y(t,e)}(t,S)}function S(t){return t instanceof i.b?{value:t.clone(),recurse:!1}:C(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}var E=function(){function t(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}return t.prototype.wrap=function(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity},t.prototype.get=function(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]},t.prototype.set=function(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e},t.prototype.length=function(){var t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t},t.prototype.isFull=function(){return this.length()===this.capacity},t.prototype.isEmpty=function(){return 0===this.length()},t.prototype.push=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)},t.prototype.pushAll=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];this.push(r)}},t.prototype.pop=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);var t=this.get(this.end);return this.set(this.end,void 0),t},t.prototype.unshift=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)},t.prototype.shift=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t},t.prototype.shuffleExcise=function(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n},t}(),O=function(t){function e(){return t.call(this,e.INITIAL_CAPACITY)||this}return o(e,t),e.prototype.isFull=function(){return!1},e.prototype.push=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.push.call(this,e)},e.prototype.unshift=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.unshift.call(this,e)},e.prototype.expand=function(){for(var t=2*this.capacity,e=new Array(t),n=this.length(),r=0;r<n;r++)e[r]=this.get(this.wrap(this.begin+r));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n},e.INITIAL_CAPACITY=32,e}(E);function I(t){return new _(t)}function k(t){return new F(t)}function A(t,e){return new q(t,e)}var R,T,D=function(){function t(){}return t.prototype.toArray=function(){return s(this,void 0,void 0,(function(){var t,e;return u(this,(function(n){switch(n.label){case 0:return t=[],[4,this.next()];case 1:e=n.sent(),n.label=2;case 2:return e.done?[3,4]:(t.push(e.value),[4,this.next()]);case 3:return e=n.sent(),[3,2];case 4:return[2,t]}}))}))},t.prototype.toArrayForTest=function(){return s(this,void 0,void 0,(function(){var t,e,n;return u(this,(function(r){switch(r.label){case 0:return t=this.prefetch(100),e=[],[4,t.next()];case 1:n=r.sent(),r.label=2;case 2:return n.done?[3,4]:(e.push(n.value),[4,t.next()]);case 3:return n=r.sent(),[3,2];case 4:return[2,e]}}))}))},t.prototype.resolveFully=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:return[4,this.next()];case 1:t=e.sent(),e.label=2;case 2:return t.done?[3,4]:[4,this.next()];case 3:return t=e.sent(),[3,2];case 4:return[2]}}))}))},t.prototype.resolveWhile=function(t){return s(this,void 0,void 0,(function(){var e,n;return u(this,(function(r){switch(r.label){case 0:return[4,this.next()];case 1:e=r.sent(),n=t(e.value),r.label=2;case 2:return e.done||!n?[3,4]:[4,this.next()];case 3:return e=r.sent(),n=t(e.value),[3,2];case 4:return[2]}}))}))},t.prototype.handleErrors=function(t){return new V(this,t)},t.prototype.filter=function(t){return new P(this,t)},t.prototype.map=function(t){return new j(this,t)},t.prototype.mapAsync=function(t){return new W(this,t)},t.prototype.serialMapAsync=function(t){return new W(this,t).serial()},t.prototype.flatmap=function(t){return new G(this,t)},t.prototype.forEachAsync=function(t){return s(this,void 0,void 0,(function(){return u(this,(function(e){return[2,this.map(t).resolveFully()]}))}))},t.prototype.serialForEach=function(t){return s(this,void 0,void 0,(function(){return u(this,(function(e){return[2,this.serialMapAsync(t).resolveWhile((function(t){return!0===t}))]}))}))},t.prototype.rowMajorBatch=function(t,e){return void 0===e&&(e=!0),new B(this,t,e)},t.prototype.columnMajorBatch=function(t,e,n){return void 0===e&&(e=!0),void 0===n&&(n=x),this.rowMajorBatch(t,e).map((function(t){return b(t,n)}))},t.prototype.concatenate=function(t,e){return new q(I([this,t]),e)},t.prototype.take=function(t){return t<0||null==t?this:new L(this,t)},t.prototype.skip=function(t){return t<0||null==t?this:new z(this,t)},t.prototype.prefetch=function(t){return new H(this,t)},t.prototype.shuffle=function(t,e){return new K(this,t,e)},t.prototype.serial=function(){return new M(this)},t}(),_=function(t){function e(e){var n=t.call(this)||this;return n.items=e,n.trav=0,n}return o(e,t),e.prototype.summary=function(){return"Array of "+this.items.length+" items"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){return this.trav>=this.items.length?[2,{value:null,done:!0}]:(t=this.items[this.trav],this.trav++,[2,{value:N(t),done:!1}])}))}))},e}(D),F=function(t){function e(e){var n=t.call(this)||this;return n.nextFn=e,n}return o(e,t),e.prototype.summary=function(){return"Function call"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){try{return[2,this.nextFn()]}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}return[2]}))}))},e}(D),M=function(t){function e(e){var n=t.call(this)||this;return n.upstream=e,n.lastRead=Promise.resolve({value:null,done:!1}),n}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Serial"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return[2,this.upstream.next()]}))}))},e}(D),z=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.maxCount=n,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Skip"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:return this.count++<this.maxCount?[4,this.upstream.next()]:[3,2];case 1:return(t=e.sent()).done?[2,t]:(Object(i.R)(t.value),[3,0]);case 2:return[2,this.upstream.next()]}}))}))},e}(D),L=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.maxCount=n,r.count=0,r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Take"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return this.count++>=this.maxCount?[2,{value:null,done:!0}]:[2,this.upstream.next()]}))}))},e}(D),B=function(t){function e(e,n,r){void 0===r&&(r=!0);var i=t.call(this)||this;return i.upstream=e,i.batchSize=n,i.enableSmallLastBatch=r,i.lastRead=Promise.resolve({value:null,done:!1}),i}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> RowMajorBatch"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){var t,e;return u(this,(function(n){switch(n.label){case 0:t=[],n.label=1;case 1:return t.length<this.batchSize?[4,this.upstream.next()]:[3,3];case 2:return(e=n.sent()).done?this.enableSmallLastBatch&&t.length>0?[2,{value:t,done:!1}]:[2,{value:null,done:!0}]:(t.push(e.value),[3,1]);case 3:return[2,{value:t,done:!1}]}}))}))},e}(D),P=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.predicate=n,r.lastRead=Promise.resolve({value:null,done:!1}),r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Filter"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:return[4,this.upstream.next()];case 1:return(t=e.sent()).done||this.predicate(t.value)?[2,t]:(Object(i.R)(t.value),[3,0]);case 2:return[2]}}))}))},e}(D),j=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Map"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,a,o,s;return u(this,(function(u){switch(u.label){case 0:return[4,this.upstream.next()];case 1:if((t=u.sent()).done)return[2,{value:null,done:!0}];for(e=i.Uc.getTensorsInContainer(t.value),n=this.transform(t.value),r=i.Uc.getTensorsInContainer(n),a=0,o=e;a<o.length;a++)s=o[a],i.Uc.isTensorInList(s,r)||s.dispose();return[2,{value:n,done:!1}]}}))}))},e}(D),V=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.handler=n,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> handleErrors"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.upstream.next()];case 2:return[2,e.sent()];case 3:return t=e.sent(),this.handler(t)?[3,4]:[2,{value:null,done:!0}];case 4:return[3,0];case 5:return[2]}}))}))},e}(D),W=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> AsyncMap"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,a,o,s;return u(this,(function(u){switch(u.label){case 0:return[4,this.upstream.next()];case 1:return(t=u.sent()).done?[2,{value:null,done:!0}]:(e=i.Uc.getTensorsInContainer(t.value),[4,this.transform(t.value)]);case 2:for(n=u.sent(),r=i.Uc.getTensorsInContainer(n),a=0,o=e;a<o.length;a++)s=o[a],i.Uc.isTensorInList(s,r)||s.dispose();return[2,{value:n,done:!1}]}}))}))},e}(D),U=function(t){function e(){var e=t.call(this)||this;return e.outputQueue=new O,e.lastRead=Promise.resolve({value:null,done:!1}),e}return o(e,t),e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return 0!==this.outputQueue.length()?[3,2]:[4,this.pump()];case 1:return t.sent()?[3,0]:[2,{value:null,done:!0}];case 2:return[2,{value:this.outputQueue.shift(),done:!1}]}}))}))},e}(D),G=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.transform=n,r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Flatmap"},e.prototype.pump=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,a,o,s;return u(this,(function(u){switch(u.label){case 0:return[4,this.upstream.next()];case 1:if((t=u.sent()).done)return[2,!1];for(e=i.Uc.getTensorsInContainer(t.value),n=this.transform(t.value),r=i.Uc.getTensorsInContainer(n),this.outputQueue.pushAll(n),a=0,o=e;a<o.length;a++)s=o[a],i.Uc.isTensorInList(s,r)||s.dispose();return[2,!0]}}))}))},e}(U),q=function(t){function e(e,n){var r=t.call(this)||this;return r.baseErrorHandler=n,r.lastRead=null,r.iterator=null,r.moreIterators=e,r}return o(e,t),e.prototype.summary=function(){return"TODO: fill in upstream of chained summaries -> Chained"},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return this.lastRead=this.readFromChain(this.lastRead),[2,this.lastRead]}))}))},e.prototype.readFromChain=function(t){return s(this,void 0,void 0,(function(){var e,n;return u(this,(function(r){switch(r.label){case 0:return[4,t];case 1:return r.sent(),null!=this.iterator?[3,3]:[4,this.moreIterators.next()];case 2:if((e=r.sent()).done)return[2,{value:null,done:!0}];this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler)),r.label=3;case 3:return[4,this.iterator.next()];case 4:return(n=r.sent()).done?(this.iterator=null,[2,this.readFromChain(t)]):[2,n]}}))}))},e}(D);(T=R||(R={}))[T.FAIL=0]="FAIL",T[T.SHORTEST=1]="SHORTEST",T[T.LONGEST=2]="LONGEST";!function(t){function e(e,n){void 0===n&&(n=R.FAIL);var r=t.call(this)||this;return r.iterators=e,r.mismatchMode=n,r.count=0,r.currentPromise=null,r}o(e,t),e.prototype.summary=function(){return"{TODO: fill in upstream of zip summaries} -> Zip"},e.prototype.nextState=function(t){return s(this,void 0,void 0,(function(){function e(t){return t instanceof D?{value:t.next().then((function(t){return n++,t.done&&r++,t.value})),recurse:!1}:{value:null,recurse:!0}}var n,r,i;return u(this,(function(a){switch(a.label){case 0:return[4,t];case 1:return a.sent(),n=0,r=0,[4,w(this.iterators,e)];case 2:if(i=a.sent(),n===r)return[2,{value:null,done:!0}];if(r>0)switch(this.mismatchMode){case R.FAIL:throw new Error("Zipped streams should have the same length. Mismatched at element "+this.count+".");case R.SHORTEST:return[2,{value:null,done:!0}];case R.LONGEST:}return this.count++,[2,{value:i,done:!1}]}}))}))},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return this.currentPromise=this.nextState(this.currentPromise),[2,this.currentPromise]}))}))}}(D);var H=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.bufferSize=n,r.buffer=new E(n),r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Prefetch"},e.prototype.refill=function(){for(;!this.buffer.isFull();){var t=this.upstream.next();this.buffer.push(t)}},e.prototype.next=function(){return this.refill(),this.buffer.shift()},e}(D),K=function(t){function e(e,n,r){var a=t.call(this,e,n)||this;return a.upstream=e,a.windowSize=n,a.upstreamExhausted=!1,a.random=v(r||i.cd.now().toString()),a.lastRead=Promise.resolve({value:null,done:!1}),a}return o(e,t),e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t=this;return u(this,(function(e){return this.lastRead=this.lastRead.then((function(){return t.serialNext()})),[2,this.lastRead]}))}))},e.prototype.randomInt=function(t){return Math.floor(this.random()*t)},e.prototype.chooseIndex=function(){return this.randomInt(this.buffer.length())},e.prototype.serialNext=function(){return s(this,void 0,void 0,(function(){var t,e;return u(this,(function(n){switch(n.label){case 0:this.upstreamExhausted||this.refill(),n.label=1;case 1:return this.buffer.isEmpty()?[3,3]:(t=this.chooseIndex(),[4,this.buffer.shuffleExcise(t)]);case 2:return(e=n.sent()).done?(this.upstreamExhausted=!0,[3,1]):(this.refill(),[2,e]);case 3:return[2,{value:null,done:!0}]}}))}))},e}(H),X=function(){function t(){this.size=null}return t.prototype.batch=function(t,e){var n=this;void 0===e&&(e=!0);var r=this;return i.cd.assert(t>0,(function(){return"batchSize needs to be positive, but it is\n      "+t})),Y((function(){return s(n,void 0,void 0,(function(){return u(this,(function(n){switch(n.label){case 0:return[4,r.iterator()];case 1:return[2,n.sent().columnMajorBatch(t,e,$)]}}))}))}),this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t))},t.prototype.concatenate=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){var e,r;return u(this,(function(i){switch(i.label){case 0:return[4,n.iterator()];case 1:return r=(e=i.sent()).concatenate,[4,t.iterator()];case 2:return[2,r.apply(e,[i.sent()])]}}))}))}),this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null)},t.prototype.filter=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().filter((function(e){return Object(i.Vc)((function(){return t(e)}))}))]}}))}))}),this.size===1/0?1/0:null)},t.prototype.forEachAsync=function(t){return s(this,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,this.iterator()];case 1:return[2,e.sent().forEachAsync(t)]}}))}))},t.prototype.forEach=function(t){return s(this,void 0,void 0,(function(){return u(this,(function(e){return Object(i.O)("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"),[2,this.forEachAsync(t)]}))}))},t.prototype.map=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().map((function(e){return Object(i.Vc)((function(){return t(e)}))}))]}}))}))}),this.size)},t.prototype.mapAsync=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().mapAsync(t)]}}))}))}),this.size)},t.prototype.prefetch=function(t){var e=this;if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");var n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().prefetch(t)]}}))}))}),this.size)},t.prototype.repeat=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){var e=this;return u(this,(function(r){return[2,A(k((function(){return s(e,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:return t={},[4,n.iterator()];case 1:return[2,(t.value=e.sent(),t.done=!1,t)]}}))}))})).take(t))]}))}))}),null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null)},t.prototype.skip=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().skip(t)]}}))}))}),null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null)},t.prototype.shuffle=function(t,e,n){var r=this;if(void 0===n&&(n=!0),null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting bufferSize to the dataset size ("+this.size+" elements)");var a=this,o=v(e||i.cd.now().toString());return Y((function(){return s(r,void 0,void 0,(function(){var e;return u(this,(function(r){switch(r.label){case 0:return e=o.int32(),n&&(e+=o.int32()),[4,a.iterator()];case 1:return[2,r.sent().shuffle(t,e.toString())]}}))}))}),this.size)},t.prototype.take=function(t){var e=this,n=this;return Y((function(){return s(e,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,n.iterator()];case 1:return[2,e.sent().take(t)]}}))}))}),null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null)},t.prototype.toArray=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return[4,this.iterator()];case 1:return[2,t.sent().toArray()]}}))}))},t.prototype.toArrayForTest=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return[4,this.iterator()];case 1:return[2,t.sent().toArrayForTest()]}}))}))},t.MAX_BUFFER_SIZE=1e4,t}();function Y(t,e){return void 0===e&&(e=null),new(function(n){function r(){var t=null!==n&&n.apply(this,arguments)||this;return t.size=e,t}return o(r,n),r.prototype.iterator=function(){return s(this,void 0,void 0,(function(){return u(this,(function(e){return[2,t()]}))}))},r}(X))}function $(t){return null===t?null:function(t){return null==t||function(t){return null===t||"object"!=typeof t&&"function"!=typeof t}(t)||Array.isArray(t)||"object"==typeof t&&t instanceof i.b||i.cd.isTypedArray(t)}(t[0])?{value:J(t),recurse:!1}:{value:null,recurse:!0}}function J(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof i.b?Object(i.Lc)(t):Object(i.Rc)(t)}var Z=function(t){function e(e){var n=t.call(this)||this;return n.input=e,n}return o(e,t),e.prototype.iterator=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){switch(e.label){case 0:return[4,this.input.iterator()];case 1:return t=e.sent(),[2,t.decodeUTF8().split("\n").map((function(t){return t.endsWith("\r")&&(t=t.slice(0,-1)),t}))]}}))}))},e}(X),Q=Symbol("out"),tt=Symbol("field"),et=Symbol("quote"),nt=Symbol("quoteafterquote"),rt=Symbol("quoteinquote"),it=(function(t){function e(e,n){var r=t.call(this)||this;return r.input=e,r.hasHeader=!0,r.fullColumnNames=null,r.columnNamesValidated=!1,r.columnConfigs=null,r.configuredColumnsOnly=!1,r.delimiter=",",r.delimWhitespace=!1,r.base=new Z(e),n||(n={}),r.hasHeader=!1!==n.hasHeader,r.fullColumnNames=n.columnNames,r.columnConfigs=n.columnConfigs,r.configuredColumnsOnly=n.configuredColumnsOnly,n.delimWhitespace?(i.cd.assert(null==n.delimiter,(function(){return"Delimiter should not be provided when delimWhitespace is true."})),r.delimWhitespace=!0,r.delimiter=" "):r.delimiter=n.delimiter?n.delimiter:",",r}o(e,t),e.prototype.columnNames=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:t.sent(),t.label=2;case 2:return[2,this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames]}}))}))},e.prototype.setColumnNames=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,a,o,s=this;return u(this,(function(u){switch(u.label){case 0:return[4,this.maybeReadHeaderLine()];case 1:if(t=u.sent(),!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");if(this.fullColumnNames&&t&&i.cd.assert(t.length===this.fullColumnNames.length,(function(){return"The length of provided columnNames ("+s.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."})),this.fullColumnNames||(this.fullColumnNames=t),e=this.fullColumnNames.reduce((function(t,e){return t[e]=t[e]+1||1,t}),{}),n=Object.keys(e).filter((function(t){return e[t]>1})),i.cd.assert(0===n.length,(function(){return"Duplicate column names found: "+n.toString()})),this.columnConfigs)for(r=0,a=Object.keys(this.columnConfigs);r<a.length;r++)if(o=a[r],-1===this.fullColumnNames.indexOf(o))throw new Error('The key "'+o+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");return this.columnNamesValidated=!0,[2]}}))}))},e.prototype.maybeReadHeaderLine=function(){return s(this,void 0,void 0,(function(){var t,e;return u(this,(function(n){switch(n.label){case 0:return this.hasHeader?[4,this.base.iterator()]:[3,3];case 1:return[4,n.sent().next()];case 2:if((t=n.sent()).done)throw new Error("No data was found for CSV parsing.");return e=t.value,[2,this.parseRow(e,!1)];case 3:return[2,null]}}))}))},e.prototype.iterator=function(){return s(this,void 0,void 0,(function(){var t,e=this;return u(this,(function(n){switch(n.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:n.sent(),n.label=2;case 2:return[4,this.base.iterator()];case 3:return t=n.sent(),this.hasHeader&&(t=t.skip(1)),[2,t.map((function(t){return e.makeDataElement(t)}))]}}))}))},e.prototype.makeDataElement=function(t){for(var e=this.parseRow(t),n={},r={},i=0;i<this.fullColumnNames.length;i++){var a=this.fullColumnNames[i],o=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||o){var s=e[i],u=null;if(""===s)if(o&&void 0!==o.default)u=o.default;else{if(o&&(o.required||o.isLabel))throw new Error("Required column "+a+" is empty in this line: "+t);u=void 0}else{var c=Number(s);if(isNaN(c))u=o&&"bool"===o.dtype?this.getBoolean(s):s;else if(o&&o.dtype)switch(o.dtype){case"float32":u=c;break;case"int32":u=Math.floor(c);break;case"bool":u=this.getBoolean(s);break;default:u=c}else u=c}o&&o.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:{xs:n,ys:r}},e.prototype.getBoolean=function(t){return"1"===t||"true"===t.toLowerCase()?1:0},e.prototype.parseRow=function(t,e){void 0===e&&(e=!0);for(var n=[],r=0,i=t.length,a=Q,o=0;o<i;o++)switch(a){case Q:switch(t.charAt(o)){case'"':r=o+1,a=et;break;case this.delimiter:if(r=o+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Q;break;default:a=tt,r=o}break;case tt:switch(t.charAt(o)){case this.delimiter:n.push(t.substring(r,o)),a=Q,r=o+1}break;case et:switch(t.charAt(o)){case'"':a=nt}break;case nt:switch(t.charAt(o)){case this.delimiter:n.push(t.substring(r,o-1)),a=Q,r=o+1;break;case'"':a=et;break;default:a=rt}break;case rt:switch(t.charAt(o)){case'"':a=et}}if(a===nt?n.push(t.substring(r,i-1)):n.push(t.substring(r)),e&&n.length!==this.fullColumnNames.length)throw new Error("Invalid row in csv file. Should have "+this.fullColumnNames.length+" elements in a row, but got "+n);return n}}(X),function(t){function e(e){var n=t.call(this)||this;n.microphoneConfig=e,n.isClosed=!1,n.fftSize=e.fftSize||1024;var r=Math.log2(n.fftSize);if(n.fftSize<0||r<4||r>14||!Number.isInteger(r))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+n.fftSize);if(n.numFrames=e.numFramesPerSpectrogram||43,n.sampleRateHz=e.sampleRateHz,n.columnTruncateLength=e.columnTruncateLength||n.fftSize,n.audioTrackConstraints=e.audioTrackConstraints,n.smoothingTimeConstant=e.smoothingTimeConstant||0,n.includeSpectrogram=!1!==e.includeSpectrogram,n.includeWaveform=!0===e.includeWaveform,!n.includeSpectrogram&&!n.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");return n}o(e,t),e.prototype.summary=function(){return"microphone"},e.create=function(t){return void 0===t&&(t={}),s(this,void 0,void 0,(function(){var n;return u(this,(function(r){switch(r.label){case 0:if(Object(i.W)().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");return[4,(n=new e(t)).start()];case 1:return r.sent(),[2,n]}}))}))},e.prototype.start=function(){return s(this,void 0,void 0,(function(){var t,e,n,r;return u(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),t=this,[4,navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})];case 1:return t.stream=i.sent(),[3,3];case 2:throw e=i.sent(),new Error("Error thrown while initializing video stream: "+e.message);case 3:if(!this.stream)throw new Error("Could not obtain audio from microphone.");if(n=window.AudioContext||window.webkitAudioContext,this.audioContext=new n,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error("Mismatch in sampling rate: Expected: "+this.sampleRateHz+"; Actual: "+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;return r=this.audioContext.createMediaStreamSource(this.stream),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,r.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize),[2]}}))}))},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,i;return u(this,(function(a){switch(a.label){case 0:return this.isClosed?[2,{value:null,done:!0}]:[4,this.getAudioData()];case 1:return n=a.sent(),this.includeSpectrogram&&(r=this.flattenQueue(n.freqDataQueue),t=this.getTensorFromAudioDataArray(r,[this.numFrames,this.columnTruncateLength,1])),this.includeWaveform&&(i=this.flattenQueue(n.timeDataQueue),e=this.getTensorFromAudioDataArray(i,[this.numFrames*this.fftSize,1])),[2,{value:{spectrogram:t,waveform:e},done:!1}]}}))}))},e.prototype.capture=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return[4,this.next()];case 1:return[2,t.sent().value]}}))}))},e.prototype.getAudioData=function(){return s(this,void 0,void 0,(function(){var t,e,n,r=this;return u(this,(function(i){return t=[],e=[],n=0,[2,new Promise((function(i){var a=setInterval((function(){r.includeSpectrogram&&(r.analyser.getFloatFrequencyData(r.freqData),r.freqData[0]===-1/0&&i({freqDataQueue:t,timeDataQueue:e}),t.push(r.freqData.slice(0,r.columnTruncateLength))),r.includeWaveform&&(r.analyser.getFloatTimeDomainData(r.timeData),e.push(r.timeData.slice())),++n===r.numFrames&&(clearInterval(a),i({freqDataQueue:t,timeDataQueue:e}))}),r.fftSize/r.sampleRateHz*1e3)}))]}))}))},e.prototype.stop=function(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())},e.prototype.toArray=function(){throw new Error("Can not convert infinite audio stream to array.")},e.prototype.getSampleRate=function(){return this.sampleRateHz},e.prototype.flattenQueue=function(t){var e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((function(t,r){return n.set(t,r*e)})),n},e.prototype.getTensorFromAudioDataArray=function(t,e){var n=new Float32Array(i.cd.sizeFromShape(e));return n.set(t,n.length-t.length),Object(i.Rc)(n,e)}}(D),function(t){function e(e,n){var r=t.call(this)||this;if(r.webcamVideoElement=e,r.webcamConfig=n,r.isClosed=!0,r.resize=!1,r.needToResize())if(r.resize=!0,r.cropSize=[r.webcamConfig.resizeHeight,r.webcamConfig.resizeWidth],r.cropBoxInd=Object(i.Sc)([0],"int32"),r.webcamConfig.centerCrop){var a=1*r.webcamConfig.resizeWidth/r.webcamVideoElement.width,o=1*r.webcamConfig.resizeHeight/r.webcamVideoElement.height,s=(1-a)/2,u=(1-o)/2,c=s+a,l=o+u;r.cropBox=Object(i.Tc)([u,s,l,c],[1,4])}else r.cropBox=Object(i.Tc)([0,0,1,1],[1,4]);return r}o(e,t),e.prototype.summary=function(){return"webcam"},e.create=function(t,n){return void 0===n&&(n={}),s(this,void 0,void 0,(function(){var r;return u(this,(function(a){switch(a.label){case 0:if(Object(i.W)().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!n.resizeWidth||!n.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=n.resizeWidth,t.height=n.resizeHeight}return[4,(r=new e(t,n)).start()];case 1:return a.sent(),[2,r]}}))}))},e.prototype.start=function(){return s(this,void 0,void 0,(function(){var t,e,n=this;return u(this,(function(r){switch(r.label){case 0:this.webcamConfig.facingMode&&i.cd.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(function(){return"Invalid webcam facing mode: "+n.webcamConfig.facingMode+". Please provide 'user' or 'environment'"})),r.label=1;case 1:return r.trys.push([1,3,,4]),t=this,[4,navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})];case 2:return t.stream=r.sent(),[3,4];case 3:throw(e=r.sent()).message="Error thrown while initializing video stream: "+e.message,e;case 4:if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,[2,new Promise((function(t){n.webcamVideoElement.onloadedmetadata=function(){t()}}))]}}))}))},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){if(this.isClosed)return[2,{value:null,done:!0}];try{t=i.y.fromPixels(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return[2,{value:t,done:!1}];try{return[2,{value:this.cropAndResizeFrame(t),done:!1}]}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}return[2]}))}))},e.prototype.needToResize=function(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)},e.prototype.cropAndResizeFrame=function(t){var e=this;return Object(i.Vc)((function(){var n,r=t.toFloat().expandDims(0),a=(n=i.ob.cropAndResize(r,e.cropBox,e.cropBoxInd,e.cropSize,"bilinear")).shape;return n.reshape(a.slice(1))}))},e.prototype.capture=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return[4,this.next()];case 1:return[2,t.sent().value]}}))}))},e.prototype.stop=function(){this.stream.getTracks().forEach((function(t){return t.stop()}));try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0},e.prototype.toArray=function(){throw new Error("Can not convert infinite video stream to array.")}}(D),function(){}),at=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.split=function(t){return new ot(this,t)},e}(D),ot=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.impl=new st(e,n),r}return o(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return[2,this.impl.next()]}))}))},e}(at),st=function(t){function e(e,n){var r=t.call(this)||this;return r.upstream=e,r.separator=n,r.carryover="",r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Split('"+this.separator+"')"},e.prototype.pump=function(){return s(this,void 0,void 0,(function(){var t,e,n,r,i;return u(this,(function(a){switch(a.label){case 0:return[4,this.upstream.next()];case 1:if((t=a.sent()).done)return""===this.carryover?[2,!1]:(this.outputQueue.push(this.carryover),this.carryover="",[2,!0]);for((e=t.value.split(this.separator))[0]=this.carryover+e[0],n=0,r=e.slice(0,-1);n<r.length;n++)i=r[n],this.outputQueue.push(i);return this.carryover=e[e.length-1],[2,!0]}}))}))},e}(U),ut=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.decodeUTF8=function(){return new ct(this)},e}(D),ct=function(t){function e(e){var n=t.call(this)||this;return n.upstream=e,n.impl=new lt(e),n}return o(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return[2,this.impl.next()]}))}))},e}(at),lt=function(t){function e(e){var r=t.call(this)||this;if(r.upstream=e,Object(i.W)().get("IS_BROWSER"))r.decoder=new TextDecoder("utf-8");else{var a=n(15).StringDecoder;r.decoder=new a("utf8")}return r}return o(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Utf8"},e.prototype.pump=function(){return s(this,void 0,void 0,(function(){var t,e,n;return u(this,(function(a){switch(a.label){case 0:return[4,this.upstream.next()];case 1:return(t=a.sent()).done?[2,!1]:(e=t.value,n=Object(i.W)().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(r.from(e.buffer)),this.outputQueue.push(n),[2,!0])}}))}))},e}(U),pt=function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.file=e,r.options=n,i.cd.assert(e instanceof Uint8Array||!!Object(i.W)().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(function(){return"FileChunkIterator only supports File, Blob and Uint8Array right now."})),r.offset=n.offset||0,r.chunkSize=n.chunkSize||1048576,r}return o(e,t),e.prototype.summary=function(){return"FileChunks "+this.file},e.prototype.next=function(){return s(this,void 0,void 0,(function(){var t,e,n=this;return u(this,(function(r){switch(r.label){case 0:return this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size)?[2,{value:null,done:!0}]:(t=new Promise((function(t,e){var r=n.offset+n.chunkSize;if(n.file instanceof Uint8Array)t(new Uint8Array(n.file.slice(n.offset,r)));else{var i=new FileReader;i.onload=function(n){var r=i.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(r)},i.onabort=function(t){return e(new Error("Aborted"))},i.onerror=function(t){return e(new Error(t.type))};var a=n.file.slice(n.offset,r);i.readAsArrayBuffer(a)}n.offset=r})),e={},[4,t]);case 1:return[2,(e.value=r.sent(),e.done=!1,e)]}}))}))},e}(ut);function ht(t,e){return void 0===e&&(e={}),s(this,void 0,void 0,(function(){var n,r,a,o,s;return u(this,(function(u){switch(u.label){case 0:return"string"==typeof t?n=t:(n=t.url,r=ft(t)),[4,i.cd.fetch(n,r)];case 1:return(a=u.sent()).ok?(s=Uint8Array.bind,[4,a.arrayBuffer()]):[3,3];case 2:return o=new(s.apply(Uint8Array,[void 0,u.sent()])),[2,new pt(o,e)];case 3:throw new Error(a.statusText)}}))}))}var ft=function(t){return{method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity}};function dt(t){return"string"==typeof t&&"file://"===t.substr(0,7)}var mt=function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.input=e,r.options=n,r}return o(e,t),e.prototype.iterator=function(){return s(this,void 0,void 0,(function(){var t;return u(this,(function(e){return dt(this.input)&&Object(i.W)().get("IS_NODE")&&(t=n(16),this.input=t.readFileSync(this.input.substr(7))),[2,new pt(this.input,this.options)]}))}))},e}(it);!function(t){function e(e,n){void 0===n&&(n={});var r=t.call(this)||this;return r.url=e,r.fileOptions=n,r}o(e,t),e.prototype.iterator=function(){return s(this,void 0,void 0,(function(){return u(this,(function(t){return dt(this.url)?[2,new mt(this.url,this.fileOptions).iterator()]:[2,ht(this.url,this.fileOptions)]}))}))}}(it);var gt="1.4.0"}).call(this,n(1),n(4).Buffer)},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(6),i=n(7),a=n(8);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return p(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|f(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):h(t,e);if("Buffer"===e.type&&a(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function p(t,e){if(l(e),t=s(t,e<0?0:0|f(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|f(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function f(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(t).length;default:if(r)return V(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,n);case"utf8":case"utf-8":return O(this,e,n);case"ascii":return k(this,e,n);case"latin1":case"binary":return A(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var a,o=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;o=2,s/=2,u/=2,n/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(a=n;a<s;a++)if(c(t,a)===c(e,-1===l?0:a-l)){if(-1===l&&(l=a),a-l+1===u)return l*o}else-1!==l&&(a-=a-l),l=-1}else for(n+u>s&&(n=s-u),a=n;a>=0;a--){for(var p=!0,h=0;h<u;h++)if(c(t,a+h)!==c(e,h)){p=!1;break}if(p)return a}return-1}function b(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var a=e.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var o=0;o<r;++o){var s=parseInt(e.substr(2*o,2),16);if(isNaN(s))return o;t[n+o]=s}return o}function x(t,e,n,r){return U(V(e,t.length-n),t,n,r)}function w(t,e,n,r){return U(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function N(t,e,n,r){return U(W(e),t,n,r)}function S(t,e,n,r){return U(function(t,e){for(var n,r,i,a=[],o=0;o<t.length&&!((e-=2)<0);++o)n=t.charCodeAt(o),r=n>>8,i=n%256,a.push(i),a.push(r);return a}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function O(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var a,o,s,u,c=t[i],l=null,p=c>239?4:c>223?3:c>191?2:1;if(i+p<=n)switch(p){case 1:c<128&&(l=c);break;case 2:128==(192&(a=t[i+1]))&&(u=(31&c)<<6|63&a)>127&&(l=u);break;case 3:a=t[i+1],o=t[i+2],128==(192&a)&&128==(192&o)&&(u=(15&c)<<12|(63&a)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:a=t[i+1],o=t[i+2],s=t[i+3],128==(192&a)&&128==(192&o)&&128==(192&s)&&(u=(15&c)<<18|(63&a)<<12|(63&o)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,p=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=p}return function(t){var e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=I));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return p(null,t)},u.allocUnsafeSlow=function(t){return p(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,a=Math.min(n,r);i<a;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!a(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?O(this,0,t):m.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(i>>>=0)-(r>>>=0),o=(n>>>=0)-(e>>>=0),s=Math.min(a,o),c=this.slice(r,i),l=t.slice(e,n),p=0;p<s;++p)if(c[p]!==l[p]){a=c[p],o=l[p];break}return a<o?-1:o<a?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return x(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return N(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var I=4096;function k(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function R(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",a=e;a<n;++a)i+=j(t[a]);return i}function T(t,e,n){for(var r=t.slice(e,n),i="",a=0;a<r.length;a+=2)i+=String.fromCharCode(r[a]+256*r[a+1]);return i}function D(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function _(t,e,n,r,i,a){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function F(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,a=Math.min(t.length-n,2);i<a;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,a=Math.min(t.length-n,4);i<a;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function z(t,e,n,r,i,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(t,e,n,r,a){return a||z(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function B(t,e,n,r,a){return a||z(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var a=0;a<i;++a)n[a]=this[a+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||D(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||D(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||D(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||D(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||D(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=e,i=1,a=this[t+--r];r>0&&(i*=256);)a+=this[t+--r]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*e)),a},u.prototype.readInt8=function(t,e){return e||D(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||D(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||D(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||D(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||D(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||_(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,a=0;for(this[e]=255&t;++a<n&&(i*=256);)this[e+a]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||_(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,a=1;for(this[e+i]=255&t;--i>=0&&(a*=256);)this[e+i]=t/a&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):F(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):F(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);_(this,t,e,n,i-1,-i)}var a=0,o=1,s=0;for(this[e]=255&t;++a<n&&(o*=256);)t<0&&0===s&&0!==this[e+a-1]&&(s=1),this[e+a]=(t/o>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);_(this,t,e,n,i-1,-i)}var a=n-1,o=1,s=0;for(this[e+a]=255&t;--a>=0&&(o*=256);)t<0&&0===s&&0!==this[e+a+1]&&(s=1),this[e+a]=(t/o>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):F(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):F(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return B(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return B(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,a=r-n;if(this===t&&n<e&&e<r)for(i=a-1;i>=0;--i)t[i+e]=this[i+n];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+a),e);return a},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var o=u.isBuffer(t)?t:V(new u(t,r).toString()),s=o.length;for(a=0;a<n-e;++a)this[a+e]=o[a%s]}return this};var P=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function V(t,e){var n;e=e||1/0;for(var r=t.length,i=null,a=[],o=0;o<r;++o){if((n=t.charCodeAt(o))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(e-=3)>-1&&a.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&a.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function W(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(P,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function U(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(1))},function(t,e){var n,r,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var u,c=[],l=!1,p=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):p=-1,c.length&&f())}function f(){if(!l){var t=s(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++p<e;)u&&u[p].run();p=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||s(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),o=r[0],s=r[1],u=new a(function(t,e,n){return 3*(e+n)/4-n}(0,o,s)),l=0,p=s>0?o-4:o;for(n=0;n<p;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===s&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===s&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,a=[],o=0,s=n-i;o<s;o+=16383)a.push(l(t,o,o+16383>s?s:o+16383));1===i?(e=t[n-1],a.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],a.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return a.join("")};for(var r=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=o.length;s<u;++s)r[s]=o[s],i[o.charCodeAt(s)]=s;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,a,o=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),o.push(r[(a=i)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var a,o,s=8*i-r-1,u=(1<<s)-1,c=u>>1,l=-7,p=n?i-1:0,h=n?-1:1,f=t[e+p];for(p+=h,a=f&(1<<-l)-1,f>>=-l,l+=s;l>0;a=256*a+t[e+p],p+=h,l-=8);for(o=a&(1<<-l)-1,a>>=-l,l+=r;l>0;o=256*o+t[e+p],p+=h,l-=8);if(0===a)a=1-c;else{if(a===u)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,r),a-=c}return(f?-1:1)*o*Math.pow(2,a-r)},e.write=function(t,e,n,r,i,a){var o,s,u,c=8*a-i-1,l=(1<<c)-1,p=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:a-1,d=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=l?(s=0,o=l):o+p>=1?(s=(e*u-1)*Math.pow(2,i),o+=p):(s=e*Math.pow(2,p-1)*Math.pow(2,i),o=0));i>=8;t[n+f]=255&s,f+=d,s/=256,i-=8);for(o=o<<i|s,c+=i;c>0;t[n+f]=255&o,f+=d,o/=256,c-=8);t[n+f-d]|=128*m}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new a(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new a(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(10),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,a,o,s,u=1,c={},l=!1,p=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){d(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((a=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){a.port2.postMessage(t)}):p&&"onreadystatechange"in p.createElement("script")?(i=p.documentElement,r=function(t){var e=p.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(o="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(o)&&d(+e.data.slice(o.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(o+e,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},h.clearImmediate=f}function f(t){delete c[t]}function d(t){if(l)setTimeout(d,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{f(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(5))},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.r(e);var r=n(0),i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function a(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o,s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function u(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}function l(){return null==o&&(o=Object(r.s)().epsilon()),o}var p=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),h=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),f=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),d=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error),m=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return a(e,t),e}(Error);!function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}a(e,t)}(Error);function g(t,e){if(Array.isArray(t)){for(var n=[],r=0;r<e;r++)n=n.concat(t);return n}return(n=new Array(e)).fill(t),n}function v(t,e){if(!t)throw new m(e)}function y(t,e){for(var n=0,r=0,i=t;r<i.length;r++)i[r]===e&&n++;return n}function b(t){return 1===t.length?t[0]:t}function x(t){return Array.isArray(t)?t:[t]}function w(t){var e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function C(t){return t.length<=1?t:-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(function(t,e){return e.toUpperCase()}))}var N={};function S(t){if(null==t)return null;var e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function E(t,e,n,r,i){var a,o,u;if(void 0===e&&(e={}),void 0===n&&(n={}),void 0===r&&(r="object"),void 0===i&&(i=!1),"string"==typeof t){var c=t,l=void 0;if(c in n)l=n[c];else if(c in N)l=N[c];else if(null==(l=e[c]))throw new f("Unknown "+r+": "+t+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");return l}var p=t;if(null==p.className||null==p.config)throw new f(r+": Improper config format: "+JSON.stringify(p)+".\n'className' and 'config' must set.");var h=p.className,d=void 0,m=void 0;if(h in n?(d=(a=n[h])[0],m=a[1]):h in N?(d=(o=N.className)[0],m=o[1]):h in e&&(d=(u=e[h])[0],m=u[1]),null==d)throw new f("Unknown "+r+": "+h+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");if(null!=m){for(var g={},v=0,y=Object.keys(N);v<y.length;v++)g[E=y[v]]=N[E];for(var b=0,x=Object.keys(n);b<x.length;b++)g[E=x[b]]=n[E];p.config.customObjects=g;for(var w=s({},N),C=0,S=Object.keys(n);C<S.length;C++){var E=S[C];N[E]=n[E]}!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((function(e){return t(e)}));else for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n],a=e[i];null!=a&&"object"==typeof a&&(Array.isArray(a)||"ndarray"!==a.type||"number"!=typeof a.value?t(a):e[i]=a.value)}}(p.config);var O=m(d,p.config,n,i);return N=s({},w),O}w=s({},N);for(var I=0,k=Object.keys(n);I<k.length;I++)E=k[I],N[E]=n[E];return O=new d(p.config),N=s({},w),O}function O(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function I(t){if(null==t)return t;for(var e=[],n=0,r=t;n<r.length;n++){var i=r[n];-1===e.indexOf(i)&&e.push(i)}return e}function k(t){if(null==t)throw new f("Invalid value in obj: "+JSON.stringify(t));for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function A(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new f(n+" is not a valid "+e+".  Valid values are "+t+" or null/undefined.")}function R(t,e,n,r){return void 0===n&&(n=0),void 0===r&&(r=1/0),v(n>=0),v(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((function(t){return typeof t===e}))}function T(t,e){Array.isArray(t)?(r.cd.assert(t.length>0,(function(){return e+" is unexpectedly an empty array."})),t.forEach((function(t,n){return T(t,"element "+(n+1)+" of "+e)}))):r.cd.assert(Number.isInteger(t)&&t>0,(function(){return"Expected "+e+" to be a positive integer, but got "+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map((function(e){return t(e)})).join(",")+"]":"string"==typeof e?'"'+e+'"':""+e}(t)+"."}))}function D(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function _(t,e){return Object(r.Vc)((function(){return Object(r.Hc)(Object(r.Oc)(Object(r.Qb)(t,t),e,!0))}))}var F=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.getConfig=function(){return{}},e}(r.rc.Serializable),M=function(t){function e(e){var n=t.call(this)||this;return n.defaultMaxValue=2,n.defaultAxis=0,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.Vc)((function(){var n=_(t,e.axis),i=Object(r.B)(n,0,e.maxValue);return Object(r.Pb)(t,Object(r.S)(i,Object(r.f)(l(),n)))}))},e.prototype.getConfig=function(){return{maxValue:this.maxValue,axis:this.axis}},e.className="MaxNorm",e}(F);r.rc.registerClass(M);var z=function(t){function e(e){var n=t.call(this)||this;return n.defaultAxis=0,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.Vc)((function(){return Object(r.S)(t,Object(r.f)(l(),_(t,e.axis)))}))},e.prototype.getConfig=function(){return{axis:this.axis}},e.className="UnitNorm",e}(F);r.rc.registerClass(z);var L=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.hc)(t)},e.className="NonNeg",e}(F);r.rc.registerClass(L);var B=function(t){function e(e){var n=t.call(this)||this;return n.defaultMinValue=0,n.defaultMaxValue=1,n.defaultRate=1,n.defaultAxis=0,n.minValue=null!=e.minValue?e.minValue:n.defaultMinValue,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.rate=null!=e.rate?e.rate:n.defaultRate,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.Vc)((function(){var n=_(t,e.axis),i=Object(r.f)(Object(r.Pb)(e.rate,Object(r.B)(n,e.minValue,e.maxValue)),Object(r.Pb)(1-e.rate,n));return Object(r.Pb)(t,Object(r.S)(i,Object(r.f)(l(),n)))}))},e.prototype.getConfig=function(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}},e.className="MinMaxNorm",e}(F);r.rc.registerClass(B);var P={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function j(t){return S(t)}function V(t,e){return void 0===e&&(e={}),E(t,r.rc.SerializationMap.getMap().classNameMap,e,"constraint")}function W(t){return null==t?null:"string"==typeof t?V({className:t in P?P[t]:t,config:{}}):t instanceof F?t:V(t)}Object.freeze({maxNorm:function(t){return new M(t)},unitNorm:function(t){return new z(t)},nonNeg:function(){return new L},minMaxNorm:function(t){return new B(t)}});var U=["channelsFirst","channelsLast"],G=["valid","same","causal"],q=["max","avg"],H=["sum","mul","concat","ave"],K=new Map;function X(t){A(U,"DataFormat",t)}function Y(t){A(G,"PaddingMode",t)}function $(t){A(q,"PoolMode",t)}var J=[],Z="/";function Q(t,e){J.push(t);try{var n=e();return J.pop(),n}catch(t){throw J.pop(),t}}function tt(t){if(!rt(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===J.length?"":J.join(Z)+Z)+t}function et(t){if(!rt(t))throw new Error("Not a valid tensor name: '"+t+"'");K.has(t)||K.set(t,0);var e=K.get(t);if(K.set(t,K.get(t)+1),e>0){var n=t+"_"+e;return K.set(n,1),n}return t}var nt=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function rt(t){return!!t.match(nt)}function it(t){return t===parseInt(t.toString(),10)}function at(t,e,n){null==e&&(e=0),null==n&&(n=t.length);for(var r=1,i=e;i<n;++i)r*=t[i];return r}function ot(t){return t=Array.isArray(t)?new Float32Array(t):t,Object(r.Sc)(t)}function st(t){return Object(r.Lb)(ot(t)).dataSync()[0]}function ut(t){return Object(r.Fb)(ot(t)).dataSync()[0]}function ct(t,e){if(e<t)throw new f("end ("+e+") < begin ("+t+") is forbidden.");for(var n=[],r=t;r<e;++r)n.push(r);return n}function lt(t,e){return t.asType(e)}function pt(t,e){void 0===e&&(e=-1);var n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function ht(t,e,n){return Object(r.Vc)((function(){switch(t.rank){case 1:return Object(r.yc)(t,e,n);case 2:return Object(r.zc)(t,[e,0],[n,t.shape[1]]);case 3:return Object(r.Ac)(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Object(r.Bc)(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Object(r.xc)(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Object(r.xc)(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new f("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}))}function ft(t,e,n){return Object(r.Vc)((function(){switch(t.rank){case 1:return Object(r.yc)(t,e,n);case 2:return Object(r.zc)(t,[0,e],[t.shape[0],n]);case 3:return Object(r.Ac)(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Object(r.Bc)(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new f("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function dt(t,e,n,i){return Object(r.Vc)((function(){switch(t.rank){case 1:return Object(r.yc)(t,e,n);case 2:switch(i){case 1:return ht(t,e,n);case 2:return ft(t,e,n);default:throw new f("The axis is not within the rank of the tensor "+i)}case 3:switch(i){case 1:return ht(t,e,n);case 2:return Object(r.Ac)(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return ft(t,e,n);default:throw new f("The axis is not within the rank of the tensor "+i)}case 4:switch(i){case 1:return ht(t,e,n);case 2:return Object(r.Bc)(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Object(r.Bc)(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return ft(t,e,n);default:throw new f("The axis is not within the rank of the tensor "+i)}default:throw new f("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function mt(t,e){var n;return void 0===e&&(e=-1),e<0&&(e=0!==(n=t[0].rank)?n:0),e===t[0].rank&&(e=-1),Object(r.D)(t,e)}function gt(t,e){switch(t.rank){case 1:return Object(r.E)([t,e]);case 2:return Object(r.F)([t,e],0);case 3:return Object(r.G)([t,e],0);case 4:return Object(r.H)([t,e],0);default:throw new f("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function vt(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new f("The length of input n ("+e.length+") does not match the number of dimensions in input x ("+t.rank+")");return Object(r.Wc)(t,e)}function yt(t,e,n,i,a){return void 0===e&&(e=0),void 0===n&&(n=1),Object(r.cc)(t,e,n,i,a)}function bt(t,e,n,i){if(t.rank<2||e.rank<2)throw new d("dot requires both inputs to be rank >= 2 but got x shape = "+t.shape+" and y shape = "+e.shape);if(e.rank>=3&&t.shape.slice(-1)[0]!==(p=e.shape.slice(-2)[0]))throw new d("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = "+t.shape+" and  y shape = "+e.shape);if(2===t.rank&&2===e.rank){var a=!1,o=!1;return r.hb.matMul({a:t,b:e,transposeA:a,transposeB:o,bias:i?Ct(t.rank,i,"channelsLast"):null,activation:n})}var s=t.shape.slice(),u=s.pop();t=t.reshape([-1,u]);var c=e.shape.slice(),l=c.pop(),p=c.pop(),h=c.concat([l]),f=Array.from({length:e.rank},(function(t,n){return 0===n?e.rank-2:n<=e.rank-2?n-1:n}));e=e.transpose(f).reshape([p,-1]);var m=s.concat(h);return a=!1,o=!1,r.hb.matMul({a:t,b:e,transposeA:a,transposeB:o,bias:i?Ct(t.rank,i,"channelsLast"):null,activation:n}).reshape(m)}function xt(t,e,n){return Object(r.Vc)((function(){return e=Array.isArray(e)?Object(r.Sc)(e,"int32"):e.toInt(),Object(r.ib)(t,e,n)}))}function wt(t){return Object(r.Qb)(t,t)}function Ct(t,e,n){var r=e.shape;if(1!==e.rank&&e.rank!==t)throw new f("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new f("Unsupported input rank by biasAdd: "+e.rank)}function Nt(t,e,n){return Object(r.Vc)((function(){return null==n&&(n="channelsLast"),X(n),t.add(Ct(t.rank,e,n))}))}function St(t,e,n,i){return Object(r.Vc)((function(){return Object(r.U)(t,e,n,i)}))}function Et(t,e,n){return void 0===n&&(n=!1),n?t():e()}var Ot=["fanIn","fanOut","fanAvg"],It=["normal","uniform","truncatedNormal"];var kt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.fromConfigUsesCustomObjects=function(){return!1},e.prototype.getConfig=function(){return{}},e}(r.rc.Serializable),At=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return Object(r.hd)(t,e)},e.className="Zeros",e}(kt);r.rc.registerClass(At);var Rt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return Object(r.Wb)(t,e)},e.className="Ones",e}(kt);r.rc.registerClass(Rt);var Tt=function(t){function e(e){var n=t.call(this)||this;if("object"!=typeof e)throw new f("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new f("config must have value set but got "+e);return n.value=e.value,n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.Vc)((function(){return Object(r.Pb)(Object(r.nc)(n.value),Object(r.Wb)(t,e))}))},e.prototype.getConfig=function(){return{value:this.value}},e.className="Constant",e}(kt);r.rc.registerClass(Tt);var Dt=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MINVAL=-.05,n.DEFAULT_MAXVAL=.05,n.minval=e.minval||n.DEFAULT_MINVAL,n.maxval=e.maxval||n.DEFAULT_MAXVAL,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){return Object(r.dc)(t,this.minval,this.maxval,e)},e.prototype.getConfig=function(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}},e.className="RandomUniform",e}(kt);r.rc.registerClass(Dt);var _t=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new d("randomNormal does not support dType "+e+".");return yt(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="RandomNormal",e}(kt);r.rc.registerClass(_t);var Ft=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new d("truncatedNormal does not support dType "+e+".");return Object(r.ad)(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="TruncatedNormal",e}(kt);r.rc.registerClass(Ft);var Mt=function(t){function e(e){var n=t.call(this)||this;return n.gain=null!=e.gain?e.gain:1,n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.Vc)((function(){if(2!==t.length||t[0]!==t[1])throw new f("Identity matrix initializer can only be used for 2D square matrices.");return Object(r.Pb)(n.gain,Object(r.cb)(t[0]))}))},e.prototype.getConfig=function(){return{gain:this.gain}},e.className="Identity",e}(kt);r.rc.registerClass(Mt);var zt=function(t){function e(e){var n=t.call(this)||this;if(e.scale<0)throw new f("scale must be a positive float. Got: "+e.scale);return n.scale=null==e.scale?1:e.scale,n.mode=null==e.mode?"fanIn":e.mode,function(t){A(Ot,"FanMode",t)}(n.mode),n.distribution=null==e.distribution?"normal":e.distribution,function(t){A(It,"Distribution",t)}(n.distribution),n.seed=e.seed,n}return a(e,t),e.prototype.apply=function(t,e){var n=function(t,e){var n,r;if(void 0===e&&(e="channelsLast"),X(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length))if("channelsFirst"===e){var i=at(t,2);n=t[1]*i,r=t[0]*i}else"channelsLast"===e&&(i=at(t,0,t.length-2),n=t[t.length-2]*i,r=t[t.length-1]*i);else{var a=at(t);n=Math.sqrt(a),r=Math.sqrt(a)}return[n,r]}(t),i=n[0],a=n[1],o=this.scale;if("fanIn"===this.mode?o/=Math.max(1,i):"fanOut"===this.mode?o/=Math.max(1,a):o/=Math.max(1,(i+a)/2),"normal"===this.distribution){var s=Math.sqrt(o);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new d(this.getClassName()+" does not support dType "+e+".");return Object(r.ad)(t,0,s,e,this.seed)}var u=Math.sqrt(3*o);return Object(r.dc)(t,-u,u,e)},e.prototype.getConfig=function(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}},e.className="VarianceScaling",e}(kt);r.rc.registerClass(zt);var Lt=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="GlorotUniform",e}(zt);r.rc.registerClass(Lt);var Bt=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="GlorotNormal",e}(zt);r.rc.registerClass(Bt);var Pt=function(t){function e(e){return t.call(this,{scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="HeNormal",e}(zt);r.rc.registerClass(Pt);var jt=function(t){function e(e){return t.call(this,{scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="HeUniform",e}(zt);r.rc.registerClass(jt);var Vt=function(t){function e(e){return t.call(this,{scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="LeCunNormal",e}(zt);r.rc.registerClass(Vt);var Wt=function(t){function e(e){return t.call(this,{scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})||this}return a(e,t),e.prototype.getClassName=function(){return zt.className},e.className="LeCunNormal",e}(zt);r.rc.registerClass(Wt);var Ut=function(t){function e(e){var n=t.call(this)||this;if(n.DEFAULT_GAIN=1,n.gain=null==e.gain?n.DEFAULT_GAIN:e.gain,n.seed=e.seed,null!=n.seed)throw new d("Random seed is not implemented for Orthogonal Initializer yet.");return n}return a(e,t),e.prototype.apply=function(t,e){var n=this;return Object(r.Vc)((function(){if(2!==t.length)throw new d("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn("Orthogonal initializer is being called on a matrix with more than 2000 ("+t[0]*t[1]+") elements: Slowness may result.");var e=yt(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32"),i=r.vb.gramSchmidt(e);return t[0]>t[1]&&(i=i.transpose()),Object(r.Pb)(n.gain,i)}))},e.prototype.getConfig=function(){return{gain:this.gain,seed:this.seed}},e.className="Orthogonal",e}(kt);r.rc.registerClass(Ut);var Gt={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function qt(t,e){return void 0===e&&(e={}),E(t,r.rc.SerializationMap.getMap().classNameMap,e,"initializer")}function Ht(t){return S(t)}function Kt(t){if("string"==typeof t){var e=t in Gt?Gt[t]:t;if("GlorotNormal"===e)return new Bt;if("GlorotUniform"===e)return new Lt;if("HeNormal"===e)return new Pt;if("HeUniform"===e)return new jt;if("LeCunNormal"===e)return new Vt;if("LeCunUniform"===e)return new Wt;var n={};return n.className=e,n.config={},qt(n)}return t instanceof kt?t:qt(t)}Object.freeze({zeros:function(){return new At},ones:function(){return new Rt},constant:function(t){return new Tt(t)},randomUniform:function(t){return new Dt(t)},randomNormal:function(t){return new _t(t)},truncatedNormal:function(t){return new Ft(t)},identity:function(t){return new Mt(t)},varianceScaling:function(t){return new zt(t)},glorotUniform:function(t){return new Lt(t)},glorotNormal:function(t){return new Bt(t)},heNormal:function(t){return new Pt(t)},heUniform:function(t){return new jt(t)},leCunNormal:function(t){return new Vt(t)},leCunUniform:function(t){return new Wt(t)},orthogonal:function(t){return new Ut(t)}});var Xt=0;function Yt(){return Xt++}var $t={};function Jt(t){return void 0===t&&(t=""),t in $t||($t[t]=0),$t[t]+=1,t+$t[t].toString()}function Zt(t){return Array.isArray(t)&&Array.isArray(t[0])}function Qt(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function te(t){var e;if(Array.isArray(t)){if(1!==t.length)throw new f("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function ee(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new f("Expected exactly 1 Shape; got "+t.length)}return t}function ne(t){for(var e=0,n=0,r=t;n<r.length;n++){var i=r[n];0===i.shape.length?e+=1:e+=i.shape.reduce((function(t,e){return t*e}))}return e}var re="Variable",ie=function(){function t(t,e,n,i,a){void 0===e&&(e="float32"),void 0===n&&(n=re),void 0===i&&(i=!0),void 0===a&&(a=null),this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Yt(),n=null==n?re:n,this.originalName=tt(n),this.name=et(this.originalName),this.trainable_=i,this.constraint=a,this.val=Object(r.dd)(t,this.trainable_,this.name,this.dtype)}return t.prototype.read=function(){return this.assertNotDisposed(),this.val},t.prototype.write=function(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this},t.prototype.dispose=function(){this.assertNotDisposed(),this.val.dispose()},t.prototype.assertNotDisposed=function(){if(this.val.isDisposed)throw new Error("LayersVariable "+this.name+" is already disposed.")},Object.defineProperty(t.prototype,"trainable",{get:function(){return this.trainable_},set:function(t){this.trainable_=t,this.val.trainable=t},enumerable:!0,configurable:!0}),t}();function ae(t){return t.map((function(t){return t.read()}))}function oe(t){t.forEach((function(t){t[0].write(t[1])}))}var se=function(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}},ue=function(t,e,n,r,i,a,o){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=i,this.outputTensorIndex=o,this.id=Yt(),null!=a&&(this.originalName=tt(a),this.name=et(this.originalName)),this.rank=e.length},ce=0,le=function(){function t(t,e){this.callArgs=e,this.id=ce++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(var n=0,r=t.inboundLayers;n<r.length;n++){var i=r[n];null!=i&&i.outboundNodes.push(this)}t.outboundLayer.inboundNodes.push(this)}return t.prototype.getConfig=function(){for(var t=[],e=0,n=this.inboundLayers;e<n.length;e++){var r=n[e];null!=r?t.push(r.name):t.push(null)}return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}},t}(),pe=0,he=function(t){function e(e){var n=t.call(this)||this;n._callHook=null,n._addedWeightNames=[],n._stateful=!1,n.id=pe++,n.activityRegularizer=null,n.inputSpec=null,n.supportsMasking=!1,n._trainableWeights=[],n._nonTrainableWeights=[],n._losses=[],n._updates=[],n._built=!1,n.inboundNodes=[],n.outboundNodes=[];var r=e.name;if(!r){var i=n.getClassName();r=w(i)+"_"+Jt(i)}if(n.name=r,n.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){var a=void 0;if(null!=e.batchInputShape)a=e.batchInputShape;else if(null!=e.inputShape){var o=null;null!=e.batchSize&&(o=e.batchSize),a=[o].concat(e.inputShape)}n.batchInputShape=a;var s=e.dtype;null==s&&(s=e.inputDType),null==s&&(s="float32"),n.dtype=s}return null!=e.weights?n.initialWeights=e.weights:n.initialWeights=null,n._refCount=null,n.fastWeightInitDuringBuild=!1,n}return a(e,t),e.nodeKey=function(t,e){return t.name+"_ib-"+e.toString()},e.prototype.getNodeAtIndex=function(t,e){if(0===this.inboundNodes.length)throw new h("The layer has never been called and thus has no defined "+e+".");if(this.inboundNodes.length<=t)throw new f("Asked to get "+e+" at node "+t+", but the layer has only "+this.inboundNodes.length+" inbound nodes.");return this.inboundNodes[t]},e.prototype.getInputAt=function(t){return b(this.getNodeAtIndex(t,"input").inputTensors)},e.prototype.getOutputAt=function(t){return b(this.getNodeAtIndex(t,"output").outputTensors)},Object.defineProperty(e.prototype,"input",{get:function(){if(this.inboundNodes.length>1)throw new p("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new p("Layer "+this.name+" is not connected, no input to return.");return b(this.getNodeAtIndex(0,"input").inputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){if(0===this.inboundNodes.length)throw new p("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new p("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return b(this.getNodeAtIndex(0,"output").outputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this._losses},enumerable:!0,configurable:!0}),e.prototype.calculateLosses=function(){return this.losses.map((function(t){return t()}))},Object.defineProperty(e.prototype,"updates",{get:function(){return this._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"built",{get:function(){return this._built},set:function(t){this._built=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainable",{get:function(){return this.trainable_},set:function(t){this._trainableWeights.forEach((function(e){return e.trainable=t})),this.trainable_=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable_?this._trainableWeights.filter((function(t){return t.trainable})):[]},set:function(t){this._trainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this._trainableWeights.filter((function(t){return!t.trainable})).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)},set:function(t){this._nonTrainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"stateful",{get:function(){return this._stateful},enumerable:!0,configurable:!0}),e.prototype.resetStates=function(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")},e.prototype.assertInputCompatibility=function(t){if(t=x(t),null!=this.inputSpec&&0!==this.inputSpec.length){var e=x(this.inputSpec);if(t.length!==e.length)throw new f("Layer "+this.name+" expects "+e.length+" inputs, but it received "+t.length+" input tensors. Input received: "+t);for(var n=0;n<t.length;n++){var r=t[n],i=e[n];if(null!=i){var a=r.rank;if(null!=i.ndim&&a!==i.ndim)throw new f("Input "+n+" is incompatible with layer "+this.name+": expected ndim="+i.ndim+", found ndim="+a);if(null!=i.maxNDim&&a>i.maxNDim)throw new f("Input "+n+" is incompatible with layer "+this.name+": expected max_ndim="+i.maxNDim+", found ndim="+a);if(null!=i.minNDim&&a<i.minNDim)throw new f("Input "+n+" is incompatible with layer "+this.name+": expected min_ndim="+i.minNDim+", found ndim="+a+".");if(null!=i.dtype&&r.dtype!==i.dtype)throw new f("Input "+n+" is incompatible with layer "+this.name+" : expected dtype="+i.dtype+", found dtype="+r.dtype+".");if(i.axes){var o=r.shape;for(var s in i.axes){var u=Number(s),c=i.axes[s],l=u>=0?o[u]:o[o.length+u];if(null!=c&&-1===[c,null].indexOf(l))throw new f("Input "+n+" is incompatible with layer "+this.name+": expected axis "+u+" of input shape to have value "+c+" but got shape "+o+".")}}if(null!=i.shape)for(var p=0;p<i.shape.length;++p){var h=i.shape[p],d=r.shape[p];if(null!=h&&null!=d&&h!==d)throw new f("Input "+n+" is incompatible with layer "+this.name+": expected shape="+i.shape+", found shape="+r.shape+".")}}}}},e.prototype.call=function(t,e){return t},e.prototype.invokeCallHook=function(t,e){null!=this._callHook&&this._callHook(t,e)},e.prototype.setCallHook=function(t){this._callHook=t},e.prototype.clearCallHook=function(){this._callHook=null},e.prototype.apply=function(t,e){var n=this;e=e||{},this.assertNotDisposed();for(var r=x(t),i=!0,a=0,o=r;a<o.length;a++)if(!(o[a]instanceof ue)){i=!1;break}for(var s=!0,u=0,c=r;u<c.length;u++)if(c[u]instanceof ue){s=!1;break}if(i===s)throw new f("Arguments to apply() must be all SymbolicTensors or all Tensors");return Q(this.name,(function(){if(!n.built){n.assertInputCompatibility(t);for(var i=[],a=0,o=x(t);a<o.length;a++){var u=o[a];i.push(u.shape)}n.build(b(i)),n.built=!0,n.initialWeights&&n.setWeights(n.initialWeights),null===n._refCount&&s&&(n._refCount=1)}if(n.assertInputCompatibility(t),s){for(var c=[],l=0,p=x(g=n.call(t,e));l<p.length;l++){var h=p[l];-1!==r.indexOf(h)&&(h=h.clone()),c.push(h)}if(g=b(c),null!=n.activityRegularizer)throw new d("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return g}var f=function(t){for(var e=[],n=0,r=t=x(t);n<r.length;n++){var i=r[n];e.push(i.shape)}return b(e)}(t),m=n.computeOutputShape(f),g=void 0,v="float32";if(n.warnOnIncompatibleInputShape(Array.isArray(t)?f[0]:f),g=null!=m&&m.length>0&&Array.isArray(m[0])?m.map((function(r,i){return new ue(v,r,n,x(t),e,n.name,i)})):new ue(v,m,n,x(t),e,n.name),n.addInboundNode(t,g,null,null,f,m,e),n._refCount++,null!=n.activityRegularizer)throw new d("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return g}))},e.prototype.warnOnIncompatibleInputShape=function(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the batchInputShape ("+JSON.stringify(this.batchInputShape)+") of the layer "+this.name);else{var e=!1;this.batchInputShape.forEach((function(n,r){null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn("The shape of the input tensor ("+JSON.stringify(t)+") does not match the expectation of layer "+this.name+": "+JSON.stringify(this.batchInputShape))}},Object.defineProperty(e.prototype,"outputShape",{get:function(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new p("The layer "+this.name+" has never been called and thus has no defined output shape.");for(var t=[],e=0,n=this.inboundNodes;e<n.length;e++){var r=n[e],i=JSON.stringify(r.outputShapes);-1===t.indexOf(i)&&t.push(i)}if(1===t.length){var a=this.inboundNodes[0].outputShapes;return Array.isArray(a)&&Array.isArray(a[0])&&1===a.length?a[0]:a}throw new p("The layer "+this.name+' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.')},enumerable:!0,configurable:!0}),e.prototype.countParams=function(){if(!this.built)throw new h("You tried to call countParams() on "+this.name+", but the layer is not built yet. Build it first by calling build(batchInputShape).");return ne(this.weights)},e.prototype.build=function(t){this.built=!0},e.prototype.getWeights=function(t){return void 0===t&&(t=!1),ae(t?this.trainableWeights:this.weights)},e.prototype.setWeights=function(t){var e=this;Object(r.Vc)((function(){var n=e.weights;if(n.length!==t.length)throw new f('You called setWeights(weights) on layer "'+e.name+'" with a weight list of length '+t.length+", but the layer was expecting "+n.length+" weights. Provided weights: "+t+"...");if(0!==n.length){for(var i=[],a=ae(n),o=0;o<a.length;++o){var s=a[o],u=n[o],c=t[o];if(!r.cd.arraysEqual(s.shape,c.shape))throw new f("Layer weight shape "+s.shape+" not compatible with provided weight shape "+c.shape);i.push([u,c])}oe(i)}}))},e.prototype.addWeight=function(t,e,n,r,i,a,o){if(-1!==this._addedWeightNames.indexOf(t))throw new f("Duplicate weight name "+t+" for layer "+this.name);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Kt("zeros"));var s=r.apply(e,n),u=new ie(s,n,t,a,o);return s.dispose(),null!=i&&this.addLoss((function(){return i.apply(u.read())})),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u},e.prototype.setFastWeightInitDuringBuild=function(t){this.fastWeightInitDuringBuild=t},e.prototype.addLoss=function(t){var e;null==t||Array.isArray(t)&&0===t.length||(t=x(t),void 0!==this._losses&&null!==this._losses&&(e=this.losses).push.apply(e,t))},e.prototype.computeOutputShape=function(t){return t},e.prototype.computeMask=function(t,e){var n=this;if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError("Layer "+this.name+" does not support masking, but was passed an inputMask.");e.forEach((function(t){if(null!=t)throw new TypeError("Layer "+n.name+" does not support masking, but was passed an inputMask.")}))}return null}return e},e.prototype.addInboundNode=function(t,e,n,r,i,a,o){void 0===o&&(o=null);var s=x(t);e=x(e),n=x(n),r=x(r),i=Qt(i),a=Qt(a);for(var u=[],c=[],l=[],p=0,h=s;p<h.length;p++){var f=h[p];u.push(f.sourceLayer),c.push(f.nodeIndex),l.push(f.tensorIndex)}new le({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:l,inputTensors:s,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:i,outputShapes:a},o);for(var d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d},e.prototype.getConfig=function(){var t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t},e.prototype.disposeWeights=function(){return this.weights.forEach((function(t){return t.dispose()})),this.weights.length},e.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Layer '"+this.name+"' is already disposed.")},e.prototype.dispose=function(){if(!this.built)throw new Error("Cannot dispose Layer "+this.name+" because it has not been built yet.");if(null===this._refCount)throw new Error("Cannot dispose Layer "+this.name+" because it has not been used yet.");this.assertNotDisposed();var t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}},e}(r.rc.Serializable);var fe,de,me=function(t){function e(e){var n=t.call(this,{dtype:e.dtype,name:null!=e.name?e.name:Jt("input").toString()})||this;if(null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),n.trainable=!1,n.built=!0,n.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new f("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r=e.batchInputShape;if(null==r){if(null==e.inputShape)throw new f("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new f("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");var i=e.dtype||"float32";n.batchInputShape=r,n.dtype=i,n.inputSpec=[{shape:r}];var a=new ue(n.dtype,n.batchInputShape,n,[],{},n.name);return a.nodeIndex=0,a.tensorIndex=0,new le({outboundLayer:n,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[r],outputShapes:[r]}),n}return a(e,t),e.prototype.apply=function(t,e){throw new f("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)},e.prototype.dispose=function(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}},e.prototype.getConfig=function(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}},e.className="InputLayer",e}(he);function ge(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new f("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));var n=t.dtype;return null==n&&(n="float32"),new me({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}function ve(t){return u(this,void 0,void 0,(function(){var e,n,i,a,o,s,u,l;return c(this,(function(c){switch(c.label){case 0:if(null==t)return[2];for(a in e=[],n=[],i=[],t)"number"!=typeof(o=t[a])&&(s=o,e.push(s.data()),n.push(a),i.push(s));return e.length>0?[4,Promise.all(e)]:[3,2];case 1:for(u=c.sent(),l=0;l<u.length;++l)t[n[l]]=u[l][0];Object(r.R)(i),c.label=2;case 2:return[2]}}))}))}function ye(t){if(null!=t)for(var e in t){var n=t[e];"number"!=typeof n&&n.dispose()}}r.rc.registerClass(me),(de=fe||(fe={}))[de.SILENT=0]="SILENT",de[de.VERBOSE=1]="VERBOSE";var be=125,xe=function(){function t(){this.validationData=null}return t.prototype.setParams=function(t){this.params=t},t.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2]}))}))},t.prototype.setModel=function(t){},t}(),we=function(){function t(t,e){void 0===e&&(e=10),null==t&&(t=[]),this.callbacks=t,this.queueLength=e}return t.prototype.append=function(t){this.callbacks.push(t)},t.prototype.setParams=function(t){for(var e=0,n=this.callbacks;e<n.length;e++)n[e].setParams(t)},t.prototype.setModel=function(t){for(var e=0,n=this.callbacks;e<n.length;e++)n[e].setModel(t)},t.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,(function(){var n,r;return c(this,(function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochBegin(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){var n,r;return c(this,(function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochEnd(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,(function(){var n,r;return c(this,(function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchBegin(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,(function(){var n,r;return c(this,(function(i){switch(i.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchEnd(t,e)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainBegin(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainEnd(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t}(),Ce=function(t){function e(){return t.call(this)||this}return a(e,t),e.prototype.onEpochBegin=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return this.seen=0,this.totals={},[2]}))}))},e.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,(function(){var t,n,i,a,o=this;return c(this,(function(s){for(a in null==e&&(e={}),t=null==e.size?0:e.size,this.seen+=t,n=function(n){var a=e[n];if("number"==typeof a)i.totals.hasOwnProperty(n)||(i.totals[n]=0),i.totals[n]=i.totals[n]+a*t;else{var s=void 0;n in i.totals?s=i.totals[n]:i.totals[n]=0;var u=Object(r.Vc)((function(){return Object(r.f)(o.totals[n],Object(r.Pb)(a,t))}));i.totals[n]=u,null!=s&&s.dispose()}},i=this,e)n(a);return[2]}))}))},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){var t,n,i,a,o,s=this;return c(this,(function(u){if(null!=e)for(t=function(t){if(null==n.totals[t])return"continue";"number"==typeof n.totals[t]?e[t]=n.totals[t]/n.seen:Object(r.Vc)((function(){var n=Object(r.Pb)(Object(r.S)(1,s.seen),s.totals[t]);e[t]=n,s.totals[t].dispose(),Object(r.rb)(e[t])}))},n=this,i=0,a=this.params.metrics;i<a.length;i++)o=a[i],t(o);return[2]}))}))},e}(xe),Ne=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return this.epoch=[],this.history={},[2]}))}))},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(r){for(n in null==e&&(e={}),this.epoch.push(t),e)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(e[n]);return[2]}))}))},e.prototype.syncData=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,o,s,u;return c(this,(function(c){switch(c.label){case 0:for(r in t=[],e=[],n=[],this.history)for(i=this.history[r],a=0;a<i.length;++a)"number"!=typeof i[a]&&(o=i[a],t.push(o.data()),e.push(r),n.push(a));return[4,Promise.all(t)];case 1:for(s=c.sent(),u=0;u<s.length;++u)this.history[e[u]][n[u]].dispose(),this.history[e[u]][n[u]]=s[u][0];return[2]}}))}))},e}(xe),Se=function(t){function e(e,n){var i=t.call(this)||this;if(i.currentEpoch=0,i.yieldEvery=n||"auto","auto"===i.yieldEvery&&(i.yieldEvery=be),"never"===i.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");return r.cd.isNumber(i.yieldEvery)&&(i.maybeWait=function(t,e){var n,i=r.cd.now();return function(){for(var a=[],o=0;o<arguments.length;o++)a[o]=arguments[o];var s=r.cd.now();return s-i<e?n:(i=s,n=t.apply(void 0,a))}}(i.maybeWait.bind(i),i.yieldEvery)),i.trainBegin=e.onTrainBegin,i.trainEnd=e.onTrainEnd,i.epochBegin=e.onEpochBegin,i.epochEnd=e.onEpochEnd,i.batchBegin=e.onBatchBegin,i.batchEnd=e.onBatchEnd,i.yield=e.onYield,i}return a(e,t),e.prototype.maybeWait=function(t,e,n){return u(this,void 0,void 0,(function(){var i;return c(this,(function(a){switch(a.label){case 0:return i=[],null==this.yield?[3,2]:[4,ve(n)];case 1:a.sent(),i.push(this.yield(t,e,n)),a.label=2;case 2:return i.push(Object(r.Tb)()),[4,Promise.all(i)];case 3:return a.sent(),[2]}}))}))},e.prototype.onEpochBegin=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return this.currentEpoch=t,null==this.epochBegin?[3,3]:[4,ve(e)];case 1:return n.sent(),[4,this.epochBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(i){switch(i.label){case 0:return n=[],null==this.epochEnd?[3,2]:[4,ve(e)];case 1:i.sent(),n.push(this.epochEnd(t,e)),i.label=2;case 2:return"epoch"===this.yieldEvery&&n.push(Object(r.Tb)()),[4,Promise.all(n)];case 3:return i.sent(),[2]}}))}))},e.prototype.onBatchBegin=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return null==this.batchBegin?[3,3]:[4,ve(e)];case 1:return n.sent(),[4,this.batchBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))},e.prototype.onBatchEnd=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(i){switch(i.label){case 0:return n=[],null==this.batchEnd?[3,2]:[4,ve(e)];case 1:i.sent(),n.push(this.batchEnd(t,e)),i.label=2;case 2:return"batch"===this.yieldEvery?n.push(Object(r.Tb)()):r.cd.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),[4,Promise.all(n)];case 3:return i.sent(),[2]}}))}))},e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return null==this.trainBegin?[3,3]:[4,ve(t)];case 1:return e.sent(),[4,this.trainBegin(t)];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))},e.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return null==this.trainEnd?[3,3]:[4,ve(t)];case 1:return e.sent(),[4,this.trainEnd(t)];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))},e}(xe);function Ee(t,e){return null==t&&(t={}),t instanceof xe?[t]:Array.isArray(t)&&t[0]instanceof xe?t:x(t).map((function(t){return new Se(t,e)}))}var Oe=function(){function t(){}return t.registerCallbackConstructor=function(e,n){r.cd.assert(e>=0&&Number.isInteger(e),(function(){return"Verbosity level is expected to be an integer >= 0, but got "+e})),t.checkForDuplicate(n),null==t.constructors[e]&&(t.constructors[e]=[]),t.constructors[e].push(n)},t.checkForDuplicate=function(e){for(var n in t.constructors)t.constructors[+n].forEach((function(t){if(t===e)throw new f("Duplicate callback constructor.")}))},t.clear=function(){t.constructors={}},t.createCallbacks=function(e){var n=[];for(var r in t.constructors){var i=+r;e>=i&&n.push.apply(n,t.constructors[i])}return n.map((function(t){return new t}))},t.constructors={},t}();function Ie(t,e,n,r,i,a,o,s,u){var c=new Ne,l=[new Ce].concat(Oe.createCallbacks(e));null!=t&&l.push.apply(l,t),l.push(c);var p=new we(l);return p.setParams({epochs:n,initialEpoch:r,samples:i,steps:a,batchSize:o,verbose:e,doValidation:s,metrics:u}),{callbackList:p,history:c}}function ke(t,e,n){return void 0===e&&(e={}),void 0===n&&(n=!1),E(t,r.rc.SerializationMap.getMap().classNameMap,e,"layer",n)}function Ae(t,e){return Object(r.Vc)((function(){"float32"!==t.dtype&&(t=t.asType("float32"));var n=Object(r.Oc)(wt(t),e,!0),i=Object(r.eb)(n.shape,l()),a=Object(r.Hc)(Object(r.Ib)(n,i));return Object(r.S)(t,a)}))}function Re(t,e){return Object(r.Vc)((function(){return Object(r.Jb)(wt(Object(r.Nc)(e,t)),-1)}))}function Te(t,e){return Object(r.Vc)((function(){return Object(r.Jb)(Object(r.c)(Object(r.Nc)(e,t)),-1)}))}function De(t,e){return Object(r.Vc)((function(){var n=Object(r.Nc)(t,e),i=Object(r.B)(Object(r.c)(t),l(),Number.MAX_VALUE),a=Object(r.c)(Object(r.S)(n,i));return Object(r.Pb)(100,Object(r.Jb)(a,-1))}))}function _e(t,e,n){return void 0===n&&(n=!1),Object(r.Vc)((function(){if(n)e=Object(r.Cc)(e);else{var i=Object(r.Oc)(e,e.shape.length-1,!0);e=Object(r.S)(e,i)}return e=Object(r.B)(e,l(),1-l()),Object(r.Sb)(Object(r.Oc)(Object(r.Pb)(t.toFloat(),Object(r.yb)(e)),e.shape.length-1))}))}function Fe(t,e){return Object(r.Vc)((function(){var n=Object(r.fb)(function(t){var e=[at(t.shape)];return t.reshape(e)}(t)).toInt(),i=(e=Object(r.B)(e,l(),1-l())).shape;return _e(Object(r.Vb)(n,i[i.length-1]).reshape(i),e,!1)}))}function Me(t,e){return Object(r.Vc)((function(){var n;return n=Object(r.B)(e,l(),1-l()),n=Object(r.yb)(Object(r.S)(n,Object(r.Nc)(1,n))),Object(r.Jb)(function(t,e){if(!r.cd.arraysEqual(t.shape,e.shape))throw new f("logits and labels must have the same shape, but got shapes "+JSON.stringify(t.shape)+" and "+JSON.stringify(e.shape));return Object(r.Vc)((function(){var n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())}))}(t,n),-1)}))}function ze(t,e){return Object(r.Vc)((function(){var n=Ae(t,-1),i=Ae(e,-1),a=Object(r.Pb)(n,i);return Object(r.Sb)(Object(r.Oc)(a,-1))}))}var Le={meanSquaredError:Re,meanAbsoluteError:Te,meanAbsolutePercentageError:De,meanSquaredLogarithmicError:function(t,e){return Object(r.Vc)((function(){var n=Object(r.B)(e,l(),Number.MAX_VALUE),i=Object(r.yb)(Object(r.f)(1,n)),a=Object(r.B)(t,l(),Number.MAX_VALUE),o=Object(r.yb)(Object(r.f)(1,a));return Object(r.Jb)(wt(Object(r.Nc)(i,o)),-1)}))},squaredHinge:function(t,e){return Object(r.Vc)((function(){var n=Object(r.Ib)(0,Object(r.Nc)(1,Object(r.Pb)(t,e)));return Object(r.Jb)(wt(n),-1)}))},hinge:function(t,e){return Object(r.Vc)((function(){var n=Object(r.Ib)(0,Object(r.Nc)(1,Object(r.Pb)(t,e)));return Object(r.Jb)(n,-1)}))},categoricalHinge:function(t,e){return Object(r.Vc)((function(){var n=Object(r.Oc)(Object(r.Pb)(t,e),-1),i=Object(r.Fb)(Object(r.Pb)(Object(r.Nc)(1,t),e),-1);return Object(r.Ib)(0,Object(r.f)(1,Object(r.Nc)(i,n)))}))},logcosh:function(t,e){return Object(r.Vc)((function(){var n=Math.log(2),i=Object(r.Nc)(e,t),a=Object(r.Nc)(Object(r.f)(i,Object(r.Dc)(Object(r.Pb)(-2,i))),n);return Object(r.Jb)(a,-1)}))},categoricalCrossentropy:_e,sparseCategoricalCrossentropy:Fe,binaryCrossentropy:Me,kullbackLeiblerDivergence:function(t,e){return Object(r.Vc)((function(){var n=Object(r.B)(t,l(),1),i=Object(r.B)(e,l(),1);return Object(r.Oc)(Object(r.Pb)(t,Object(r.yb)(Object(r.S)(n,i))),-1)}))},poisson:function(t,e){return Object(r.Vc)((function(){var n=Object(r.yb)(Object(r.f)(l(),e));return Object(r.Jb)(Object(r.Nc)(e,Object(r.Pb)(t,n)),-1)}))},cosineProximity:ze};function Be(t){if("string"==typeof t){if(t in Le)return Le[t];var e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e="Unknown loss "+t+'. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'),new f(e)}return t}function Pe(t,e){return Object(r.Vc)((function(){var n=Object(r.Pb)(.5,Object(r.Xb)(e)),i=lt(Object(r.kb)(e,n),t.dtype);return Object(r.Jb)(Object(r.X)(t,i),-1)}))}function je(t,e){return Object(r.Vc)((function(){return lt(Object(r.X)(Object(r.j)(t,-1),Object(r.j)(e,-1)),"float32")}))}function Ve(t,e){return Object(r.Vc)((function(){return Object(r.Bb)(t.equal(1),e.equal(1)).sum().cast("float32")}))}function We(t,e){return Object(r.Vc)((function(){var n=Ve(t,e),i=function(t,e){return Object(r.Vc)((function(){return Object(r.Bb)(t.equal(0),e.equal(1)).sum().cast("float32")}))}(t,e),a=n.add(i);return Object(r.fd)(Object(r.kb)(a,0),n.div(a),0).cast("float32")}))}function Ue(t,e){return Object(r.Vc)((function(){var n=Ve(t,e),i=function(t,e){return Object(r.Vc)((function(){return Object(r.Bb)(t.equal(1),e.equal(0)).sum().cast("float32")}))}(t,e),a=n.add(i);return Object(r.fd)(Object(r.kb)(a,0),n.div(a),0).cast("float32")}))}function Ge(t,e){return Me(t,e)}function qe(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Object(r.X)(t,e).asType("float32")}var He=_e,Ke=Fe,Xe={binaryAccuracy:Pe,categoricalAccuracy:je,precision:We,categoricalCrossentropy:He,sparseCategoricalCrossentropy:Ke,mse:Re,MSE:Re,mae:Te,MAE:Te,mape:De,MAPE:De,cosine:ze};function Ye(t){if(v(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;for(var e=void 0,n=0,r=Object.keys(Le);n<r.length;n++){var i=r[n];if(Le[i]===t){e=i;break}}if(void 0!==e)return e;for(var a=0,o=Object.keys(Xe);a<o.length;a++)if(i=o[a],Xe[i]===t){e=i;break}return void 0!==e?e:t.name}var $e=1048576;function Je(t,e,n){if(void 0===n&&(n=!1),null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if("string"!=typeof i)return!1;if(!t(e[i]))return!1}return!0}if(Array.isArray(e)){for(var a=0,o=e;a<o.length;a++)if(!t(o[a]))return!1;return!0}return!1}var s=typeof e;return"string"===s||"number"===s||"boolean"===s}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){var r=JSON.stringify(t);r.length>$e&&console.warn('User-defined metadata of model "'+e+'" is too large in size (length='+r.length+" when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= "+$e+".")}}function Ze(t,e,n,r){void 0===r&&(r=console.log);var i,a=function(t){var e=!0,n=[],r=[];for(var i in t.nodesByDepth)n.push(t.nodesByDepth[i]);for(var a=0,o=n;a<o.length;a++){var s=o[a];if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){e=!1;break}r.push.apply(r,s)}if(e)for(var u=0,c=t.layers;u<c.length;u++){for(var l=!1,p=0,h=c[u].inboundNodes;p<h.length;p++){var f=h[p];if(-1!==r.indexOf(f)){if(l){e=!1;break}l=!0}}if(!e)break}return e}(t),o=["Layer (type)","Output shape","Param #"];if(a?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((function(t){return Math.floor(e*t)}))),!a)for(var s in o.push("Receives inputs"),i=[],t.nodesByDepth)i.push.apply(i,t.nodesByDepth[s]);r("_".repeat(e)),Qe(o,n,r),r("=".repeat(e));for(var u=t.layers,c=0;c<u.length;++c)a?tn(u[c],n,r):en(u[c],n,i,r),r((c===u.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();var l=function(t){return null!=t.collectedTrainableWeights?ne(t.collectedTrainableWeights):ne(t.trainableWeights)}(t),p=ne(t.nonTrainableWeights);r("Total params: "+(l+p)),r("Trainable params: "+l),r("Non-trainable params: "+p),r("_".repeat(e))}function Qe(t,e,n){void 0===n&&(n=console.log);for(var r="",i=0;i<t.length;++i)i>0&&(r=r.slice(0,r.length-1)+" "),r=(r+=t[i]).slice(0,e[i]),r+=" ".repeat(e[i]-r.length);n(r)}function tn(t,e,n){var r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}Qe([t.name+" ("+t.getClassName()+")",r,t.countParams().toString()],e,n)}function en(t,e,n,r){var i;try{i=JSON.stringify(t.outputShape)}catch(t){i="multiple"}for(var a=[],o=0,s=t.inboundNodes;o<s.length;o++){var u=s[o];if(!(null!=n&&n.length>0&&-1===n.indexOf(u)))for(var c=0;c<u.inboundLayers.length;++c){var l=u.inboundLayers[c].name,p=u.nodeIndices[c],h=u.tensorIndices[c];a.push(l+"["+p+"]["+h+"]")}}var f=t.name,d=t.getClassName(),m=0===a.length?"":a[0];for(Qe([f+" ("+d+")",i,t.countParams().toString(),m],e,r),c=1;c<a.length;++c)Qe(["","","",a[c]],e,r)}function nn(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function rn(t,e){if(null===t)return null;if("string"==typeof t)return C(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){for(var n=[],r=t.length,i=0;i<r;++i){var a=t[i];nn(e,i,a)?n.push(a):n.push(rn(a,e))}return n}for(var o={},s=0,u=Object.keys(t);s<u.length;s++){var c=u[s],l=t[c];if("name"===c&&"string"==typeof l)o[c]=l;else{var p=C(c);o[p]=rn(l,p)}}return o}var an=function(){function t(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof t)for(var n in e.id2Value)this.id2Value[n]=e.id2Value[n],n in e.id2Mask&&(this.id2Mask[n]=e.id2Mask[n]);else{if(null==e)return;for(var r=0,i=e;r<i.length;r++){var a=i[r];this.add(a.key,a.value)}}}return t.prototype.add=function(t,e,n){if(null!=this.id2Value[t.id])throw new f("Duplicate key: name="+t.name+", id="+t.id);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Object(r.z)(e,t.dtype)}catch(n){throw new f("The dtype of the feed ("+e.dtype+") can not be cast to the dtype of the key '"+t.name+"' ("+t.dtype+").")}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this},t.prototype.addFeed=function(t){this.add(t.key,t.value)},t.prototype.hasKey=function(t){return null!=this.id2Value[t.id]},t.prototype.names=function(){return Object.keys(this.name2Id)},t.prototype.getValue=function(t){if(t instanceof ue){if(null==this.id2Value[t.id])throw new f("Nonexistent key: "+t.name);return this.id2Value[t.id]}var e=this.name2Id[t];if(null==e)throw new f("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]},t.prototype.getMask=function(t){if(t instanceof ue){if(null==this.id2Value[t.id])throw new f("Nonexistent key: "+t.name);return this.id2Mask[t.id]}var e=this.name2Id[t];if(null==e)throw new f("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]},t.prototype.disposeMasks=function(){null!=this.id2Mask&&Object(r.R)(this.id2Mask)},t}(),on={},sn={};function un(t,e,n,i){for(var a=null!=n&&n.training,o=Array.isArray(t),s=o?t:[t],u=s.map((function(t){return t.name})),c=[],l=e.names(),p=0,h=u;p<h.length;p++){var f=h[p];-1!==l.indexOf(f)?c.push(e.getValue(f)):c.push(null)}null!=i&&(i.maxNumTensors=-1/0,i.minNumTensors=1/0);var d,m,g=u.join(",")+"|"+e.names().join(",");if(null==on[g]){var v=function(t,e){r.cd.assert(null!=t&&t.length>0,(function(){return"Expected at least one fetch, got none"}));var n=[],i={};if(1===t.length){var a=ln(t[0],e);n=a.sorted,i=a.recipientMap}else for(var o=new Set,s=0,u=t;s<u.length;s++){for(var c=ln(u[s],e),l=c.sorted,p=c.recipientMap,h=0,f=l;h<f.length;h++){var d=f[h];o.has(d.name)||(n.push(d),o.add(d.name))}var m=function(t){null==i[t]&&(i[t]=new Set),p[t].forEach((function(e){return i[t].add(e)}))};for(var g in p)m(g)}return{sorted:n,recipientCounts:cn(i)}}(s,e);d=v.sorted,m=v.recipientCounts,on[g]=d,sn[g]=m}d=on[g],m={},a||Object.assign(m,sn[g]);for(var y=new an(e),b=0;b<d.length;++b){if(null!=i){var w=Object(r.Kb)().numTensors;w>i.maxNumTensors&&(i.maxNumTensors=w),w<i.minNumTensors&&(i.minNumTensors=w)}var C=d[b],N=C.sourceLayer;if(!(N instanceof me)){for(var S=[],E=[],O=[],I=!1,k=0,A=C.inputs;k<A.length;k++){var R=A[k],T=y.getValue(R),D=y.getMask(R);S.push(T),E.push(D),null!=D&&(I=!0),a||(m[R.name]--,0!==m[R.name]||e.hasKey(R)||-1!==u.indexOf(R.name)||T.isDisposed||!0===R.sourceLayer.stateful||O.push(T))}I&&((n=n||{}).mask=E[0]);var _=x(N.apply(S,n)),F=null;N.supportsMasking&&(F=N.computeMask(S,E));for(var M=pn(C),z=Array.isArray(M)?M:[M],L=0;L<z.length;++L){y.hasKey(z[L])||y.add(z[L],_[L],Array.isArray(F)?F[0]:F);var B=u.indexOf(z[L].name);-1!==B&&(c[B]=_[L])}a||Object(r.R)(O)}}return y.disposeMasks(),o?c:c[0]}function cn(t){var e={};for(var n in t)e[n]=t[n].size;return e}function ln(t,e){for(var n=new Set,r=[],i={},a=0,o=e.names();a<o.length;a++){var s=o[a];n.add(s)}var u=[],c=[];for(u.push(t);u.length>0;){var l=u[u.length-1];if(n.has(l.name))u.pop();else{var p=c[c.length-1]===u.length-1;if(0===l.inputs.length||p)u.pop(),r.push(l),n.add(l.name),p&&c.pop();else{c.push(u.length-1);for(var h=0,f=l.inputs;h<f.length;h++){var d=f[h];null==i[d.name]&&(i[d.name]=new Set),i[d.name].add(l.name),n.has(d.name)||u.push(d)}}}}return{sorted:r,recipientMap:i}}function pn(t){var e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{for(var n=null,r=0;r<t.sourceLayer.inboundNodes.length;++r)for(var i=0,a=t.sourceLayer.inboundNodes[r].outputTensors;i<a.length;i++)if(a[i].id===t.id){n=r;break}e=t.sourceLayer.getOutputAt(n)}return e}var hn=function(t){function e(n){var r=t.call(this,{})||this;if(r.containerNodes=new Set,r.name=n.name,null==r.name){var i=r.getClassName().toLowerCase();r.name=Jt(i)}if(r.supportsMasking=!1,r.trainable_=!0,Array.isArray(n.inputs)?r.inputs=n.inputs.slice():r.inputs=[n.inputs],Array.isArray(n.outputs)?r.outputs=n.outputs.slice():r.outputs=[n.outputs],I(r.inputs).length!==r.inputs.length)throw new f("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+r.inputs.map((function(t){return t.name})));I(r.outputs).length!==r.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+r.outputs.map((function(t){return t.name}))),r.inputLayers=[],r.inputLayersNodeIndices=[],r.inputLayersTensorIndices=[],r.outputLayers=[],r.outputLayersNodeIndices=[],r.outputLayersTensorIndices=[],r.layers=[],r.internalContainerRefs=[];for(var a=0,o=r.outputs;a<o.length;a++){var s=(T=o[a]).sourceLayer,u=T.nodeIndex,c=T.tensorIndex;r.outputLayers.push(s),r.outputLayersNodeIndices.push(u),r.outputLayersTensorIndices.push(c)}for(var l=0,p=r.inputs;l<p.length;l++)s=(T=p[l]).sourceLayer,u=T.nodeIndex,c=T.tensorIndex,v(0===u,"input layer has >1 nodes"),v(0===c,"input layer has >1 tensors"),r.inputLayers.push(s),r.inputLayersNodeIndices.push(u),r.inputLayersTensorIndices.push(c);r.inputNames=[],r.outputNames=[],r.feedInputShapes=[],r.feedInputNames=[],r.feedOutputNames=[];for(var d=0;d<r.inputLayers.length;d++){if(!((s=r.inputLayers[d])instanceof me))throw new TypeError("Input layers to a LayersModel must be InputLayer objects. Received inputs: "+n.inputs+". Input "+d+" (0-based) originates from layer type "+s.getClassName()+".");r.inputNames.push(s.name),r.feedInputShapes.push(s.batchInputShape),r.feedInputNames.push(s.name)}for(var m=0,g=r.outputLayers;m<g.length;m++)s=g[m],r.outputNames.push(s.name);r.internalInputShapes=r.inputs.map((function(t){return t.shape})),r.internalOutputShapes=r.outputs.map((function(t){return t.shape}));for(var y={},b={},x={},w={},C={},N=[],S=function(t,n,i,a,o,s){null!=a&&null!=o&&null!=s||(a=t.sourceLayer,o=t.nodeIndex,s=t.tensorIndex);var u=a.inboundNodes[o];if(-1!==i.indexOf(u))throw new h("The tensor "+t.name+' at layer "'+a.name+'" is part of a cycle.');if(-1===n.indexOf(u)){r.containerNodes.add(e.nodeKey(a,o)),a.id in C||(C[a.id]=Object.keys(C).length),-1===i.indexOf(u)&&i.push(u);for(var c=u.inboundLayers.length,l=0;l<c;l++){var p=u.inputTensors[l],f=u.inboundLayers[l],d=u.nodeIndices[l],m=u.tensorIndices[l];S(p,n,i,f,d,m)}for(n.push(u);i.indexOf(u)>=0;)i.splice(i.indexOf(u),1);N.push(u)}},E=[],k=[],A=0,R=r.outputs;A<R.length;A++){var T=R[A];S(T,E,k)}for(var D=0,_=N.slice().reverse();D<_.length;D++){b[(et=_[D]).id]=et,et.id in y||(y[et.id]=0);var F=y[et.id],M=null==x[et.outboundLayer.id]?0:x[et.outboundLayer.id];for(F=Math.max(F,M),x[et.outboundLayer.id]=F,w[et.outboundLayer.id]=et.outboundLayer,y[et.id]=F,d=0;d<et.inboundLayers.length;d++){var z=et.inboundLayers[d],L=(u=et.nodeIndices[d],z.inboundNodes[u]),B=null==y[L.id]?0:y[L.id];y[L.id]=Math.max(F+1,B),b[L.id]=L}}var P={};for(var j in y)(F=y[j])in P||(P[F]=[]),P[F].push(b[j]);var V={};for(var W in x)(F=x[W])in V||(V[F]=[]),V[F].push(w[W]);var U=Object.keys(V).map((function(t){return parseInt(t,10)})).sort(O);r.layers=[];for(var G=0,q=U;G<q.length;G++){var H=V[F=q[G]];H.sort((function(t,e){var n=C[t.id],r=C[e.id];return n<r?-1:n>r?1:0}));for(var K=0,X=H;K<X.length;K++)(s=X[K])instanceof e&&r.internalContainerRefs.push(s),r.layers.push(s)}r.layersByDepth=V,U=Object.keys(P).map((function(t){return parseInt(t,10)})).sort(O);for(var Y=r.inputs.slice(),$=[],J=0,Z=U;J<Z.length;J++)for(var Q=0,tt=P[F=Z[J]];Q<tt.length;Q++){var et;if(null!=(s=(et=tt[Q]).outboundLayer)){for(var nt=0,rt=et.inputTensors;nt<rt.length;nt++)if(T=rt[nt],-1===Y.indexOf(T))throw new h("Graph disconnected: cannot obtain value for tensor "+T+' at layer "'+s.name+'". The following previous layers were accessed without issue: '+$);for(var it=0,at=et.outputTensors;it<at.length;it++)T=at[it],Y.push(T);$.push(s.name)}}r.nodesByDepth=P;for(var ot=r.layers.map((function(t){return t.name})),st=function(t){var e=ot.filter((function(e){return e===t})).length;if(1!==e)throw new h('The name "'+t+'" is used '+e+" times in the model. All layer names should be unique. Layer names: "+JSON.stringify(ot))},ut=0,ct=ot;ut<ct.length;ut++)st(ct[ut]);return r.outboundNodes=[],r.inboundNodes=[],new le({outboundLayer:r,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:r.inputs,outputTensors:r.outputs,inputMasks:r.inputs.map((function(t){return null})),outputMasks:r.outputs.map((function(t){return null})),inputShapes:r.inputs.map((function(t){return t.shape})),outputShapes:r.outputs.map((function(t){return t.shape}))}),r.built=!0,r._refCount=1,r}return a(e,t),e.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Container '"+this.name+"' is already disposed.")},e.prototype.dispose=function(){this.assertNotDisposed();var t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(var e=0,n=this.layers;e<n.length;e++){var r=n[e];t.numDisposedVariables+=r.dispose().numDisposedVariables}for(var i=0,a=this.internalContainerRefs;i<a.length;i++){var o=a[i];t.numDisposedVariables+=o.dispose().numDisposedVariables}}return t.refCountAfterDispose=this._refCount,t},Object.defineProperty(e.prototype,"trainable",{get:function(){return this.trainable_},set:function(t){this.layers.forEach((function(e){e._trainableWeights.forEach((function(e){return e.trainable=t}))})),this.trainable_=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(this._trainableWeights.length>0)throw new f("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t=t.concat(r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var i=[],a=0,o=this.layers;a<o.length;a++)r=o[a],i.push.apply(i,r.trainableWeights);return i.concat(t)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.prototype.loadWeights=function(t,e){void 0===e&&(e=!0);for(var n={},r=0,i=0,a=this.layers;i<a.length;i++)for(var o=0,s=a[i].weights;o<s.length;o++){var u=s[o];if(null!=n[u.originalName])throw new f("Duplicate weight name: "+u.originalName);n[u.originalName]=u,r++}var c=[];for(var l in t){if(null!=n[l])c.push([n[l],t[l]]);else if(e)throw new f("Provided weight data has no target variable: "+l);delete n[l]}if(e){var p=[];for(var h in n)p.push(h);if(p.length>0)throw new f(p.length+" of "+r+" weights are not set: "+p)}oe(c)},e.prototype.updatedConfig=function(){var t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 1.4.0",e.backend="TensorFlow.js",e},e.prototype.toJSON=function(t,e){void 0===e&&(e=!0);var n=function t(e,n){if(null==e)return null;if("string"==typeof e)return w(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){for(var r=[],i=e.length,a=0;a<i;++a){var o=e[a];nn(n,a,o)?r.push(o):r.push(t(o,n))}return r}for(var s={},u=0,c=Object.keys(e);u<c.length;u++){var l=c[u],p=e[l];s[w(l)]="name"!==l&&"className"!==l||"string"!=typeof p?t(p,l):p}return s}(this.updatedConfig());return e?JSON.stringify(n):n},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){t=x(t);for(var r=new an,i=0;i<n.inputs.length;++i)r.add(n.inputs[i],t[i]);return un(n.outputs,r,e)}))},e.prototype.computeMask=function(t,e){var n=this;return Object(r.Vc)((function(){var r;return t=x(t),r=null==e?g(null,t.length):x(e),n.runInternalGraph(t,r)[1]}))},e.prototype.computeOutputShape=function(t){var e=Qt(t);if(e.length!==this.inputLayers.length)throw new f("Invalid inputShape argument "+t+": model has "+this.inputLayers.length+" tensor inputs.");for(var n={},r=0;r<e.length;r++){var i=this.inputLayers[r],a=e[r];n[I=i.name+"_0_0"]=a}var o=Object.keys(this.nodesByDepth).map((function(t){return parseInt(t,10)})).sort(O);if(o.length>1)for(var s=0,u=o;s<u.length;s++)for(var c=u[s],l=0,p=this.nodesByDepth[c];l<p.length;l++){var h=p[l];if(i=h.outboundLayer,-1===this.inputLayers.map((function(t){return t.id})).indexOf(i.id)){for(var d=[],m=0;m<h.inboundLayers.length;m++){var g=h.inboundLayers[m],y=h.nodeIndices[m],x=h.tensorIndices[m],w=n[I=g.name+"_"+y+"_"+x];d.push(w)}var C=Qt(i.computeOutputShape(b(d))),N=i.inboundNodes.indexOf(h);for(m=0;m<C.length;m++)n[I=i.name+"_"+N+"_"+m]=C[m]}}var S=[],E=[];for(r=0;r<this.outputLayers.length;r++){i=this.outputLayers[r],N=this.outputLayersNodeIndices[r],x=this.outputLayersTensorIndices[r];var I=i.name+"_"+N+"_"+x;E.push(I)}for(r=0;r<E.length;r++){var k=E[r];v(k in n),S.push(n[k])}return b(S)},e.prototype.runInternalGraph=function(t,e){null==e&&(e=g(null,t.length));for(var n={},r=0;r<this.inputs.length;++r){var i=this.inputs[r],a=t[r],o=e[r];n[i.id]=[a,o]}for(var s=0,u=Object.keys(this.nodesByDepth).map((function(t){return parseInt(t,10)})).sort(O);s<u.length;s++)for(var c=u[s],l=0,p=this.nodesByDepth[c];l<p.length;l++){for(var h=p[l],f=h.outboundLayer,m=h.inputTensors,y=h.outputTensors,b=new Array,w=0,C=m;w<C.length;w++)(i=C[w]).id in n&&b.push(n[i.id]);if(b.length===m.length){var N={},S=void 0,E=void 0,I=void 0,k=void 0;if(null!=h.callArgs&&(N=h.callArgs),1===b.length){var A=b[0],R=A[0],T=A[1];null==N.mask&&(N.mask=T),I=x(f.call(R,N)),k=x(f.computeMask(R,T)),S=[R],E=[T]}else S=b.map((function(t){return t[0]})),E=b.map((function(t){return t[1]})),null==N.mask&&(N.mask=E),I=x(f.call(S,N)),k=x(f.computeMask(S,E));if(f.activityRegularizer)throw new d("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(r=0;r<y.length;++r)i=y[r],a=I[r],o=k[r],n[i.id]=[a,o]}}for(var D=[],_=[],F=[],M=0,z=this.outputs;M<z.length;M++){v((i=z[M]).id in n,"Could not compute output "+i.name+" : "+i.id);var L=n[i.id],B=L[0];o=L[1],F.push(B.shape),D.push(B),_.push(o)}return[D,_,F]},e.prototype.buildNodeConversionMap=function(t){for(var n,r={},i=0,a=this.layers;i<a.length;i++){var o=a[i];n=o instanceof e?1:0;for(var s=0;s<o.inboundNodes.length;s++){var u=e.nodeKey(o,s);this.containerNodes.has(u)&&(r[u]=n,n+=1)}}return r},e.prototype.getLayer=function(t,e){if(null!=e){if(this.layers.length<=e)throw new f("Was asked to retrieve layer at index "+e+", but model only has "+this.layers.length+" layer(s).");return this.layers[e]}if(null==t)throw new f("Provide either a layer name or layer index");for(var n=0,r=this.layers;n<r.length;n++){var i=r[n];if(i.name===t)return i}throw new f("No such layer: "+t)},e.prototype.calculateLosses=function(){var t=this;return Object(r.Vc)((function(){for(var n=[],r=0,i=t.layers;r<i.length;r++)for(var a=i[r],o=0;o<a.inboundNodes.length;++o){var s=e.nodeKey(a,o);t.containerNodes.has(s)&&n.push.apply(n,a.calculateLosses())}return n}))},e.prototype.getConfig=function(){for(var t={name:this.name},n=this.buildNodeConversionMap(this.layers),r=[],i=0,a=this.layers;i<a.length;i++){for(var o=(x=a[i]).getClassName(),s=x.getConfig(),u=[],c=0;c<x.inboundNodes.length;c++){var l=x.inboundNodes[c],p=e.nodeKey(x,c),h={};if(this.containerNodes.has(p)){if(l.callArgs)try{JSON.stringify(l.callArgs),h=l.callArgs}catch(t){console.warn("Layer "+x.name+" was passed non-serializable keyword arguments: "+l.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),h={}}if(l.inboundLayers.length>0){for(var f=[],d=0;d<l.inboundLayers.length;d++){var m=l.inboundLayers[d],g=l.nodeIndices[d],v=l.tensorIndices[d];null==(C=n[e.nodeKey(m,g)])&&(C=0),f.push([m.name,C,v,h])}u.push(f)}}}var y={};y.name=x.name,y.className=o,y.config=s,y.inboundNodes=u,r.push(y)}t.layers=r;var b=[];for(d=0;d<this.inputLayers.length;d++){var x=this.inputLayers[d];g=this.inputLayersNodeIndices[d],p=e.nodeKey(x,g),this.containerNodes.has(p)&&(null!==(C=n[p])&&void 0!==C||(C=0),v=this.inputLayersTensorIndices[d],b.push([x.name,C,v]))}t.inputLayers=b;var w=[];for(d=0;d<this.outputLayers.length;d++){var C;if(x=this.outputLayers[d],g=this.outputLayersNodeIndices[d],p=e.nodeKey(x,g),this.containerNodes.has(p))null!==(C=n[p])&&void 0!==C||(C=0),v=this.outputLayersTensorIndices[d],w.push([x.name,C,v])}return t.outputLayers=w,t},e.fromConfig=function(t,e,n,r){void 0===n&&(n={}),void 0===r&&(r=!1);var i={},a={};function o(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function s(t,e){for(var n,r=[],a=0,s=e;a<s.length;a++){var u=s[a],c=u[0],l=u[1],p=u[2];if(n=null==u[3]?{}:u[3],!(c in i))return void o(t,e);var h=i[c];if(h.inboundNodes.length<=l)return void o(t,e);var f=h.inboundNodes[l];r.push(f.outputTensors[p])}r.length>0&&t.apply(b(r),n)}function u(t){var n=t.name,a=ke(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),i[n]=a,t.inboundNodes.forEach((function(t){if(!(t instanceof Array))throw new f("Corrupted configuration, expected array for nodeData: "+t);o(a,t)}))}for(var c=e.name,l=e.layers,p=0,h=l;p<h.length;p++)u(g=h[p]);for(;!k(a);)for(var d=0,m=l;d<m.length;d++){var g=m[d];if((_=i[g.name]).name in a){var y=a[_.name];delete a[_.name];for(var x=0,w=y;x<w.length;x++)s(_,w[x])}}for(var C=[],N=[],S=0,E=e.inputLayers;S<E.length;S++){var O=(g=E[S])[0],I=g[1],A=g[2];v(O in i);var R=(_=i[O]).inboundNodes[I].outputTensors;C.push(R[A])}for(var T=0,D=e.outputLayers;T<D.length;T++){var _;O=(g=D[T])[0],I=g[1],A=g[2],v(O in i),R=(_=i[O]).inboundNodes[I].outputTensors,N.push(R[A])}return new t({inputs:C,outputs:N,name:c})},Object.defineProperty(e.prototype,"stateful",{get:function(){if(this._stateful)throw new f("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(var t=0,e=this.layers;t<e.length;t++)if(e[t].stateful)return!0;return!1},enumerable:!0,configurable:!0}),e.prototype.resetStates=function(){var t=this;Object(r.Vc)((function(){t.layers.forEach((function(t){t.stateful&&t.resetStates()}))}))},e}(he);function fn(t,e){return function(t,e,n){var r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((function(t){return null}));if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error("Provided "+n+" is an array of "+t.length+" element(s), but the model has "+r+" outputs. Make sure a set of weights is provided for each model output.");return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){var i=[];return e.forEach((function(e){e in t?i.push(t[e]):i.push(null)})),i}throw new Error("The model has multiple ("+r+") outputs, so "+n+" must be either an array with "+r+" elements or an object with "+e+" keys. Provided "+n+" not understood: "+JSON.stringify(t))}(t,e,"classWeight")}function dn(t,e,n,i){return u(this,void 0,void 0,(function(){var a,o,s,u,l;return c(this,(function(c){switch(c.label){case 0:if(null!=e||null!=i)throw new Error("Support sampleWeight is not implemented yet");return null==n?[3,2]:(a=Object(r.Vc)((function(){if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1)return t.argMax(1);if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error("Encountered unexpected last-dimension size ("+t.shape[1]+") during handling of class weights. The size is expected to be >= 1.")}throw new Error("Unexpected rank of target (y) tensor ("+t.rank+") during handling of class weights. The rank is expected to be 1 or 2.")})),u=(s=Array).from,[4,a.data()]);case 1:return o=u.apply(s,[c.sent()]),Object(r.R)(a),l=[],o.forEach((function(t){if(null==n[t])throw new Error("classWeight must contain all classes in the training data. The class "+t+" exists in the data but not in classWeight");l.push(n[t])})),[2,Object(r.Sc)(l,"float32")];case 2:return[2,null]}}))}))}function mn(t,e){return Object(r.Pb)(t,e)}var gn=32;function vn(t,e){var n,i,a=e;n=a.xs,i=a.ys,r.cd.assert(null!=n&&null!=i,(function(){return"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e}));var o=yn("input",t.inputNames,n),s=yn("output",t.outputNames,i),u=o[0].shape[0];r.cd.assert(o.length===t.inputs.length,(function(){return"LayersModel has "+t.inputs.length+" inputs, but the dataset provides "+o.length+" inputs.  (Expected input keys: "+JSON.stringify(t.inputNames)+")"})),r.cd.assert(s.length===t.outputs.length,(function(){return"LayersModel has "+t.outputs.length+" outputs, but the dataset provides "+s.length+" outputs.  (Expected output keys: "+JSON.stringify(t.outputNames)+")"}));for(var c=function(e){r.cd.assert(o[e].shape[0]===u,(function(){return"Batch size mismatch: input "+t.inputNames[e]+" has "+o[e].shape[0]+"; expected  "+u+" based on input "+t.inputNames[0]+"."}))},l=0;l<o.length;l++)c(l);for(var p=function(e){r.cd.assert(s[e].shape[0]===u,(function(){return"Batch size mismatch: output "+t.outputNames[e]+" has "+s[e].shape[0]+"; expected  "+u+" based on input "+t.inputNames[0]+"."}))},h=0;h<s.length;h++)p(h);return{xs:o,ys:s}}function yn(t,e,n){if(n instanceof r.b)return[n];if(Array.isArray(n))return r.cd.assert(n.length===e.length,(function(){return"Received an array of "+n.length+" Tensors, but expected "+e.length+" to match the "+t+" keys "+e+"."})),n;for(var i=[],a=0,o=e;a<o.length;a++){var s=o[a];if(null==n[s])throw new f("The feature data generated by the dataset lacks the required "+t+" key '"+s+"'.");i.push(n[s])}return i}function bn(t,e,n){return u(this,void 0,void 0,(function(){var i,a,o,s,u,l,p,h,f,m,g,v,y,b,w,C,N,S,E,O,I,k,A,R,T,D,_,F,M,z,L,B,P,j;return c(this,(function(c){switch(c.label){case 0:if(i=null!=n.batchesPerEpoch,r.cd.assert(null!=t.optimizer,(function(){return"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."})),r.cd.assert(null!=n,(function(){return"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."})),r.cd.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(function(){return"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs})),r.cd.assert(!i||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(function(){return"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch})),r.cd.assert(null==n.validationSplit,(function(){return"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."})),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0,c.label=1;case 1:return c.trys.push([1,,26,27]),a=null!=n.validationData,o=void 0,s=void 0,a&&(xn(n.validationData)?r.cd.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(function(){return"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches})):(u=function(t){if(3===t.length)throw new d("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData),o=u.xs,s=u.ys)),l=t.makeTrainFunction(),p=t.getDedupedMetricsNames(),void 0,h=a?p.slice().concat(p.map((function(t){return"val_"+t}))):p.slice(),f=Ee(n.callbacks,n.yieldEvery),m=null==n.verbose?1:n.verbose,g=Ie(f,m,n.epochs,null,null,function(t,e){var n=null;return null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size),n}(e,n),null,a,h),v=g.callbackList,y=g.history,v.setModel(t),t.history=y,[4,v.onTrainBegin()];case 2:return c.sent(),t.stopTraining_=!1,b=null==n.initialEpoch?0:n.initialEpoch,[4,e.iterator()];case 3:w=c.sent(),c.label=4;case 4:return b<n.epochs?(C={},[4,v.onEpochBegin(b)]):[3,23];case 5:return c.sent(),N=0,S=0,i?[3,7]:[4,e.iterator()];case 6:w=c.sent(),c.label=7;case 7:return!i||N<n.batchesPerEpoch?[4,w.next()]:[3,21];case 8:return E=c.sent(),i&&E.done?(console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+N+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset."),[3,21]):null==E.value?[3,15]:(O=vn(t,E.value),I=O.xs,k=O.ys,(A={}).batch=S,A.size=I[0].shape[0],[4,v.onBatchBegin(S,A)]);case 9:if(c.sent(),R=[],null==n.classWeight)return[3,13];T=fn(n.classWeight,t.outputNames),j=0,c.label=10;case 10:return j<T.length?(_=(D=R).push,[4,dn(k[j],null,T[j])]):[3,13];case 11:_.apply(D,[c.sent()]),c.label=12;case 12:return++j,[3,10];case 13:for(F=I.concat(k).concat(R),M=l(F),Object(r.R)(F),j=0;j<p.length;++j)z=p[j],L=M[j],A[z]=L,Object(r.rb)(L);return[4,v.onBatchEnd(S,A)];case 14:c.sent(),ye(A),S++,N++,c.label=15;case 15:return(i?N>=n.batchesPerEpoch:E.done)?a?(B=void 0,xn(n.validationData)?(P=x,[4,t.evaluateDataset(n.validationData,{batches:n.validationBatches})]):[3,17]):[3,19]:[3,20];case 16:return B=P.apply(void 0,[c.sent()]),[3,18];case 17:B=x(t.evaluate(o,s,{batchSize:null==n.validationBatchSize?gn:n.validationBatchSize,verbose:0})),c.label=18;case 18:for(j=0;j<t.metricsNames.length;++j)C["val_"+t.metricsNames[j]]=B[j];c.label=19;case 19:return[3,21];case 20:return t.stopTraining_?[3,21]:[3,7];case 21:return[4,v.onEpochEnd(b,C)];case 22:return c.sent(),b++,t.stopTraining_?[3,23]:[3,4];case 23:return[4,v.onTrainEnd()];case 24:return c.sent(),[4,t.history.syncData()];case 25:return c.sent(),[2,t.history];case 26:return t.isTraining=!1,[7];case 27:return[2]}}))}))}function xn(t){return"function"==typeof t.iterator}function wn(t,e,n){return u(this,void 0,void 0,(function(){var i,a,o,s,u,l,p,h,f,m;return c(this,(function(g){switch(g.label){case 0:if(i=null!=(n=n||{}).batches,a=t.testFunction,o=[],n.verbose>0)throw new d("Verbose mode is not implemented yet.");return r.cd.assert(!i||n.batches>0&&Number.isInteger(n.batches),(function(){return"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)})),function(t){return"function"==typeof t.next}(e)?(u=e,[3,3]):[3,1];case 1:return[4,e.iterator()];case 2:u=g.sent(),g.label=3;case 3:s=u,l=0,p=0,h=function(){var e;return c(this,(function(u){switch(u.label){case 0:return[4,s.next()];case 1:return e=u.sent(),o=Object(r.Vc)((function(){if(e.value){var n=vn(t,e.value),i=n.xs,s=n.ys,u=i.concat(s),c=Object(r.Vc)((function(){return a(u)}));if(Object(r.R)(u),0===p)for(var h=0;h<c.length;++h)o.push(Object(r.nc)(0));var f=u[0].shape[0],d=function(t){var e=c[t],n=o[t];o[t]=Object(r.Vc)((function(){return Object(r.f)(o[t],Object(r.Pb)(f,e))})),p>0&&Object(r.R)(n)};for(h=0;h<c.length;++h)d(h);Object(r.R)(c),l+=f,++p}return o})),e.done?(i&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, "+n.batches+" batches). You may need to use the repeat() function when building your dataset."),[2,"break"]):[2]}}))},g.label=4;case 4:return!i||p<n.batches?[5,h()]:[3,6];case 5:return"break"===g.sent()?[3,6]:[3,4];case 6:for(f=0;f<o.length;++f)m=o[f],o[f]=Object(r.S)(o[f],l),Object(r.R)(m);return[2,b(o)]}}))}))}function Cn(t){r.cd.assert(t>0&&Number.isInteger(t),(function(){return"batchSize is required to be a positive integer, but got "+t}))}function Nn(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((function(t){return ht(t,e,n-e)})):ht(t,e,n-e)}function Sn(t,e){return Object(r.Vc)((function(){return null==t?null:Array.isArray(t)?t.map((function(t){return Sn(t,e)})):xt(t,"int32"===e.dtype?e:e.toInt())}))}function En(t,e){for(var n=[],r=0,i=null;r<t;)(i=r+e)>=t&&(i=t),n.push([r,i]),r=i;return n}function On(t,e,n,i,a,o,s,l,p,h,m,g,v,y,b){return u(this,void 0,void 0,(function(){var u,x,w,C,N,S,E,O;return c(this,(function(I){switch(I.label){case 0:if(null==a&&(a=32),null==o&&(o=1),null==m&&(m=!0),null==v&&(v=0),u=!1,null!=p&&null!=h&&(u=!0),null!=b&&(u=!0,null==y))throw new f("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");return null!=(x=t.checkNumSamples(n,a,y,"steps_per_epoch"))&&(w=ct(0,x)),null==s&&(s=1),C=Ie(l,s,o,v,x,y,a,u,g),N=C.callbackList,S=C.history,N.setModel(t),t.history=S,[4,N.onTrainBegin()];case 1:I.sent(),t.stopTraining_=!1,E=function(o){var s,l,f,g,v;return c(this,(function(b){switch(b.label){case 0:return[4,N.onEpochBegin(o)];case 1:if(b.sent(),s={},null==y)return[3,2];throw new d("stepsPerEpoch mode is not implemented yet.");case 2:if("batch"===m)throw new d("batch shuffling is not implemneted yet");m&&r.cd.shuffle(w),l=Object(r.Sc)(w),f=En(x,a),g=function(o){var d;return c(this,(function(c){switch(c.label){case 0:return d={},[4,N.onBatchBegin(o,d)];case 1:return c.sent(),Object(r.Vc)((function(){var c=f[o][0],m=f[o][1],g=ht(l,c,m-c);d.batch=o,d.size=m-c;for(var v=Sn(n,g),y=e(v),b=0;b<i.length;++b){var x=i[b],w=y[b];d[x]=w,Object(r.rb)(w)}if(o===f.length-1&&u){var C=t.testLoop(p,h,a);for(b=0;b<i.length;++b)x=i[b],w=C[b],Object(r.rb)(w),s["val_"+x]=w}})),[4,N.onBatchEnd(o,d)];case 2:return c.sent(),ye(d),t.stopTraining_?[2,"break"]:[2]}}))},v=0,b.label=3;case 3:return v<f.length?[5,g(v)]:[3,6];case 4:if("break"===b.sent())return[3,6];b.label=5;case 5:return++v,[3,3];case 6:l.dispose(),b.label=7;case 7:return[4,N.onEpochEnd(o,s)];case 8:return b.sent(),t.stopTraining_?[2,"break"]:[2]}}))},O=v,I.label=2;case 2:return O<o?[5,E(O)]:[3,5];case 3:if("break"===I.sent())return[3,5];I.label=4;case 4:return++O,[3,2];case 5:return[4,N.onTrainEnd()];case 6:return I.sent(),[4,t.history.syncData()];case 7:return I.sent(),[2,t.history]}}))}))}function In(t,e,n,i){return void 0===i&&(i={}),u(this,void 0,void 0,(function(){var a,o,s,u,l,p,h,m,g,v,y,b,x,w,C,N,S,E,O,I;return c(this,(function(c){switch(c.label){case 0:if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0,c.label=1;case 1:return c.trys.push([1,,7,8]),Cn(m=null==i.batchSize?32:i.batchSize),!1,[4,t.standardizeUserData(e,n,i.sampleWeight,i.classWeight,!1,m)];case 2:if(g=c.sent(),a=g[0],o=g[1],h=g[2],v=!1,y=void 0,!(null!=i.validationData&&i.validationData.length>0))return[3,4];if(v=!0,2!==i.validationData.length)throw 3===i.validationData.length?new d("validationData including sample weights is not supported yet."):new f("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+i.validationData+" is invalid.");return s=i.validationData[0],u=i.validationData[1],!0,[4,t.standardizeUserData(s,u,null,null,!0,m)];case 3:return b=c.sent(),l=b[0],p=b[1],y=l.concat(p),[3,5];case 4:null!=i.validationSplit&&i.validationSplit>0&&i.validationSplit<1?(v=!0,x=Math.floor(a[0].shape[0]*(1-i.validationSplit)),w=a[0].shape[0],l=Nn(a,x,w),a=Nn(a,0,x),p=Nn(o,x,w),o=Nn(o,0,x),y=l.concat(p)):null!=i.validationSteps&&(v=!0),c.label=5;case 5:return C=a.concat(o).concat(h),t.checkTrainableWeightsConsistency(),N=t.makeTrainFunction(),S=t.getDedupedMetricsNames(),E=void 0,O=void 0,v?(t.makeTestFunction(),E=t.testFunction,O=S.slice().concat(S.map((function(t){return"val_"+t})))):(E=null,y=[],O=S.slice()),I=Ee(i.callbacks,i.yieldEvery),[4,On(t,N,C,S,m,i.epochs,i.verbose,I,E,y,i.shuffle,O,i.initialEpoch,null,null)];case 6:return[2,c.sent()];case 7:return t.isTraining=!1,An(a,e),An(o,n),An(l,s),An(p,u),null!=h&&Object(r.R)(h),[7];case 8:return[2]}}))}))}function kn(t){var e=[];t instanceof r.b&&(t=[t]);for(var n=0;n<t.length;++n){var i=t[n];if(1===i.rank)e.push(pt(i,1));else{if(0===i.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(i)}}return e}function An(t,e){if(null!=t){var n=[];if(e instanceof r.b)n.push(e.id);else if(Array.isArray(e))e.forEach((function(t){return n.push(t.id)}));else if(null!=e)for(var i in e){var a=e[i];n.push(a.id)}var o=[];if(t instanceof r.b)-1===n.indexOf(t.id)&&o.push(t);else if(Array.isArray(t))t.forEach((function(t){-1===n.indexOf(t.id)&&o.push(t)}));else if(null!=t)for(var s in t){var u=t[s];-1===n.indexOf(u.id)&&o.push(u)}o.forEach((function(t){t.isDisposed||t.dispose()}))}}function Rn(t){return Array.isArray(t)}function Tn(t){return!function(t){return t instanceof r.b}(t)&&!Rn(t)}function Dn(t,e,n,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=""),null==e||0===e.length){if(null!=t){var a=!1;if(Rn(t)&&t.length>0)a=!0;else if(Tn(t)){for(var o in t)if(t.hasOwnProperty(o)){a=!0;break}}else a=!0;if(a)throw new f("Error when checking model "+i+" expected no data, but got "+t)}return[]}if(null==t)return e.map((function(t){return null}));var s;if(Tn(t)){t=t,s=[];for(var u=0,c=e;u<c.length;u++){var l=c[u];if(null==t[l])throw new f('No data provided for "'+l+'". Need data for each key in: '+e);s.push(t[l])}}else if(Rn(t)){if((t=t).length!==e.length)throw new f("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see "+e.length+" Tensor(s), but instead got the following list of Tensor(s): "+t);s=t}else{if(t=t,e.length>1)throw new f("The model "+i+" expects "+e.length+" Tensor(s), but only received one Tensor. Found: Tensor with shape "+t.shape);s=[t]}if(s=kn(s),null!=n)for(var p=0;p<e.length;++p)if(null!=n[p]){var h=s[p];if(h.shape.length!==n[p].length)throw new f("Error when checking "+i+": expected "+e[p]+" to have "+n[p].length+" dimension(s). but got array with shape "+h.shape);for(var d=0;d<n[p].length;++d)if(0!==d||r){var m=h.shape[d],g=n[p][d];if(null!=g&&g>=0&&m!==g)throw new f("Error when checking "+i+": expected "+e[p]+" to have shape ["+n[p]+"], but got array with shape ["+h.shape+"].")}}return s}function _n(t,e,n,r,i){var a;if(void 0===r&&(r=!0),void 0===i&&(i=""),Array.isArray(t)){if(t.length!==e.length)throw new f("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see "+e.length+" Tensor(s), but instead got "+t.length+" Tensors(s).");a=t}else{if(e.length>1)throw new f("The model expects "+e.length+" "+i+" Tensors, but only received one Tensor. Found: array with shape "+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(var o=0;o<e.length;++o)if(null!=n[o]){var s=a[o];if(s.shape.length!==n[o].length)throw new f("Error when checking "+i+": expected "+e[o]+" to have "+n[o].length+" dimension(s), but got array with shape "+JSON.stringify(s.shape));for(var u=0;u<n[o].length;++u)if(0!==u||r){var c=s.shape[u],l=n[o][u];if(null!=l&&l!==c)throw new f("Error when checking "+i+": expected "+e[o]+" to have shape "+JSON.stringify(n[o])+" but got array with shape "+JSON.stringify(s.shape)+".")}}}var Fn=function(t){function e(e){var n=t.call(this,e)||this;return n.isTraining=!1,n}return a(e,t),e.prototype.summary=function(t,e,n){if(void 0===n&&(n=console.log),!this.built)throw new f("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Ze(this,t,e,n)},e.prototype.compile=function(t){var e=this;if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){var e={Adagrad:function(){return r.Yc.adagrad(.01)},Adadelta:function(){return r.Yc.adadelta(1,.95,l())},Adam:function(){return r.Yc.adam(.001,.9,.999,l())},Adamax:function(){return r.Yc.adamax(.002,.9,.999,l(),0)},RMSProp:function(){return r.Yc.rmsprop(.001,.9,0,l())},SGD:function(){return r.Yc.sgd(.01)}};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new f("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof r.a))throw new f("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}var n=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new f("When passing an Array as loss, it should have one entry per model output. The model has "+this.outputs.length+" output(s), but you passed loss="+t.loss+".");var i=t.loss;n=i.map((function(t){return Be(t)}))}else{var a=Be(t.loss);this.outputs.forEach((function(t){n.push(a)}))}else{for(var o in t.loss=t.loss,t.loss)if(-1===this.outputNames.indexOf(o))throw new f('Unknown entry in loss dictionary: "'+o+'". Only expected the following keys: '+this.outputNames);for(var s=0,u=this.outputNames;s<u.length;s++){var c=u[s];null==t.loss[c]&&console.warn('Output "'+c+'" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to '+c+" during training"),n.push(Be(t.loss[c]))}}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(var p=0;p<this.outputs.length;++p){var h=this.internalOutputShapes[p],d=this.outputNames[p];this.feedOutputNames.push(d),this.feedOutputShapes.push(h),this.feedLossFns.push(this.lossFunctions[p])}var m=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Q("loss",(function(){for(var t=0;t<e.outputs.length;++t)if(-1===m.indexOf(t)){var n=e.lossFunctions[t];e.outputs.length>1&&(e.metricsTensors.push([n,t]),e.metricsNames.push(e.outputNames[t]+"_loss"))}}));var g=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((function(t){return[]}));var n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map((function(t){return n}));for(var r=[],i=0,a=e;i<a.length;i++){var o=a[i],s=n.hasOwnProperty(o)?n[o]:[];Array.isArray(s)||(s=[s]),r.push(s)}return r}(t.metrics,this.outputNames);Q("metric",(function(){for(var t=function(t){if(-1!==m.indexOf(t))return"continue";!function(n){for(var r,i,a,o=function(n){if("string"==typeof n&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(n)){var o=e.internalOutputShapes[t];1===o[o.length-1]||e.lossFunctions[t]===Me?-1!==["accuracy","acc"].indexOf(n)?i=Pe:-1!==["crossentropy","ce"].indexOf(n)&&(i=Ge):e.lossFunctions[t]===Fe?-1!==["accuracy","acc"].indexOf(n)?i=qe:-1!==["crossentropy","ce"].indexOf(n)&&(i=Ke):-1!==["accuracy","acc"].indexOf(n)?i=je:-1!==["crossentropy","ce"].indexOf(n)&&(i=He);var s=void 0;-1!==["accuracy","acc"].indexOf(n)?s="acc":-1!==["crossentropy","ce"].indexOf(n)&&(s="ce"),a=i,r=""+s}else{var u=function(t){if("string"==typeof t&&t in Xe)return Xe[t];if("string"!=typeof t&&null!=t)return t;throw new f("Unknown metric "+t)}(n);a=u,r=""+Ye(n)}var c;Q(r,(function(){c=a})),function(t,n,r){e.outputNames.length>1&&(n=e.outputNames[t]+"_"+n),e.metricsNames.push(n),e.metricsTensors.push([r,t])}(t,r,c)},s=0,u=n;s<u.length;s++)o(u[s])}(g[t])},n=0;n<e.outputs.length;++n)t(n)})),this.collectedTrainableWeights=this.trainableWeights},e.prototype.checkTrainableWeightsConsistency=function(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")},e.prototype.evaluate=function(t,e,n){void 0===n&&(n={});var r=null==n.batchSize?32:n.batchSize;Cn(r);var i=this.standardizeUserDataXY(t,e,!0,r);try{var a=i[0].concat(i[1]);this.makeTestFunction();var o=this.testFunction;return b(this.testLoop(o,a,r,n.verbose,n.steps))}finally{An(i[0],t),An(i[1],e)}},e.prototype.evaluateDataset=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return this.makeTestFunction(),[2,wn(this,t,e)]}))}))},e.prototype.checkNumSamples=function(t,e,n,r){var i;if(void 0===r&&(r="steps"),null!=n){if(i=null,null!=e)throw new f("If "+r+" is set, batchSize must be null or undefined.Got batchSize = "+e)}else{if(null==t)throw new f("Either the input data should have a defined shape, or "+r+" shoud be specified.");i=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return i},e.prototype.execute=function(t,e){if(Array.isArray(e)&&0===e.length)throw new f("`outputs` is an empty Array, which is not allowed.");var n=Array.isArray(e),i=n?e:[e],a=this.retrieveSymbolicTensors(i),o=new an;if(t instanceof r.b&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new f("The number of inputs provided ("+t.length+") does not match the number of inputs of this model ("+this.inputs.length+").");for(var s=0;s<this.inputs.length;++s)o.add(this.inputs[s],t[s])}else for(var u=0,c=this.inputs;u<c.length;u++){var l=c[u],p=t[l.name];if(null==p)throw new f("No value is provided for the model's input "+l.name);o.add(l,p)}var h=un(a,o);return n?h:h[0]},e.prototype.retrieveSymbolicTensors=function(t){for(var e=g(null,t.length),n=t.length,r=0,i=this.layers;r<i.length;r++){for(var a=i[r],o=Array.isArray(a.output)?a.output:[a.output],s=o.map((function(t){return t.name})),u=0;u<t.length;++u){var c=s.indexOf(t[u]);if(-1!==c&&(e[u]=o[c],n--),0===n)break}if(0===n)break}if(n>0){var l=[];throw e.forEach((function(e,n){null==e&&l.push(t[n])})),new f("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(l))}return e},e.prototype.predictLoop=function(t,e,n){var i=this;return void 0===e&&(e=32),void 0===n&&(n=!1),Object(r.Vc)((function(){var a=i.checkNumSamples(t);if(n)throw new d("Verbose predictLoop() is not implemented yet.");for(var o=En(a,e),s=i.outputs.map((function(t){return[]})),u=function(e){Object(r.Vc)((function(){var n=o[e][0],r=o[e][1],a=Nn(t,n,r),s=[];if(Array.isArray(a))for(var u=0;u<a.length;++u)s.push({key:i.inputs[u],value:a[u]});else s.push({key:i.inputs[0],value:a});var c=new an(s);return un(i.outputs,c)})).forEach((function(t,e){return s[e].push(t)}))},c=0;c<o.length;++c)u(c);return b(s.map((function(t){return Object(r.D)(t,0)})))}))},e.prototype.predict=function(t,e){void 0===e&&(e={});var n=kn(t);_n(n,this.inputNames,this.feedInputShapes,!1);try{var r=null==e.batchSize?32:e.batchSize;return Cn(r),this.predictLoop(n,r)}finally{An(n,t)}},e.prototype.predictOnBatch=function(t){_n(t,this.inputNames,this.feedInputShapes,!0);var e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)},e.prototype.standardizeUserDataXY=function(t,e,n,i){if(void 0===n&&(n=!0),null==this.optimizer_)throw new h("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");for(var a=[],o=0;o<this.feedOutputShapes.length;++o){var s=this.feedOutputShapes[o];this.feedLossFns[o]===Fe?a.push(s.slice(0,s.length-1).concat([1])):a.push(s)}if(function(t,e,n){var i=I(t.map((function(t){return t.shape[0]})));i.sort();var a=I(e.map((function(t){return t.shape[0]})));if(a.sort(),i.length>1)throw new f("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map((function(t){return t.shape}))));if(a.length>1)throw new f("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map((function(t){return t.shape}))));if(i.length>0&&a.length>0&&!r.cd.arraysEqual(i,a))throw new f("Input Tensors should have the same number of samples as target Tensors. Found "+i[0]+" input sample(s) and "+a[0]+" target sample(s).")}(t=Dn(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Dn(e,this.feedOutputNames,a,!1,"target")),function(t,e,n){for(var r=[Re,Me,_e],i=0;i<t.length;++i){var a=t[i],o=e[i],s=n[i];if(null!=o){if(o===_e&&1===a.shape[a.shape.length-1])throw new f("You are passing a target array of shape "+a.shape+" while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==r.indexOf(o))for(var u=a.shape.slice(1),c=s.slice(1),l=0;l<u.length;++l){var p=u[l],h=c[l];if(null!=h&&p!==h)throw new f("A target Tensor with shape "+a.shape+" was passed for an output of shape "+s+", while using a loss function that expects targets to have the same shape as the output.")}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=i&&i>0&&t[0].shape[0]%i!=0)throw new f("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+i+". Found: "+t[0].shape[0]+" sample(s).");return[t,e]},e.prototype.standardizeUserData=function(t,e,n,r,i,a){return void 0===i&&(i=!0),u(this,void 0,void 0,(function(){var o,s,u,l,p,h,f,d;return c(this,(function(c){switch(c.label){case 0:if(o=this.standardizeUserDataXY(t,e,i,a),s=o[0],u=o[1],null!=n)throw new Error("sample weight is not supported yet.");if(l=null,null==r)return[3,4];p=fn(r,this.outputNames),l=[],h=0,c.label=1;case 1:return h<p.length?(d=(f=l).push,[4,dn(u[h],null,p[h])]):[3,4];case 2:d.apply(f,[c.sent()]),c.label=3;case 3:return++h,[3,1];case 4:return[2,[s,u,l]]}}))}))},e.prototype.testLoop=function(t,e,n,i,a){var o=this;return void 0===i&&(i=0),Object(r.Vc)((function(){var s=o.checkNumSamples(e,n,a,"steps"),u=[];if(i>0)throw new d("Verbose mode is not implemented yet.");if(null!=a)throw new d("steps mode in testLoop() is not implemented yet");for(var c=En(s,n),l=Object(r.Sc)(ct(0,s)),p=0;p<c.length;++p){var h=c[p][0],f=c[p][1],m=ht(l,h,f-h),g=Sn(e,m),v=t(g);if(0===p)for(var y=0;y<v.length;++y)u.push(Object(r.nc)(0));for(y=0;y<v.length;++y){var b=v[y];u[y]=Object(r.f)(u[y],Object(r.Pb)(f-h,b))}}for(y=0;y<u.length;++y)u[y]=Object(r.S)(u[y],s);return u}))},e.prototype.getDedupedMetricsNames=function(){for(var t=this.metricsNames,e=[],n=0;n<t.length;++n){var r=t[n],i=r;y(t,r)>1&&(i+="_"+y(t.slice(0,n),r)),e.push(i)}return e},e.prototype.makeTrainFunction=function(){var t=this;return function(e){var n=[],i=e.slice(0,t.inputs.length),a=e.slice(t.inputs.length,t.inputs.length+t.outputs.length),o=e.slice(t.inputs.length+t.outputs.length,t.inputs.length+2*t.outputs.length),s=[],u=t.collectedTrainableWeights.map((function(t){return t.read()}));return[t.optimizer_.minimize((function(){for(var e=[],u=0;u<t.inputs.length;++u)e.push({key:t.inputs[u],value:i[u]});var c,l=new an(e),p=un(t.outputs,l,{training:!0});for(u=0;u<t.lossFunctions.length;++u){var h=(0,t.lossFunctions[u])(a[u],p[u]);null!=o[u]&&(h=mn(h,o[u]));var f=Object(r.Jb)(h);n.push(f),c=0===u?h:Object(r.f)(c,h)}for(u=0;u<t.metricsTensors.length;++u){var d=void 0;if(t.outputs.length>1&&u<t.outputs.length)d=n[u];else{var m=t.metricsTensors[u][0],g=t.metricsTensors[u][1];d=Object(r.Jb)(m(a[g],p[g]))}Object(r.rb)(d),s.push(d)}return c=Object(r.Jb)(c),t.calculateLosses().forEach((function(t){c=Object(r.f)(c,t)})),c}),!0,u)].concat(s)}},e.prototype.makeTestFunction=function(){var t=this;this.testFunction=function(e){return Object(r.Vc)((function(){for(var n,i=[],a=e.slice(0,t.inputs.length),o=e.slice(t.inputs.length,t.inputs.length+t.outputs.length),s=[],u=0;u<t.inputs.length;++u)s.push({key:t.inputs[u],value:a[u]});var c=new an(s),l=un(t.outputs,c);for(u=0;u<t.lossFunctions.length;++u){var p=t.lossFunctions[u],h=Object(r.Jb)(p(o[u],l[u]));n=0===u?h:Object(r.f)(n,h),i.push(n)}for(u=0;u<t.metricsTensors.length;++u){var f=t.metricsTensors[u][0],d=t.metricsTensors[u][1],m=Object(r.Jb)(f(o[d],l[d]));i.push(m)}return i}))}},e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),u(this,void 0,void 0,(function(){return c(this,(function(r){return[2,In(this,t,e,n)]}))}))},e.prototype.fitDataset=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,bn(this,t,e)]}))}))},e.prototype.trainOnBatch=function(t,e){return u(this,void 0,void 0,(function(){var n,i,a,o,s,u,l,p,h;return c(this,(function(c){switch(c.label){case 0:return[4,this.standardizeUserData(t,e)];case 1:n=c.sent(),i=n[0],a=n[1],o=this.makeTrainFunction(),s=o(i.concat(a)),u=[],l=0,p=s,c.label=2;case 2:return l<p.length?[4,p[l].data()]:[3,5];case 3:h=c.sent(),u.push(h[0]),c.label=4;case 4:return l++,[3,2];case 5:return Object(r.R)(s),[2,b(u)]}}))}))},e.prototype.getNamedWeights=function(t){for(var e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,i=this.getWeights(n),a=0;a<r.length;++a)n&&!r[a].trainable||e.push({name:r[a].originalName,tensor:i[a]});return e},Object.defineProperty(e.prototype,"stopTraining",{get:function(){return this.stopTraining_},set:function(t){this.stopTraining_=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"optimizer",{get:function(){return this.optimizer_},set:function(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){var e=t.prototype.dispose.call(this);if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){var n=Object(r.Kb)().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=n-Object(r.Kb)().numTensors}return e},e.prototype.getLossIdentifiers=function(){var t;if("string"==typeof this.loss)t=w(this.loss);else if(Array.isArray(this.loss)){for(var e=0,n=this.loss;e<n.length;e++)if("string"!=typeof n[e])throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((function(t){return w(t)}))}else{var r=Object.keys(this.loss);t={};for(var i=this.loss,a=0,o=r;a<o.length;a++){var s=o[a];if("string"!=typeof i[s])throw new Error("Serialization of non-string loss is not supported.");t[s]=w(i[s])}}return t},e.prototype.getMetricIdentifiers=function(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[w(Ye(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((function(t){return w(Ye(t))}));var t={};for(var e in this.metrics)t[e]=w(Ye(this.metrics[e]));return t},e.prototype.getTrainingConfig=function(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}},e.prototype.loadTrainingConfig=function(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");var e,n,r=ke(rn(t.optimizer_config));if("string"==typeof t.loss)e=C(t.loss);else if(Array.isArray(t.loss))e=t.loss.map((function(t){return C(t)}));else if(null!=t.loss)for(var i in e={},t.loss)e[i]=C(t.loss[i]);if(Array.isArray(t.metrics))n=t.metrics.map((function(t){return C(t)}));else if(null!=t.metrics)for(var i in n={},t.metrics)n[i]=C(t.metrics[i]);this.compile({loss:e,metrics:n,optimizer:r})},e.prototype.save=function(t,e){return u(this,void 0,void 0,(function(){var n,i,a,o,s,u,l,p,h,d,m;return c(this,(function(c){switch(c.label){case 0:if("string"==typeof t){if(0===(n=r.pb.getSaveHandlers(t)).length)throw new f("Cannot find any save handlers for URL '"+t+"'");if(n.length>1)throw new f("Found more than one ("+n.length+") save handlers for URL '"+t+"'");t=n[0]}if(null==t.save)throw new f("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[4,r.pb.encodeWeights(this.getNamedWeights(e))];case 1:return i=c.sent(),!1,null,a=this.toJSON(null,!1),o={modelTopology:a,format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v1.4.0",convertedBy:null},null!=e&&e.includeOptimizer&&null!=this.optimizer?(o.trainingConfig=this.getTrainingConfig(),s="optimizer",d=(h=r.pb).encodeWeights,[4,this.optimizer.getWeights()]):[3,4];case 2:return[4,d.apply(h,[c.sent(),s])];case 3:u=c.sent(),l=u.data,p=u.specs,(m=i.specs).push.apply(m,p),i.data=r.pb.concatenateArrayBuffers([i.data,l]),c.label=4;case 4:return null!=this.userDefinedMetadata&&(!0,Je(this.userDefinedMetadata,this.name,!0),o.userDefinedMetadata=this.userDefinedMetadata),o.weightData=i.data,o.weightSpecs=i.specs,[2,t.save(o)]}}))}))},e.prototype.setUserDefinedMetadata=function(t){Je(t,this.name),this.userDefinedMetadata=t},e.prototype.getUserDefinedMetadata=function(){return this.userDefinedMetadata},e.className="Model",e}(hn);function Mn(t,e,n){return u(this,void 0,void 0,(function(){var i,a,o,s,u,l,p,h,d;return c(this,(function(c){switch(c.label){case 0:if(null==n&&(n={}),null==t.load)throw new f("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,t.load()];case 1:if(i=c.sent(),null!=(a=i.modelTopology).model_config&&(a=a.model_config),o=null==n.strict||n.strict,s=null!=i.weightData&&null!=i.weightSpecs&&o,u=ke(rn(a),e,s),null!=(l=i.trainingConfig)&&u.loadTrainingConfig(l),null!=i.userDefinedMetadata&&u.setUserDefinedMetadata(i.userDefinedMetadata),null==i.weightData)return[3,4];if(null==i.weightSpecs)throw new f("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");return p=function(t,e){var n=r.pb.decodeWeights(t,e),i={},a=[];return e.forEach((function(t){"optimizer"===t.group?a.push({name:t.name,tensor:n[t.name]}):i[t.name]=n[t.name]})),{modelWeights:i,optimizerWeights:a}}(i.weightData,i.weightSpecs),h=p.modelWeights,d=p.optimizerWeights,u.loadWeights(h,o),null!=u.optimizer&&d.length>0?[4,u.optimizer.setWeights(d)]:[3,3];case 2:c.sent(),c.label=3;case 3:Object(r.R)(h),Object(r.R)(d.map((function(t){return t.tensor}))),c.label=4;case 4:return[2,u]}}))}))}r.rc.registerClass(Fn);var zn=function(t){function e(e){var n=t.call(this,{inputs:[],outputs:[]})||this;if(e=e||{},n.trainable=!0,n.built=!1,n.name=null!=e.name?e.name:Jt("sequential_"),null!=e.layers)for(var r=0,i=e.layers;r<i.length;r++){var a=i[r];n.add(a)}return n}return a(e,t),e.prototype.checkShape=function(t){if(t.inboundNodes[0].outputTensors[0].shape.some((function(t){return t<0})))throw new f("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")},e.prototype.add=function(t){var n,r=t instanceof e||t instanceof Fn;if(r){if(1!==(n=t).outputs.length)throw new f("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new f("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new f("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var i=ge({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(i)}if(r)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new f("A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer "+t.name+" which has "+t.inboundNodes.length+" pre-existing inbound connections.");if(1!==t.inboundNodes[0].outputTensors.length)throw new f("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];var i=n.inboundNodes[r];if(0===i.inboundLayers.length)return i.inputTensors;for(var a=[],o=0;o<i.inboundLayers.length;o++)for(var s=0,u=t(i.inputTensors[o],i.inboundLayers[o],i.nodeIndices[o]);s<u.length;s++){var c=u[s];-1===a.indexOf(c)&&a.push(c)}return a}(this.outputs[0])}this.inboundNodes=[],new le({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:g(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((function(t){return t.shape})),outputShapes:this.outputs[0].shape})}else{var a=t.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1},e.prototype.pop=function(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{var t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}},e.prototype.call=function(t,e){return null==this.model&&this.build(),this.model.call(t,e)},e.prototype.build=function(t){if(ee(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Fn({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0},e.prototype.countParams=function(){return this.built||this.build(),t.prototype.countParams.call(this)},e.prototype.summary=function(e,n,r){void 0===r&&(r=console.log),this.built||this.build(),t.prototype.summary.call(this,e,n,r)},e.prototype.setWeights=function(t){null==this.model&&this.build(),this.model.setWeights(t)},e.prototype.evaluate=function(t,e,n){if(void 0===n&&(n={}),!this.built)throw new h("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)},e.prototype.evaluateDataset=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){if(!this.built)throw new h("The model needs to be compiled before being used.");return[2,this.model.evaluateDataset(t,e)]}))}))},e.prototype.predict=function(t,e){return void 0===e&&(e={}),null==this.model&&this.build(),this.model.predict(t,e)},e.prototype.predictOnBatch=function(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)},e.prototype.compile=function(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames},Object.defineProperty(e.prototype,"optimizer",{get:function(){return null==this.model?void 0:this.model.optimizer},set:function(t){this.model.optimizer=t},enumerable:!0,configurable:!0}),e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),u(this,void 0,void 0,(function(){return c(this,(function(r){if(!this.built)throw new h("The model needs to be compiled before being used.");return[2,this.model.fit(t,e,n)]}))}))},e.prototype.fitDataset=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){if(!this.built)throw new h("The model needs to be compiled before being used.");return[2,this.model.fitDataset(t,e)]}))}))},e.prototype.trainOnBatch=function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,this.model.trainOnBatch(t,e)]}))}))},e.fromConfig=function(t,n,i,a){var o;void 0===i&&(i={}),void 0===a&&(a=!1);var s={};if(n instanceof Array){if(null==n[0].className||"Merge"===n[0].className)throw new f("Legacy serialization format not supported yet.");o=n}else r.cd.assert(null!=n.layers,(function(){return"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."})),o=n.layers,delete n.layers,s=n;var u=new t(s);if(!(u instanceof e))throw new d("Sequential.fromConfig called on non-Sequential input: "+u);for(var c=0,l=o;c<l.length;c++){var p=ke(l[c],void 0,a);a&&p.setFastWeightInitDuringBuild(!0),u.add(p)}return u},Object.defineProperty(e.prototype,"stopTraining",{get:function(){if(null==this.model)throw new f("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining},set:function(t){if(null==this.model)throw new f("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e],i={};i.className=r.getClassName(),i.config=r.getConfig(),t.push(i)}return{name:this.name,layers:t}},e.className="Sequential",e}(Fn);function Ln(t,e){return null==e&&(e={}),function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(i){if(null==e&&(e={}),"string"==typeof t){if(0===(n=r.pb.getLoadHandlers(t,e.onProgress)).length)n.push(r.pb.browserHTTPRequest(t,e));else if(n.length>1)throw new f("Found more than one ("+n.length+") load handlers for URL '"+t+"'");t=n[0]}return[2,Mn(t,void 0,e)]}))}))}(t,e)}r.rc.registerClass(zn);var Bn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.getConfig=function(){return{}},e}(r.rc.Serializable),Pn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=1),function(t,e){if(void 0===e&&(e=1),1!==e)throw new d("Support for alpha values other than 1 ("+e+") is not implemented yet.");return Object(r.V)(t)}(t,e)},e.className="elu",e}(Bn);r.rc.registerClass(Pn);var jn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.pc)(t)},e.className="selu",e}(Bn);r.rc.registerClass(jn);var Vn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.hc)(t)},e.className="relu",e}(Bn);r.rc.registerClass(Vn);var Wn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.Vc)((function(){return Object(r.Mb)(6,Object(r.hc)(t))}))},e.className="relu6",e}(Bn);r.rc.registerClass(Wn);var Un=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return t},e.className="linear",e}(Bn);r.rc.registerClass(Un);var Gn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.tc)(t)},e.className="sigmoid",e}(Bn);r.rc.registerClass(Gn);var qn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return function(t){return Object(r.Vc)((function(){var e=Object(r.f)(.5,Object(r.Pb)(.2,t));return Object(r.B)(e,0,1)}))}(t)},e.className="hardSigmoid",e}(Bn);r.rc.registerClass(qn);var Hn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.Dc)(t)},e.className="softplus",e}(Bn);r.rc.registerClass(Hn);var Kn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return function(t){return Object(r.Vc)((function(){return Object(r.S)(t,Object(r.c)(t).add(1))}))}(t)},e.className="softsign",e}(Bn);r.rc.registerClass(Kn);var Xn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t){return Object(r.Qc)(t)},e.className="tanh",e}(Bn);r.rc.registerClass(Xn);var Yn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=-1),Object(r.Cc)(t,e)},e.className="softmax",e}(Bn);r.rc.registerClass(Yn);var $n=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=-1),Object(r.Ab)(t,e)},e.className="logSoftmax",e}(Bn);function Jn(t){return t.getClassName()}function Zn(t,e){return void 0===e&&(e={}),E(t,r.rc.SerializationMap.getMap().classNameMap,e,"activation")}function Qn(t){var e;return null==t?Zn(e={className:"linear",config:{}}):"string"==typeof t?((e={}).className=t,e.config={},Zn(e)):t instanceof Bn?t:Zn(t)}function tr(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}r.rc.registerClass($n);var er=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e}(r.rc.Serializable),nr=function(t){function e(e){var n=t.call(this)||this;return tr(e),n.l1=null==e||null==e.l1?.01:e.l1,n.l2=null==e||null==e.l2?.01:e.l2,n.hasL1=0!==n.l1,n.hasL2=0!==n.l2,n}return a(e,t),e.prototype.apply=function(t){var e=this;return Object(r.Vc)((function(){var n=Object(r.hd)([1]);return e.hasL1&&(n=Object(r.f)(n,Object(r.Oc)(Object(r.Pb)(e.l1,Object(r.c)(t))))),e.hasL2&&(n=Object(r.f)(n,Object(r.Oc)(Object(r.Pb)(e.l2,wt(t))))),n.asScalar()}))},e.prototype.getConfig=function(){return{l1:this.l1,l2:this.l2}},e.fromConfig=function(t,e){return new t({l1:e.l1,l2:e.l2})},e.className="L1L2",e}(er);r.rc.registerClass(nr);var rr={l1l2:"L1L2"};function ir(t){return S(t)}function ar(t,e){return void 0===e&&(e={}),E(t,r.rc.SerializationMap.getMap().classNameMap,e,"regularizer")}function or(t){return null==t?null:"string"==typeof t?ar({className:t in rr?rr[t]:t,config:{}}):t instanceof er?t:ar(t)}var sr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.supportsMasking=!0,null!=e&&(n.maxValue=e.maxValue),n}return a(e,t),e.prototype.call=function(t,e){t=te(t);var n=Object(r.hc)(t);return null!=this.maxValue&&(n=Object(r.B)(n,0,this.maxValue)),n},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={maxValue:this.maxValue},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ReLU",e}(he);r.rc.registerClass(sr);var ur=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_ALPHA=.3,null==e&&(e={}),n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return a(e,t),e.prototype.call=function(t,e){var n=te(t);return Object(r.sb)(n,this.alpha)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LeakyReLU",e}(he);r.rc.registerClass(ur);var cr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;if(n.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),n.supportsMasking=!0,n.alphaInitializer=Kt(e.alphaInitializer||n.DEFAULT_ALPHA_INITIALIZER),n.alphaRegularizer=or(e.alphaRegularizer),n.alphaConstraint=W(e.alphaConstraint),null==e.sharedAxes)n.sharedAxes=null;else if(Array.isArray(e.sharedAxes))n.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new f("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);n.sharedAxes=[e.sharedAxes]}return n}return a(e,t),e.prototype.build=function(t){var e=(t=ee(t)).slice(1);if(null!=this.sharedAxes)for(var n=0,r=this.sharedAxes;n<r.length;n++)e[(a=r[n])-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);var i={};if(null!=this.sharedAxes)for(var a=1;a<t.length;++a)i[a]=t[a];this.inputSpec=[new se({ndim:t.length,axes:i})],this.built=!0},e.prototype.call=function(t,e){return t=te(t),Object(r.ac)(t,this.alpha.read())},e.prototype.getConfig=function(){var e={alphaInitializer:Ht(this.alphaInitializer),alphaRegularizer:ir(this.alphaRegularizer),alphaConstraint:j(this.alphaConstraint),sharedAxes:this.sharedAxes},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="PReLU",e}(he);r.rc.registerClass(cr);var lr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;if(n.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==n.DEFAULT_ALPHA)throw new d("Non-default alpha value ("+e.alpha+") is not supported by the ELU layer yet.");return n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return a(e,t),e.prototype.call=function(t,e){var n=te(t);return Object(r.V)(n)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ELU",e}(he);r.rc.registerClass(lr);var pr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_THETA=1,null==e&&(e={}),n.theta=null==e.theta?n.DEFAULT_THETA:e.theta,n}return a(e,t),e.prototype.call=function(t,e){var n=te(t);return n.mul(lt(n.greater(this.theta),"float32"))},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={theta:this.theta},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ThresholdedReLU",e}(he);r.rc.registerClass(pr);var hr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_AXIS=1,null==e&&(e={}),n.softmax=(new Yn).apply,n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n}return a(e,t),e.prototype.call=function(t,e){var n=te(t);return this.softmax(n,this.axis)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={axis:this.axis},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Softmax",e}(he);function fr(t,e,n){if("number"==typeof t)return g(t,e);if(t.length!==e)throw new f("The "+n+" argument must be an integer or tuple of "+e+" integers. Received: "+t.length+" elements.");for(var r=0;r<e;++r){var i=t[r];if(!it(i))throw new f("The "+n+" argument must be an integer or tuple of "+e+" integers. Received: "+JSON.stringify(t)+" including a non-integer number "+i)}return t}function dr(t,e,n,r,i){return void 0===i&&(i=1),null==t?t:(a="same"===n?t:t-(e+(e-1)*(i-1))+1,Math.floor((a+r-1)/r));var a}function mr(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+ut([n-e,0]);else{if("same"!==r)throw new f("Unsupport padding mode: "+r+".");t*=e}return t}function gr(t,e){return Object(r.Vc)((function(){return X(e),"channelsFirst"===e?Object(r.Zc)(t,[0,2,3,1]):t}))}function vr(t,e){return Object(r.Vc)((function(){return X(e),"channelsFirst"===e?Object(r.Zc)(t,[0,2,3,4,1]):t}))}function yr(t,e,n,i,a,o,s,u){return void 0===i&&(i=[1,1]),void 0===a&&(a="valid"),void 0===u&&(u=null),Object(r.Vc)((function(){if(null==o&&(o="channelsLast"),X(o),3!==t.rank&&4!==t.rank)throw new f("conv2dWithBiasActivation expects input to be of rank 3 or 4, but received "+t.rank+".");if(3!==e.rank&&4!==e.rank)throw new f("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received "+t.rank+".");var c=gr(t,o);if("causal"===a)throw new d("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return c=r.hb.conv2d({x:c,filter:e,strides:i,pad:"same"===a?"same":"valid",dilations:s,dataFormat:"NHWC",bias:n,activation:u}),"channelsFirst"===o&&(c=Object(r.Zc)(c,[0,3,1,2])),c}))}r.rc.registerClass(hr);var br=function(t){function e(n,r){var i=t.call(this,r)||this;if(i.bias=null,i.DEFAULT_KERNEL_INITIALIZER="glorotNormal",i.DEFAULT_BIAS_INITIALIZER="zeros",e.verifyArgs(r),i.rank=n,T(i.rank,"rank"),1!==i.rank&&2!==i.rank&&3!==i.rank)throw new d("Convolution layer for rank other than 1, 2, or 3 ("+i.rank+") is not implemented yet.");if(i.kernelSize=fr(r.kernelSize,n,"kernelSize"),i.strides=fr(null==r.strides?1:r.strides,n,"strides"),i.padding=null==r.padding?"valid":r.padding,Y(i.padding),i.dataFormat=null==r.dataFormat?"channelsLast":r.dataFormat,X(i.dataFormat),i.activation=Qn(r.activation),i.useBias=null==r.useBias||r.useBias,i.biasInitializer=Kt(r.biasInitializer||i.DEFAULT_BIAS_INITIALIZER),i.biasConstraint=W(r.biasConstraint),i.biasRegularizer=or(r.biasRegularizer),i.activityRegularizer=or(r.activityRegularizer),i.dilationRate=fr(null==r.dilationRate?1:r.dilationRate,n,"dilationRate"),1===i.rank&&Array.isArray(i.dilationRate)&&1!==i.dilationRate.length)throw new f("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(i.dilationRate));if(2===i.rank){if("number"==typeof i.dilationRate)i.dilationRate=[i.dilationRate,i.dilationRate];else if(2!==i.dilationRate.length)throw new f("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(i.dilationRate))}else if(3===i.rank)if("number"==typeof i.dilationRate)i.dilationRate=[i.dilationRate,i.dilationRate,i.dilationRate];else if(3!==i.dilationRate.length)throw new f("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(i.dilationRate));return i}return a(e,t),e.verifyArgs=function(t){if(v("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!R(t.kernelSize,"number",1,3))throw new f("BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received "+JSON.stringify(t.kernelSize)+".")},e.prototype.getConfig=function(){var e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Jn(this.activation),useBias:this.useBias,biasInitializer:Ht(this.biasInitializer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),biasConstraint:j(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(he),xr=function(t){function e(n,r){var i=t.call(this,n,r)||this;return i.kernel=null,e.verifyArgs(r),i.filters=r.filters,T(i.filters,"filters"),i.kernelInitializer=Kt(r.kernelInitializer||i.DEFAULT_KERNEL_INITIALIZER),i.kernelConstraint=W(r.kernelConstraint),i.kernelRegularizer=or(r.kernelRegularizer),i}return a(e,t),e.prototype.build=function(t){var e;t=ee(t);var n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new f("The channel dimension of the input should be defined. Found "+t[n]);var r=t[n],i=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:(e={},e[n]=r,e)}],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e;t=te(t);var i=null==n.bias?null:n.bias.read(),a=D(n.activation.getClassName());if(null!=a&&2===n.rank)e=yr(t,n.kernel.read(),i,n.strides,n.padding,n.dataFormat,n.dilationRate,a);else{if(1===n.rank)e=function(t,e,n,i,a,o,s){return void 0===i&&(i=1),void 0===a&&(a="valid"),void 0===s&&(s=1),Object(r.Vc)((function(){if(null==o&&(o="channelsLast"),X(o),3!==t.shape.length)throw new f("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new f("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new f("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===o&&(t=Object(r.Zc)(t,[0,2,1])),"causal"===a)throw new d("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var u=Object(r.I)(t,e,i,"same"===a?"same":"valid","NWC",s);return null!=n&&(u=Nt(u,n)),u}))}(t,n.kernel.read(),i,n.strides[0],n.padding,n.dataFormat,n.dilationRate[0]);else if(2===n.rank)e=yr(t,n.kernel.read(),i,n.strides,n.padding,n.dataFormat,n.dilationRate);else{if(3!==n.rank)throw new d("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,i,a,o,s){return void 0===i&&(i=[1,1,1]),void 0===a&&(a="valid"),Object(r.Vc)((function(){if(null==o&&(o="channelsLast"),X(o),4!==t.rank&&5!==t.rank)throw new f("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new f("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");var u=vr(t,o);if("causal"===a)throw new d("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return u=Object(r.L)(u,e,i,"same"===a?"same":"valid","NDHWC",s),null!=n&&(u=Nt(u,n)),"channelsFirst"===o&&(u=Object(r.Zc)(u,[0,4,1,2,3])),u}))}(t,n.kernel.read(),i,n.strides,n.padding,n.dataFormat,n.dilationRate)}null!=n.activation&&(e=n.activation.apply(e))}return e}))},e.prototype.computeOutputShape=function(t){t=ee(t);for(var e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2),r=0;r<n.length;++r){var i=dr(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);e.push(i)}var a=[t[0]];return"channelsLast"===this.dataFormat?(a=a.concat(e)).push(this.filters):(a.push(this.filters),a=a.concat(e)),a},e.prototype.getConfig=function(){var e={filters:this.filters,kernelInitializer:Ht(this.kernelInitializer),kernelRegularizer:ir(this.kernelRegularizer),kernelConstraint:j(this.kernelConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.verifyArgs=function(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new f("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))},e}(br),wr=function(t){function e(n){var r=t.call(this,2,n)||this;return e.verifyArgs(n),r}return a(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,e},e.verifyArgs=function(t){if("number"!=typeof t.kernelSize&&!R(t.kernelSize,"number",1,2))throw new f("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received "+JSON.stringify(t.kernelSize)+".")},e.className="Conv2D",e}(xr);r.rc.registerClass(wr);var Cr=function(t){function e(n){var r=t.call(this,3,n)||this;return e.verifyArgs(n),r}return a(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,e},e.verifyArgs=function(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new f("Conv3D expects config.kernelSize to be number or [number, number, number], but received "+JSON.stringify(t.kernelSize)+".")},e.className="Conv3D",e}(xr);r.rc.registerClass(Cr);var Nr=function(t){function e(e){var n=t.call(this,e)||this;if(n.inputSpec=[new se({ndim:4})],"same"!==n.padding&&"valid"!==n.padding)throw new f("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+n.padding);return n}return a(e,t),e.prototype.build=function(t){var e;if(4!==(t=ee(t)).length)throw new f("Input should have rank 4; Received input shape: "+JSON.stringify(t));var n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new f("The channel dimension of the inputs should be defined. Found `None`.");var r=t[n],i=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",i,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new se({ndim:4,axes:(e={},e[n]=r,e)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e=te(t);if(4!==e.shape.length)throw new f("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);var i,a,o=e.shape,s=o[0];"channelsFirst"===n.dataFormat?(i=2,a=3):(i=1,a=2);var u=o[i],c=o[a],l=n.kernelSize[0],p=n.kernelSize[1],h=n.strides[0],d=n.strides[1],m=[s,mr(u,h,l,n.padding),mr(c,d,p,n.padding),n.filters];"channelsLast"!==n.dataFormat&&(e=Object(r.Zc)(e,[0,2,3,1]));var g=Object(r.K)(e,n.kernel.read(),m,n.strides,n.padding);return"channelsLast"!==n.dataFormat&&(g=Object(r.Zc)(g,[0,3,1,2])),null!=n.bias&&(g=Nt(g,n.bias.read(),n.dataFormat)),null!=n.activation&&(g=n.activation.apply(g)),g}))},e.prototype.computeOutputShape=function(t){var e,n,r,i=(t=ee(t)).slice();"channelsFirst"===this.dataFormat?(e=1,n=2,r=3):(e=3,n=1,r=2);var a=this.kernelSize[0],o=this.kernelSize[1],s=this.strides[0],u=this.strides[1];return i[e]=this.filters,i[n]=mr(i[n],s,a,this.padding),i[r]=mr(i[r],u,o,this.padding),i},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.dilationRate,e},e.className="Conv2DTranspose",e}(wr);r.rc.registerClass(Nr);var Sr=function(t){function e(e){return t.call(this,2,e)||this}return a(e,t),e.className="SeparableConv2D",e}(function(t){function e(e,n){var r=t.call(this,e,n)||this;if(r.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",r.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",r.depthwiseKernel=null,r.pointwiseKernel=null,null==n.filters)throw new f("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=n.kernelInitializer||null!=n.kernelRegularizer||null!=n.kernelConstraint)throw new f("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=n.padding&&"same"!==n.padding&&"valid"!==n.padding)throw new f("SeparableConv"+r.rank+"D supports only padding modes: 'same' and 'valid', but received "+JSON.stringify(n.padding));return r.depthMultiplier=null==n.depthMultiplier?1:n.depthMultiplier,r.depthwiseInitializer=Kt(n.depthwiseInitializer||r.DEFAULT_DEPTHWISE_INITIALIZER),r.depthwiseRegularizer=or(n.depthwiseRegularizer),r.depthwiseConstraint=W(n.depthwiseConstraint),r.pointwiseInitializer=Kt(n.depthwiseInitializer||r.DEFAULT_POINTWISE_INITIALIZER),r.pointwiseRegularizer=or(n.pointwiseRegularizer),r.pointwiseConstraint=W(n.pointwiseConstraint),r}return a(e,t),e.prototype.build=function(t){var e;if((t=ee(t)).length<this.rank+2)throw new f("Inputs to SeparableConv"+this.rank+"D should have rank "+(this.rank+2)+", but received input shape: "+JSON.stringify(t));var n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n]||t[n]<0)throw new f("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[n]));for(var r=t[n],i=this.kernelSize.concat([r,this.depthMultiplier]),a=[],o=0;o<this.rank;++o)a.push(1);a.push(r*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",i,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new se({ndim:this.rank+2,axes:(e={},e[n]=r,e)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e;if(t=te(t),1===n.rank)throw new d("1D separable convolution is not implemented yet.");return 2===n.rank&&("channelsFirst"===n.dataFormat&&(t=Object(r.Zc)(t,[0,2,3,1])),e=Object(r.qc)(t,n.depthwiseKernel.read(),n.pointwiseKernel.read(),n.strides,n.padding,n.dilationRate,"NHWC")),n.useBias&&(e=Nt(e,n.bias.read(),n.dataFormat)),null!=n.activation&&(e=n.activation.apply(e)),"channelsFirst"===n.dataFormat&&(e=Object(r.Zc)(e,[0,3,1,2])),e}))},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Ht(this.depthwiseInitializer),e.pointwiseInitializer=Ht(this.pointwiseInitializer),e.depthwiseRegularizer=ir(this.depthwiseRegularizer),e.pointwiseRegularizer=ir(this.pointwiseRegularizer),e.depthwiseConstraint=j(this.depthwiseConstraint),e.pointwiseConstraint=j(this.pointwiseConstraint),e},e.className="SeparableConv",e}(xr));r.rc.registerClass(Sr);var Er=function(t){function e(n){var r=t.call(this,1,n)||this;return e.verifyArgs(n),r.inputSpec=[{ndim:3}],r}return a(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.dataFormat,e},e.verifyArgs=function(t){if("number"!=typeof t.kernelSize&&!R(t.kernelSize,"number",1,1))throw new f("Conv1D expects config.kernelSize to be number or number[] with length 1, but received "+JSON.stringify(t.kernelSize)+".")},e.className="Conv1D",e}(xr);r.rc.registerClass(Er);var Or=function(t){function e(e){var n=t.call(this,e)||this;return"number"==typeof e.cropping?n.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?n.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:n.cropping=e.cropping,n.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,n.inputSpec=[{ndim:4}],n}return a(e,t),e.prototype.computeOutputShape=function(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return t=te(t),"channelsLast"===n.dataFormat?dt(dt(t,n.cropping[0][0],t.shape[1]-n.cropping[0][0]-n.cropping[0][1],2),n.cropping[1][0],t.shape[2]-n.cropping[1][1]-n.cropping[1][0],3):dt(dt(t,n.cropping[0][0],t.shape[2]-n.cropping[0][0]-n.cropping[0][1],3),n.cropping[1][0],t.shape[3]-n.cropping[1][1]-n.cropping[1][0],4)}))},e.prototype.getConfig=function(){var e={cropping:this.cropping,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Cropping2D",e}(he);r.rc.registerClass(Or);var Ir=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_SIZE=[2,2],n.inputSpec=[{ndim:4}],n.size=null==e.size?n.DEFAULT_SIZE:e.size,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,n}return a(e,t),e.prototype.computeOutputShape=function(t){if("channelsFirst"===this.dataFormat){var e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}return e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2],[t[0],e,n,t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e=te(t),i=e.shape;if("channelsFirst"===n.dataFormat){e=Object(r.Zc)(e,[0,2,3,1]);var a=n.size[0]*i[2],o=n.size[1]*i[3],s=e.resizeNearestNeighbor([a,o]);return Object(r.Zc)(s,[0,3,1,2])}return a=n.size[0]*i[1],o=n.size[1]*i[2],e.resizeNearestNeighbor([a,o])}))},e.prototype.getConfig=function(){var e={size:this.size,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="UpSampling2D",e}(he);r.rc.registerClass(Ir);var kr=function(t){function e(e){var n=t.call(this,2,e)||this;return n.depthwiseKernel=null,n.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,n.depthwiseInitializer=Kt(e.depthwiseInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.depthwiseConstraint=W(e.depthwiseConstraint),n.depthwiseRegularizer=or(e.depthwiseRegularizer),n}return a(e,t),e.prototype.build=function(t){if((t=ee(t)).length<4)throw new f("Inputs to DepthwiseConv2D should have rank 4. Received input shape: "+JSON.stringify(t)+".");var e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new f("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not ("+t[e]+").");var n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e=function(t,e,n,i,a,o){return void 0===n&&(n=[1,1]),void 0===i&&(i="valid"),Object(r.Vc)((function(){null==a&&(a="channelsLast"),X(a);var s=gr(t,a);if(4!==t.rank)throw new f("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new f("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return s=Object(r.Q)(s,e,n,"same"===i?"same":"valid","NHWC",o),"channelsFirst"===a&&(s=Object(r.Zc)(s,[0,3,1,2])),s}))}(t=te(t),n.depthwiseKernel.read(),n.strides,n.padding,n.dataFormat,null);return n.useBias&&(e=Nt(e,n.bias.read(),n.dataFormat)),null!=n.activation&&(e=n.activation.apply(e)),e}))},e.prototype.computeOutputShape=function(t){t=ee(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,i=dr(e,this.kernelSize[0],this.padding,this.strides[0]),a=dr(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,i,a]:[t[0],i,a,r]},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Ht(this.depthwiseInitializer),e.depthwiseRegularizer=ir(this.depthwiseRegularizer),e.depthwiseConstraint=j(this.depthwiseRegularizer),e},e.className="DepthwiseConv2D",e}(br);r.rc.registerClass(kr);var Ar=function(t){function e(e){var n=t.call(this,e)||this;return n.rate=Math.max(Math.min(e.rate,1),0),n.noiseShape=e.noiseShape,n.seed=e.seed,n.supportsMasking=!0,n}return a(e,t),e.prototype.getNoiseShape=function(t){if(null==this.noiseShape)return this.noiseShape;for(var e=t.shape,n=[],r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?e[r]:this.noiseShape[r]);return n},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);if(0<n.rate&&n.rate<1){var i=null!=e.training&&e.training,a=n.getNoiseShape(r);return Et((function(){return St(r,n.rate,a,n.seed)}),(function(){return r}),i)}return t}))},e.prototype.getConfig=function(){var e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.prototype.dispose=function(){return t.prototype.dispose.call(this)},e.className="Dropout",e}(he);r.rc.registerClass(Ar);var Rr=function(t){function e(e){var n=t.call(this,e)||this;return n.inputSpec=[{ndim:3}],n}return a(e,t),e.prototype.getNoiseShape=function(t){var e=t.shape;return[e[0],1,e[2]]},e.className="SpatialDropout1D",e}(Ar);r.rc.registerClass(Rr);var Tr=function(t){function e(e){var n=t.call(this,e)||this;if(n.activation=null,n.useBias=!0,n.kernel=null,n.bias=null,n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){var r=null;null!=e.batchSize&&(r=e.batchSize),n.batchInputShape=[r,e.inputDim]}return n.units=e.units,T(n.units,"units"),n.activation=Qn(e.activation),null!=e.useBias&&(n.useBias=e.useBias),n.kernelInitializer=Kt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.biasInitializer=Kt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelConstraint=W(e.kernelConstraint),n.biasConstraint=W(e.biasConstraint),n.kernelRegularizer=or(e.kernelRegularizer),n.biasRegularizer=or(e.biasRegularizer),n.activityRegularizer=or(e.activityRegularizer),n.supportsMasking=!0,n.inputSpec=[{minNDim:2}],n}return a(e,t),e.prototype.build=function(t){var e,n=(t=ee(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[n,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:(e={},e[-1]=n,e)}],this.built=!0},e.prototype.computeOutputShape=function(t){var e=(t=ee(t)).slice();return e[e.length-1]=this.units,e},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r,i=te(t),a=D(n.activation.getClassName());return null!=a?r=bt(i,n.kernel.read(),a,n.bias?n.bias.read():null):(r=bt(i,n.kernel.read()),null!=n.bias&&(r=Nt(r,n.bias.read())),null!=n.activation&&(r=n.activation.apply(r))),r}))},e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),biasInitializer:Ht(this.biasInitializer),kernelRegularizer:ir(this.kernelRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),biasConstraint:j(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dense",e}(he);r.rc.registerClass(Tr);var Dr=function(t){function e(e){var n=this;return e=e||{},(n=t.call(this,e)||this).inputSpec=[{minNDim:3}],n.dataFormat=e.dataFormat,n}return a(e,t),e.prototype.computeOutputShape=function(t){for(var e=0,n=(t=ee(t)).slice(1);e<n.length;e++)if(null==n[e])throw new f('The shape of the input to "Flatten" is not fully defined (got '+t.slice(1)+'). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');return[t[0],at(t,1)]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);if("channelsFirst"===n.dataFormat&&r.rank>1){for(var i=[0],a=2;a<r.rank;++a)i.push(a);i.push(1),r=r.transpose(i)}return function(t){if(t.rank<=1)throw new f("batchFlatten requires a minimum rank of 2. Got rank: "+t.rank+".");var e=[t.shape[0],at(t.shape,1)];return t.reshape(e)}(r)}))},e.prototype.getConfig=function(){var e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);var n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Flatten",e}(he);r.rc.registerClass(Dr);var _r=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.activation=Qn(e.activation),n}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);return n.activation.apply(r)}))},e.prototype.getConfig=function(){var e={activation:Jn(this.activation)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Activation",e}(he);r.rc.registerClass(_r);var Fr=function(t){function e(e){var n=t.call(this,e)||this;return n.n=e.n,n.inputSpec=[{ndim:2}],n}return a(e,t),e.prototype.computeOutputShape=function(t){return[t[0],this.n,t[1]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return function(t,e){return Object(r.Vc)((function(){if(2!==t.shape.length)throw new f("repeat() expects a rank-2 tensor, but received a rank-"+t.shape.length+" tensor.");return vt(pt(t,1),[1,e,1])}))}(t=te(t),n.n)}))},e.prototype.getConfig=function(){var e={n:this.n},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="RepeatVector",e}(he);r.rc.registerClass(Fr);var Mr=function(t){function e(e){var n=t.call(this,e)||this;n.targetShape=e.targetShape;for(var r=0;r<n.targetShape.length;++r)n.isUnknown(n.targetShape[r])&&(n.targetShape[r]=null);return n}return a(e,t),e.prototype.isUnknown=function(t){return t<0||null==t},e.prototype.fixUnknownDimension=function(t,e){for(var n="Total size of new array must be unchanged.",r=e.slice(),i=1,a=null,o=0;o<r.length;++o){var s=r[o];if(this.isUnknown(s)){if(null!==a)throw new f("Can only specifiy one unknown dimension.");a=o}else i*=s}var u=at(t);if(null!==a){if(0===i||u%i!=0)throw new f(n);r[a]=u/i}else if(u!==i)throw new f(n);return r},e.prototype.computeOutputShape=function(t){for(var e=!1,n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t),i=r.shape,a=i.slice(0,1).concat(n.fixUnknownDimension(i.slice(1),n.targetShape));return r.reshape(a)}))},e.prototype.getConfig=function(){var e={targetShape:this.targetShape},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Reshape",e}(he);r.rc.registerClass(Mr);var zr=function(t){function e(e){var n=t.call(this,e)||this;if(null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");var i=ct(1,e.dims.length+1);if(!r.cd.arraysEqual(e.dims.slice().sort(),i))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");return n.dims=e.dims,n.dimsIncludingBatch=[0].concat(n.dims),n.inputSpec=[new se({ndim:n.dims.length+1})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e=(t=ee(t)).slice();return this.dims.forEach((function(n,r){e[r+1]=t[n]})),e},e.prototype.call=function(t,e){return Object(r.Zc)(te(t),this.dimsIncludingBatch)},e.prototype.getConfig=function(){var e={dims:this.dims},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Permute",e}(he);r.rc.registerClass(zr);var Lr=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.supportsMasking=!0,n.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0,n}return a(e,t),e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this),n={maskValue:this.maskValue};return Object.assign(n,e),n},e.prototype.computeMask=function(t,e){var n=te(t);return Object(r.i)(Object(r.Ub)(n,this.maskValue),-1)},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var i=te(t),a=Object(r.i)(Object(r.Ub)(i,n.maskValue),-1,!0);return i.mul(a.asType(i.dtype))}))},e.className="Masking",e}(he);r.rc.registerClass(Lr);var Br=function(t){function e(e){var n=t.call(this,e)||this;if(n.embeddings=null,n.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){var r=null;null!=e.batchSize&&(r=e.batchSize),null==e.inputLength?n.batchInputShape=[r,null]:n.batchInputShape=[r].concat(x(e.inputLength))}return n.inputDim=e.inputDim,T(n.inputDim,"inputDim"),n.outputDim=e.outputDim,T(n.outputDim,"outputDim"),n.embeddingsInitializer=Kt(e.embeddingsInitializer||n.DEFAULT_EMBEDDINGS_INITIALIZER),n.embeddingsRegularizer=or(e.embeddingsRegularizer),n.activityRegularizer=or(e.activityRegularizer),n.embeddingsConstraint=W(e.embeddingsConstraint),n.maskZero=e.maskZero,n.supportsMasking=e.maskZero,n.inputLength=e.inputLength,n}return a(e,t),e.prototype.build=function(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0},e.prototype.warnOnIncompatibleInputShape=function(t){},e.prototype.computeMask=function(t,e){var n=this;return Object(r.Vc)((function(){return n.maskZero?(t=te(t),Object(r.Ub)(t,Object(r.id)(t))):null}))},e.prototype.computeOutputShape=function(t){if(t=ee(t),null==this.inputLength)return t.concat([this.outputDim]);var e=x(this.inputLength);if(e.length!==t.length-1)throw new f('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);for(var n=0,r=0;r<e.length;++r){var i=e[r],a=t[r+1];if(null!=i&&null!=a&&i!==a)throw new f('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);null==i&&(e[n]=a),n++}return[t[0]].concat(e,[this.outputDim])},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);return"int32"!==r.dtype&&(r=lt(r,"int32")),xt(n.embeddings.read(),r.as1D()).reshape(ee(n.computeOutputShape(r.shape)))}))},e.prototype.getConfig=function(){var e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Ht(this.embeddingsInitializer),embeddingsRegularizer:ir(this.embeddingsRegularizer),activityRegularizer:ir(this.activityRegularizer),embeddingsConstraint:j(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Embedding",e}(he);r.rc.registerClass(Br);var Pr=function(t){function e(e){var n=t.call(this,e||{})||this;return n.supportsMasking=!0,n}return a(e,t),e.prototype.mergeFunction=function(t){throw new d},e.prototype.computeElementwiseOpOutputShape=function(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;for(var n=t.slice(0,t.length-e.length),r=0;r<e.length;++r){var i=t[t.length-e.length+r],a=e[r];if(null==i||null==a||i<0||a<0)n.push(null);else if(1===i)n.push(a);else if(1===a)n.push(i);else{if(i!==a)throw new f("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(i)}}return n},e.prototype.build=function(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[ee(t)]),(t=t).length<2)throw new f("A merge layer should be called on an Array of at least 2 inputs. Got "+t.length+" input(s).");for(var e=[],n=0,r=t;n<r.length;n++)null!=(o=r[n])&&null!==o[0]&&e.push(o[0]);if((e=I(e)).length>1)throw new f("Can not merge tensors with different batch sizes. Got tensors with shapes: "+JSON.stringify(t)+".");for(var i=null==t[0]?null:t[0].slice(1),a=1;a<t.length;++a){var o=null==t[a]?null:t[a].slice(1);i=this.computeElementwiseOpOutputShape(i,o)}var s=t.map((function(t){return t.length}));-1===t.indexOf(null)&&1===I(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){if(t=t,n.reshapeRequired){var e=[],i=t.map((function(t){return t.rank}));if(-1===i.indexOf(null)){for(var a=ut(i),o=0,s=t;o<s.length;o++){for(var u=(f=s[o]).rank,c=0;c<a-u;++c)f=pt(f,1);e.push(f)}return n.mergeFunction(e)}for(var l=!1,p=0,h=t;p<h.length;p++){var f;if(null==(u=(f=h[p]).rank)){var d=f.shape,m=d[0],g=d.slice(1).concat([m]),v=f.reshape([m].concat(at(d.slice(1))));v=(v=Object(r.Zc)(v,[1,0])).reshape(g),e.push(v),l=!0}else if(u>1){var y=ct(1,u).concat([0]);e.push(Object(r.Zc)(f,y)),l=!0}else e.push(f)}var b=n.mergeFunction(e),x=b.rank;if(l)if(null==x){var w=b.shape;g=[m=w[w.length-1]].concat(w.slice(0,w.length-1)),b=Object(r.Zc)(b.reshape([-1,m]),[1,0]).reshape(g)}else x>1&&(y=[x-1].concat(ct(0,x-1)),b=Object(r.Zc)(b,y));return b}return n.mergeFunction(t)}))},e.prototype.computeOutputShape=function(t){var e;e=null==(t=t)[0]?null:t[0].slice(1);for(var n=1;n<t.length;++n){var r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}for(var i=[],a=0,o=t;a<o.length;a++)null!=(r=o[a])&&null!==r[0]&&i.push(r[0]);return 1===(i=I(i)).length?i.concat(e):[null].concat(e)},e.prototype.computeMask=function(t,e){return Object(r.Vc)((function(){if(null==e)return null;if(!Array.isArray(e))throw new f("`mask` should be an Array");if(!Array.isArray(t))throw new f("`inputs` should be an Array");if(e.length!==t.length)throw new f("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths ("+t.length+" vs "+e.length+")");if(e.every((function(t){return null==t})))return null;for(var n=(e=e.map((function(t){return null==t?t:Object(r.ab)(t,0)})))[0],i=1;i<e.length-1;++i)n=Object(r.Bb)(n,e[i]);return n}))},e}(he),jr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.Vc)((function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.f)(e,t[n]);return e}))},e.className="Add",e}(Pr);r.rc.registerClass(jr);var Vr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.Vc)((function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.Pb)(e,t[n]);return e}))},e.className="Multiply",e}(Pr);r.rc.registerClass(Vr);var Wr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.Vc)((function(){for(var e=t[0].clone(),n=1;n<t.length;++n)e=Object(r.f)(e,t[n]);return Object(r.Pb)(1/t.length,e)}))},e.className="Average",e}(Pr);r.rc.registerClass(Wr);var Ur=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.Vc)((function(){for(var e=t[0],n=1;n<t.length;++n)e=Object(r.Ib)(e,t[n]);return e}))},e.className="Maximum",e}(Pr);r.rc.registerClass(Ur);var Gr=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.mergeFunction=function(t){return Object(r.Vc)((function(){for(var e=t[0],n=1;n<t.length;++n)e=Object(r.Mb)(e,t[n]);return e}))},e.className="Minimum",e}(Pr);r.rc.registerClass(Gr);var qr=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_AXIS=-1,null==e&&(e={}),n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n.supportsMasking=!0,n.reshapeRequired=!1,n}return a(e,t),e.prototype.build=function(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new f("A `Concatenate` layer should be called on a list of at least 2 inputs");for(var e=!0,n=0,i=t=t;n<i.length;n++)if(null!=(p=i[n])){e=!1;break}if(!e){for(var a=[],o=0;o<t.length;++o){var s=t[o].slice();s.splice(this.axis,1);for(var u=!1,c=0,l=a;c<l.length;c++){var p=l[c];if(r.cd.arraysEqual(p,s)){u=!0;break}}u||a.push(s)}if(a.length>1)throw new f("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}},e.prototype.mergeFunction=function(t){var e=this;return Object(r.Vc)((function(){return mt(t,e.axis)}))},e.prototype.computeOutputShape=function(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new f("A `Concatenate` layer should be called on a list of inputs.");for(var e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis,i=0,a=e.slice(1);i<a.length;i++){var o=a[i];if(null==n[r]||null==o[r]){n[r]=null;break}n[r]+=o[r]}return n},e.prototype.computeMask=function(t,e){var n=this;if(null==e)return null;if(!Array.isArray(e))throw new f("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new f("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new f("Mismatch in the length of mask ("+e.length+") and the legnth of inputs ("+t.length+")");return Object(r.Vc)((function(){var i=!0;if(e.forEach((function(t){null==t||(i=!1)})),i)return null;for(var a=[],o=0;o<t.length;++o)null==e[o]?a.push(Object(r.Xb)(t[o]).asType("bool")):e[o].rank<t[o].rank?a.push(Object(r.ab)(e[o],-1)):a.push(e[o]);var s=Object(r.D)(a,n.axis);return Object(r.h)(s,-1,!1)}))},e.prototype.getConfig=function(){var e={axis:this.axis},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Concatenate",e}(Pr);function Hr(t,e){for(;t<0;)t+=e;return t}r.rc.registerClass(qr);var Kr=function(t){function e(e){var n=t.call(this,e)||this;return n.axes=e.axes,n.normalize=null!=e.normalize&&e.normalize,n.supportsMasking=!0,n.reshapeRequired=!1,n}return a(e,t),e.prototype.build=function(t){r.cd.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(function(){return"A `Dot` layer should be called on a list of exactly 2 inputs."}));var e=t[0],n=t[1];if(e.length>3||n.length>3)throw new d("Dot layer does not support tensors of 4D or higher rank yet.");var i=this.interpretAxes(e,n);if(e[i[0]]!==n[i[1]])throw new f("Dimension incompatibility: "+e[i[0]]+" !== "+n[i[1]])},e.prototype.mergeFunction=function(t){if(2!==t.length)throw new f("A `Dot` layer must be called on exactly 2 inputs, but received "+t.length+" input(s).");var e,n=t[0],i=t[1];return e=Array.isArray(this.axes)?this.axes.map((function(e,n){return Hr(e,t[n].shape.length)})):[Hr(this.axes,n.shape.length),Hr(this.axes,i.shape.length)],this.normalize&&(n=Ae(n,e[0]),i=Ae(i,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new d("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.cd.assert(t.shape.length>=2,(function(){return"batchDot requires the rank of x to be >= 2, but got "+t.shape.length})),r.cd.assert(t.shape.length>=2,(function(){return"batchDot requires the rank of y to be >= 2, but got "+e.shape.length})),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new d("batchDot is not implemented for complex64-type Tensors yet.");var i=t.shape.length,a=e.shape.length;null==n&&(n=[i-1,a-2]);var o=n;return Object(r.Vc)((function(){var n,r;if(i>a){n=i-a;for(var s=[],u=0;u<n;++u)s.push(1);e=e.reshape(e.shape.concat(s))}else if(a>i){for(n=a-i,s=[],u=0;u<n;++u)s.push(1);t=t.reshape(t.shape.concat(s))}else n=0;if(2===t.shape.length&&2===e.shape.length)r=o[0]===o[1]?t.mulStrict(e).sum(o[0]):t.transpose([1,0]).mulStrict(e).sum(o[1]);else{var c=o[0]!==t.shape.length-1,l=o[1]===e.shape.length-1;r=t.matMul(e,c,l)}if(n>0){var p,h=[];for(u=p=i>a?i+a-3:i-1;u<p+n;++u)h.push(u);r=r.squeeze(h)}return 1===r.shape.length&&(r=r.expandDims(1)),r}))}(n,i,e)},e.prototype.interpretAxes=function(t,e){return Array.isArray(this.axes)?this.axes:[Hr(this.axes,t.length),Hr(this.axes,e.length)]},e.prototype.computeOutputShape=function(t){r.cd.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(function(){return"A `Dot` layer should be called on a list of exactly 2 inputs."}));var e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new d("Dot layer does not support tensors of 4D or higher rank yet.");var i=this.interpretAxes(e,n);e.splice(i[0],1),n.splice(i[1],1),n.splice(0,1);var a=e.concat(n);return 1===a.length&&a.push(1),a},e.prototype.computeMask=function(t,e){return null},e.prototype.getConfig=function(){var e={axes:this.axes,normalize:this.normalize},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dot",e}(Pr);r.rc.registerClass(Kr);var Xr=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.stddev=e.stddev,n}return a(e,t),e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this),n={stddev:this.stddev};return Object.assign(n,e),n},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);return Et((function(){return yt(r.shape,0,n.stddev).add(r)}),(function(){return r}),e.training||!1)}))},e.className="GaussianNoise",e}(he);r.rc.registerClass(Xr);var Yr=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.rate=e.rate,n}return a(e,t),e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this),n={rate:this.rate};return Object.assign(n,e),n},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e);var r=te(t);return n.rate>0&&n.rate<1?Et((function(){var t=Math.sqrt(n.rate/(1-n.rate));return r.mul(yt(r.shape,1,t))}),(function(){return r}),e.training||!1):r}))},e.className="GaussianDropout",e}(he);r.rc.registerClass(Yr);var $r=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.rate=e.rate,n.noiseShape=e.noiseShape,n}return a(e,t),e.prototype._getNoiseShape=function(t){return this.noiseShape||te(t).shape},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this),n={rate:this.rate};return Object.assign(n,e),n},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){if(n.rate<1&&n.rate>0){var i=n._getNoiseShape(t);return Et((function(){var e=te(t),a=-1.7580993408473766,o=Object(r.lb)(Object(r.dc)(i),n.rate);o=lt(o,"float32");var s=Math.pow((1-n.rate)*(1+n.rate*Math.pow(a,2)),-.5),u=-s*a*n.rate;return e.mul(o).add(o.add(-1).mul(a)).mul(s).add(u)}),(function(){return te(t)}),e.training||!1)}return t}))},e.className="AlphaDropout",e}(he);function Jr(t,e,n,i,a,o){var s;if(void 0===o&&(o=.001),2===t.rank)s=Object(r.u)(t,e,n,i,a,o);else if(3===t.rank)s=Object(r.v)(t,e,n,i,a,o);else{if(4!==t.rank)throw new d("batchNormalization is not implemented for array of rank "+t.rank+" yet");s=Object(r.w)(t,e,n,i,a,o)}return s}function Zr(t,e,n,i,a){return void 0===a&&(a=.001),r.cd.arraysEqual(i.slice().sort(),ct(0,t.rank-1))?function(t,e,n,i,a){return void 0===a&&(a=.001),Object(r.Vc)((function(){var o=Object(r.Ob)(t,i),s=o.mean,u=o.variance;return[Jr(t,s,u,n,e,a),s,u]}))}(t,e,n,i,a):function(t,e,n,i,a){return void 0===a&&(a=.001),Object(r.Vc)((function(){for(var o=Object(r.Ob)(t,i),s=o.mean,u=o.variance,c=[],l=0,p=ct(0,t.rank);l<p.length;l++){var h=p[l];-1!==i.indexOf(h)?c.push(1):c.push(t.shape[h])}var f=s.reshape(c),d=u.reshape(c),m=null==e?null:e.reshape(c),g=null==n?null:n.reshape(c);return[Jr(t,f,d,g,m,a),s,u]}))}(t,e,n,i,a)}r.rc.registerClass($r);var Qr=function(t){function e(e){var n=this;return null==e&&(e={}),(n=t.call(this,e)||this).supportsMasking=!0,n.axis=null==e.axis?-1:e.axis,n.momentum=null==e.momentum?.99:e.momentum,n.epsilon=null==e.epsilon?.001:e.epsilon,n.center=null==e.center||e.center,n.scale=null==e.scale||e.scale,n.betaInitializer=Kt(e.betaInitializer||"zeros"),n.gammaInitializer=Kt(e.gammaInitializer||"ones"),n.movingMeanInitializer=Kt(e.movingMeanInitializer||"zeros"),n.movingVarianceInitializer=Kt(e.movingVarianceInitializer||"ones"),n.betaConstraint=W(e.betaConstraint),n.gammaConstraint=W(e.gammaConstraint),n.betaRegularizer=or(e.betaRegularizer),n.gammaRegularizer=or(e.gammaRegularizer),n}return a(e,t),e.prototype.build=function(t){var e;t=ee(t);var n=this.axis>=0?this.axis:this.axis+t.length,r=t[n];if(null==r)throw new f("Axis "+n+" of input tensor should have a defined dimension but the layer received an input with shape "+JSON.stringify(t)+".");this.inputSpec=[new se({ndim:t.length,axes:(e={},e[n]=r,e)})];var i=[r];this.scale&&(this.gamma=this.addWeight("gamma",i,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",i,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",i,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",i,null,this.movingVarianceInitializer,null,!1),this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var i=null!=e.training&&e.training,a=te(t),o=a.shape,s=o.length,u=ct(0,s),c=n.axis>=0?n.axis:n.axis+s;u.splice(c,1);var l=g(1,s);l[c]=o[c];var p=u.slice();p.sort();var h=!r.cd.arraysEqual(p,ct(0,s).slice(0,s-1));if(!i)return function(){if(h){var t=n.movingMean.read().reshape(l),e=n.movingVariance.read().reshape(l),r=n.center?n.beta.read().reshape(l):null,i=n.scale?n.gamma.read().reshape(l):null;return Jr(a,t,e,r,i,n.epsilon)}return Jr(a,n.movingMean.read(),n.movingVariance.read(),null==n.beta?null:n.beta.read(),null==n.gamma?null:n.gamma.read(),n.epsilon)}();var f=Zr(a,n.gamma.read(),n.beta.read(),u,n.epsilon),d=f[0],m=f[1],v=f[2],y=function(t,e,n){Object(r.Vc)((function(){var r=1-n,i=t.read(),a=i.sub(e).mul(r);t.write(i.sub(a))}))};return y(n.movingMean,m,n.momentum),y(n.movingVariance,v,n.momentum),d}))},e.prototype.getConfig=function(){var e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ht(this.betaInitializer),gammaInitializer:Ht(this.gammaInitializer),movingMeanInitializer:Ht(this.movingMeanInitializer),movingVarianceInitializer:Ht(this.movingVarianceInitializer),betaRegularizer:ir(this.betaRegularizer),gammaRegularizer:ir(this.gammaRegularizer),betaConstraint:j(this.betaConstraint),gammaConstraint:j(this.gammaConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="BatchNormalization",e}(he);r.rc.registerClass(Qr);var ti=function(t){function e(e){var n=this;if(null==e&&(e={}),(n=t.call(this,e)||this).axis=null==e.axis?-1:e.axis,"number"==typeof n.axis){if(!Number.isInteger(n.axis))throw new Error("Expected axis to be an integer, but received "+n.axis)}else{if(!Array.isArray(n.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(n.axis));for(var r=0,i=n.axis;r<i.length;r++){var a=i[r];if(!Number.isInteger(a))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(n.axis))}}return n.epsilon=null==e.epsilon?.001:e.epsilon,n.center=null==e.center||e.center,n.scale=null==e.scale||e.scale,n.betaInitializer=Kt(e.betaInitializer||"zeros"),n.gammaInitializer=Kt(e.gammaInitializer||"ones"),n.betaRegularizer=or(e.betaRegularizer),n.gammaRegularizer=or(e.gammaRegularizer),n.supportsMasking=!0,n}return a(e,t),e.prototype.build=function(t){var e=(t=ee(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(var n=0;n<this.axis.length;++n)this.axis[n]<0&&(this.axis[n]+=e);for(var r=0,i=this.axis;r<i.length;r++){var a=i[r];if(a<0||a>=e)throw new Error("Invalid axis: "+a)}if(this.axis.length!==I(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);var o=this.axis.map((function(e){return t[e]}));this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0},e.prototype.call=function(t,e){var n=this,i=te(t),a=i.shape,o=a.length;return Object(r.Vc)((function(){for(var t=Object(r.Ob)(i,n.axis,!0),e=t.mean,s=t.variance,u=g(1,o),c=0,l=n.axis;c<l.length;c++){var p=l[c];u[p]=a[p]}for(var h=function(t){return null!=t&&t.shape.length!==o&&n.axis!==[o-1]?t.reshape(u):t},f=h(n.gamma.read()),d=h(n.beta.read()),m=[],v=[],y=0;y<o;++y)-1!==n.axis.indexOf(y)?(m.push(a[y]),v.push(1)):(m.push(1),v.push(a[y]));return e=e.tile(m),s=s.tile(m),f=f.tile(v),d=d.tile(v),Jr(i,e,s,d,f,n.epsilon)}))},e.prototype.getConfig=function(){var e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ht(this.betaInitializer),gammaInitializer:Ht(this.gammaInitializer),betaRegularizer:ir(this.betaRegularizer),gammaRegularizer:ir(this.gammaRegularizer)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LayerNormalization",e}(he);r.rc.registerClass(ti);var ei=function(t){function e(e){var n=this;if(null==e&&(e={}),(n=t.call(this,e)||this).dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)n.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)n.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new f("ZeroPadding2D expects padding to be a length-2 array, but received a length-"+e.padding.length+" array.");var r=void 0,i=void 0;if("number"==typeof e.padding[0])r=[e.padding[0],e.padding[0]],i=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new f("ZeroPadding2D expects height padding to be a length-2 array, but received a length-"+e.padding[0].length+" array.");if(r=e.padding[0],2!==e.padding[1].length)throw new f("ZeroPadding2D expects width padding to be a length-2 array, but received a length-"+e.padding[1].length+" array.");i=e.padding[1]}n.padding=[r,i]}return n.inputSpec=[new se({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e,n;return t=ee(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return function(t,e,n){return Object(r.Vc)((function(){if(4!==t.rank)throw new f("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==e&&(e=[[1,1],[1,1]]),2!==e.length||2!==e[0].length||2!==e[1].length)throw new f("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new f("Unknown data format: "+n+". Supported data formats are 'channelsLast' and 'channelsFirst.");var i;return i="channelsFirst"===n?[[0,0],[0,0],e[0],e[1]]:[[0,0],e[0],e[1],[0,0]],Object(r.Yb)(t,i)}))}(te(t),n.padding,n.dataFormat)}))},e.prototype.getConfig=function(){var e={padding:this.padding,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ZeroPadding2D",e}(he);function ni(t,e,n,i,a,o){return Object(r.Vc)((function(){var s;X(a),$(o),Y(i),null==n&&(n=[1,1]),null==i&&(i="valid"),null==a&&(a="channelsLast"),null==o&&(o="max"),t=gr(t,a);var u="same"===i?"same":"valid";return s="max"===o?Object(r.Gb)(t,e,n,u):Object(r.q)(t,e,n,u),"channelsFirst"===a&&(s=Object(r.Zc)(s,[0,3,1,2])),s}))}function ri(t,e,n,i,a,o){return Object(r.Vc)((function(){var s;X(a),$(o),Y(i),null==n&&(n=[1,1,1]),null==i&&(i="valid"),null==a&&(a="channelsLast"),null==o&&(o="max"),t=vr(t,a);var u="same"===i?"same":"valid";return s="max"===o?Object(r.Hb)(t,e,n,u):Object(r.r)(t,e,n,u),"channelsFirst"===a&&(s=Object(r.Zc)(s,[0,4,1,2,3])),s}))}r.rc.registerClass(ei);var ii=function(t){function e(e){var n=this;if(null==e.poolSize&&(e.poolSize=2),n=t.call(this,e)||this,"number"==typeof e.poolSize)n.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new f("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));n.poolSize=e.poolSize}if(T(n.poolSize,"poolSize"),null==e.strides)n.strides=n.poolSize;else if("number"==typeof e.strides)n.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new f("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));n.strides=e.strides}return T(n.strides,"strides"),n.padding=null==e.padding?"valid":e.padding,Y(n.padding),n.inputSpec=[new se({ndim:3})],n}return a(e,t),e.prototype.computeOutputShape=function(t){var e=dr((t=ee(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){n.invokeCallHook(t,e),t=pt(te(t),2);var i=n.poolingFunction(te(t),[n.poolSize[0],1],[n.strides[0],1],n.padding,"channelsLast");return Object(r.Kc)(i,[2])}))},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(he),ai=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ni(t,e,n,r,i,"max")},e.className="MaxPooling1D",e}(ii);r.rc.registerClass(ai);var oi=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ni(t,e,n,r,i,"avg")},e.className="AveragePooling1D",e}(ii);r.rc.registerClass(oi);var si=function(t){function e(e){var n=this;if(null==e.poolSize&&(e.poolSize=[2,2]),(n=t.call(this,e)||this).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)n.strides=n.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new f("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");n.strides=e.strides}else n.strides=[e.strides,e.strides];return T(n.poolSize,"poolSize"),T(n.strides,"strides"),n.padding=null==e.padding?"valid":e.padding,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,X(n.dataFormat),Y(n.padding),n.inputSpec=[new se({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){t=ee(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=dr(e,this.poolSize[0],this.padding,this.strides[0]),n=dr(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return n.invokeCallHook(t,e),n.poolingFunction(te(t),n.poolSize,n.strides,n.padding,n.dataFormat)}))},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(he),ui=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ni(t,e,n,r,i,"max")},e.className="MaxPooling2D",e}(si);r.rc.registerClass(ui);var ci=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ni(t,e,n,r,i,"avg")},e.className="AveragePooling2D",e}(si);r.rc.registerClass(ci);var li=function(t){function e(e){var n=this;if(null==e.poolSize&&(e.poolSize=[2,2,2]),(n=t.call(this,e)||this).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)n.strides=n.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new f("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+e.strides.length+".");n.strides=e.strides}else n.strides=[e.strides,e.strides,e.strides];return T(n.poolSize,"poolSize"),T(n.strides,"strides"),n.padding=null==e.padding?"valid":e.padding,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,X(n.dataFormat),Y(n.padding),n.inputSpec=[new se({ndim:5})],n}return a(e,t),e.prototype.computeOutputShape=function(t){t=ee(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=dr(e,this.poolSize[0],this.padding,this.strides[0]),n=dr(n,this.poolSize[1],this.padding,this.strides[1]),r=dr(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return n.invokeCallHook(t,e),n.poolingFunction(te(t),n.poolSize,n.strides,n.padding,n.dataFormat)}))},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(he),pi=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ri(t,e,n,r,i,"max")},e.className="MaxPooling3D",e}(li);r.rc.registerClass(pi);var hi=function(t){function e(e){return t.call(this,e)||this}return a(e,t),e.prototype.poolingFunction=function(t,e,n,r,i){return X(i),Y(r),ri(t,e,n,r,i,"avg")},e.className="AveragePooling3D",e}(li);r.rc.registerClass(hi);var fi=function(t){function e(e){var n=t.call(this,e)||this;return n.inputSpec=[new se({ndim:3})],n}return a(e,t),e.prototype.computeOutputShape=function(t){return[t[0],t[2]]},e.prototype.call=function(t,e){throw new d},e}(he),di=function(t){function e(e){return t.call(this,e||{})||this}return a(e,t),e.prototype.call=function(t,e){return Object(r.Vc)((function(){var e=te(t);return Object(r.Jb)(e,1)}))},e.className="GlobalAveragePooling1D",e}(fi);r.rc.registerClass(di);var mi=function(t){function e(e){return t.call(this,e||{})||this}return a(e,t),e.prototype.call=function(t,e){return Object(r.Vc)((function(){var e=te(t);return Object(r.Fb)(e,1)}))},e.className="GlobalMaxPooling1D",e}(fi);r.rc.registerClass(mi);var gi=function(t){function e(e){var n=t.call(this,e)||this;return n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,X(n.dataFormat),n.inputSpec=[new se({ndim:4})],n}return a(e,t),e.prototype.computeOutputShape=function(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]},e.prototype.call=function(t,e){throw new d},e.prototype.getConfig=function(){var e={dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(he),vi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e=te(t);return"channelsLast"===n.dataFormat?Object(r.Jb)(e,[1,2]):Object(r.Jb)(e,[2,3])}))},e.className="GlobalAveragePooling2D",e}(gi);r.rc.registerClass(vi);var yi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var e=te(t);return"channelsLast"===n.dataFormat?Object(r.Fb)(e,[1,2]):Object(r.Fb)(e,[2,3])}))},e.className="GlobalMaxPooling2D",e}(gi);function bi(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new f("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function i(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=i(e),constants:n=i(n)}}function xi(t,e,n,i,a,o,s,u){return void 0===i&&(i=!1),void 0===s&&(s=!1),void 0===u&&(u=!1),Object(r.Vc)((function(){var c=e.shape.length;if(c<3)throw new f("Input should be at least 3D, but is "+c+"D.");var l=[1,0].concat(ct(2,c));if(e=Object(r.Zc)(e,l),null!=o)throw new d("The rnn() functoin of the deeplearn.js backend does not support constants yet.");s&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=a.asType("bool").asType("float32")).rank===c-1&&(a=Object(r.ab)(a,-1)),a=Object(r.Zc)(a,l)),i&&(e=Object(r.jc)(e,0),null!=a&&(a=Object(r.jc)(a,0)));var p,h,m=[],g=n,v=e.shape[0],y=Object(r.bd)(e);null!=a&&(h=Object(r.bd)(a));for(var b,x=function(e){var n=y[e],i=Object(r.Vc)((function(){return t(n,g)}));if(null==a)p=i[0],g=i[1];else{var o=Object(r.Vc)((function(){var t=h[e],n=Object(r.Xb)(t).sub(t);return{output:i[0].mul(t).addStrict(g[0].mul(n)),newStates:g.map((function(e,r){return i[1][r].mul(t).addStrict(e.mul(n))}))}}));p=o.output,g=o.newStates}u&&m.push(p)},w=0;w<v;++w)x(w);return u&&(b=Object(r.Lc)(m,1)),[p,b,g]}))}r.rc.registerClass(yi);var wi=function(t){function e(e){var n,r=t.call(this,e)||this;if(null==e.cell)throw new f("cell property is missing for the constructor of RNN.");if(null==(n=Array.isArray(e.cell)?new Ai({cells:e.cell}):e.cell).stateSize)throw new f("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell=n,r.returnSequences=null!=e.returnSequences&&e.returnSequences,r.returnState=null!=e.returnState&&e.returnState,r.goBackwards=null!=e.goBackwards&&e.goBackwards,r._stateful=null!=e.stateful&&e.stateful,r.unroll=null!=e.unroll&&e.unroll,r.supportsMasking=!0,r.inputSpec=[new se({ndim:3})],r.stateSpec=null,r.states_=null,r.numConstants=null,r.keptStates=[],r}return a(e,t),e.prototype.getStates=function(){return null==this.states_?ct(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((function(t){return null})):this.states_},e.prototype.setStates=function(t){this.states_=t},e.prototype.computeOutputShape=function(t){Zt(t)&&(t=t[0]),t=t;var e=this.cell.stateSize;Array.isArray(e)||(e=[e]);var n,r=e[0];if(n=this.returnSequences?[t[0],t[1],r]:[t[0],r],this.returnState){for(var i=[],a=0,o=e;a<o.length;a++){var s=o[a];i.push([t[0],s])}return[n].concat(i)}return n},e.prototype.computeMask=function(t,e){var n=this;return Object(r.Vc)((function(){Array.isArray(e)&&(e=e[0]);var t=n.returnSequences?e:null;if(n.returnState){var r=n.states.map((function(t){return null}));return[t].concat(r)}return t}))},Object.defineProperty(e.prototype,"states",{get:function(){if(null==this.states_){for(var t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[],n=0;n<t;++n)e.push(null);return e}return this.states_},set:function(t){this.states_=t},enumerable:!0,configurable:!0}),e.prototype.build=function(t){if(null!=this.numConstants)throw new d("Constants support is not implemented in RNN yet.");Zt(t)&&(t=t[0]),t=t;var e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new se({shape:[e,null,n]});var i,a=[t[0]].concat(t.slice(2));if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.cd.arraysEqual(this.stateSpec.map((function(t){return t.shape[t.shape.length-1]})),i))throw new f("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec="+this.stateSpec+"; However cell.stateSize is "+this.cell.stateSize)}else this.stateSpec=i.map((function(t){return new se({shape:[null,t]})}));this.stateful&&this.resetStates()},e.prototype.resetStates=function(t,e){var n=this;void 0===e&&(e=!1),Object(r.Vc)((function(){if(!n.stateful)throw new p("Cannot call resetStates() on an RNN Layer that is not stateful.");var i=n.inputSpec[0].shape[0];if(null==i)throw new f("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==n.states_)Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map((function(t){return Object(r.hd)([i,t])})):n.states_=[Object(r.hd)([i,n.cell.stateSize])];else if(null==t)Object(r.R)(n.states_),null!=n.keptStates&&(Object(r.R)(n.keptStates),n.keptStates=[]),Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map((function(t){return Object(r.hd)([i,t])})):n.states_[0]=Object(r.hd)([i,n.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==n.states_.length)throw new f("Layer "+n.name+" expects "+n.states_.length+" state(s), but it received "+t.length+" state value(s). Input received: "+t);!0===e?n.keptStates.push(n.states_.slice()):Object(r.R)(n.states_);for(var a=0;a<n.states_.length;++a){var o=t[a],s=Array.isArray(n.cell.stateSize)?n.cell.stateSize[a]:n.cell.stateSize,u=[i,s];if(!r.cd.arraysEqual(o.shape,u))throw new f("State "+a+" is incompatible with layer "+n.name+": expected shape="+u+", received shape="+o.shape);n.states_[a]=o}}n.states_=n.states_.map((function(t){return Object(r.rb)(t.clone())}))}))},e.prototype.apply=function(e,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=bi(e,r,i,this.numConstants);e=a.inputs,r=a.initialState,i=a.constants;var o=[],s=[];if(null!=r){n.initialState=r,o=o.concat(r),this.stateSpec=[];for(var u=0,c=r;u<c.length;u++){var l=c[u];this.stateSpec.push(new se({shape:l.shape}))}s=s.concat(this.stateSpec)}if(null!=i&&(n.constants=i,o=o.concat(i),this.numConstants=i.length),o[0]instanceof ue){var p=[e].concat(o),h=this.inputSpec.concat(s),f=this.inputSpec;this.inputSpec=h;var d=t.prototype.apply.call(this,p,n);return this.inputSpec=f,d}return t.prototype.apply.call(this,e,n)},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var r=null==e?null:e.mask,i=null==e?null:e.training,a=null==e?null:e.initialState;t=te(t),null==a&&(a=n.stateful?n.states_:n.getInitialState(t));var o=Array.isArray(n.cell.stateSize)?n.cell.stateSize.length:1;if(a.length!==o)throw new f("RNN Layer has "+o+" state(s) but was passed "+a.length+" initial state(s).");n.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var s={training:i},u=xi((function(t,e){var r=n.cell.call([t].concat(e),s);return[r[0],r.slice(1)]}),t,a,n.goBackwards,r,null,n.unroll,n.returnSequences),c=u[0],l=u[1],p=u[2];n.stateful&&n.resetStates(p,i);var h=n.returnSequences?l:c;return n.returnState?[h].concat(p):h}))},e.prototype.getInitialState=function(t){var e=this;return Object(r.Vc)((function(){var n=Object(r.hd)(t.shape);return n=pt(n=Object(r.Oc)(n,[1,2])),Array.isArray(e.cell.stateSize)?e.cell.stateSize.map((function(t){return t>1?vt(n,[1,t]):n})):e.cell.stateSize>1?[vt(n,[1,e.cell.stateSize])]:[n]}))},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable?this.cell.trainableWeights:[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights},enumerable:!0,configurable:!0}),e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)},e.prototype.getConfig=function(){var e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);var n=this.cell.getConfig();e.cell={className:this.cell.getClassName(),config:n};var r=t.prototype.getConfig.call(this);return Object.assign(e,r),e},e.fromConfig=function(t,e,n){void 0===n&&(n={});var r=ke(e.cell,n);return new t(Object.assign(e,{cell:r}))},e.className="RNN",e}(he);r.rc.registerClass(wi);var Ci=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e}(he),Ni=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,T(n.units,"units"),n.activation=Qn(null==e.activation?n.DEFAULT_ACTIVATION:e.activation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Kt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Kt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Kt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=or(e.kernelRegularizer),n.recurrentRegularizer=or(e.recurrentRegularizer),n.biasRegularizer=or(e.biasRegularizer),n.kernelConstraint=W(e.kernelConstraint),n.recurrentConstraint=W(e.recurrentConstraint),n.biasConstraint=W(e.biasConstraint),n.dropout=st([1,ut([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=st([1,ut([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){t=ee(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){if(2!==(t=t).length)throw new f("SimpleRNNCell expects 2 input Tensors, got "+t.length+".");var i=t[1];t=t[0];var a,o=null!=e.training&&e.training;0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Ri((function(){return Object(r.Xb)(t)}),n.dropout,o)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Ri((function(){return Object(r.Xb)(i)}),n.recurrentDropout,o));var s=n.dropoutMask,u=n.recurrentDropoutMask;a=bt(null!=s?Object(r.Pb)(t,s):t,n.kernel.read()),null!=n.bias&&(a=Nt(a,n.bias.read())),null!=u&&(i=Object(r.Pb)(i,u));var c=Object(r.f)(a,bt(i,n.recurrentKernel.read()));return null!=n.activation&&(c=n.activation.apply(c)),[c,c]}))},e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="SimpleRNNCell",e}(Ci);r.rc.registerClass(Ni);var Si=function(t){function e(e){return e.cell=new Ni(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.Vc)((function(){null!=i.cell.dropoutMask&&(Object(r.R)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.R)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})}))},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return new t(e)},e.className="SimpleRNN",e}(wi);r.rc.registerClass(Si);var Ei=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,T(n.units,"units"),n.activation=Qn(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=Qn(void 0===e.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Kt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Kt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Kt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=or(e.kernelRegularizer),n.recurrentRegularizer=or(e.recurrentRegularizer),n.biasRegularizer=or(e.biasRegularizer),n.kernelConstraint=W(e.kernelConstraint),n.recurrentConstraint=W(e.recurrentConstraint),n.biasConstraint=W(e.biasConstraint),n.dropout=st([1,ut([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=st([1,ut([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){var e=(t=ee(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){if(2!==(t=t).length)throw new f("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");var i=null!=e.training&&e.training,a=t[1];t=t[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Ri((function(){return Object(r.Xb)(t)}),n.dropout,i,3)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Ri((function(){return Object(r.Xb)(a)}),n.recurrentDropout,i,3));var o,s,u,c=n.dropoutMask,l=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(t=Object(r.Pb)(t,c[0]));var p=bt(t,n.kernel.read());n.useBias&&(p=Nt(p,n.bias.read())),0<n.recurrentDropout&&n.recurrentDropout<1&&(a=Object(r.Pb)(a,l[0]));var h=n.recurrentKernel.read(),d=Object(r.Gc)(h,[2*n.units,n.units],h.rank-1),m=d[0],g=d[1],v=bt(a,m),y=Object(r.Gc)(p,3,p.rank-1),b=y[0],x=y[1],w=y[2],C=Object(r.Gc)(v,2,v.rank-1),N=C[0],S=C[1];o=n.recurrentActivation.apply(Object(r.f)(b,N)),s=n.recurrentActivation.apply(Object(r.f)(x,S));var E=bt(Object(r.Pb)(s,a),g);u=n.activation.apply(Object(r.f)(w,E));var O=Object(r.f)(Object(r.Pb)(o,a),Object(r.Pb)(Object(r.f)(1,Object(r.Sb)(o)),u));return[O,O]}))},e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),recurrentActivation:Jn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="GRUCell",e}(Ci);r.rc.registerClass(Ei);var Oi=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Ei(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.Vc)((function(){null!=i.cell.dropoutMask&&(Object(r.R)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.R)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})}))},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),recurrentActivation:Jn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="GRU",e}(wi);r.rc.registerClass(Oi);var Ii=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,T(n.units,"units"),n.activation=Qn(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=Qn(void 0===e.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Kt(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Kt(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Kt(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.unitForgetBias=e.unitForgetBias,n.kernelRegularizer=or(e.kernelRegularizer),n.recurrentRegularizer=or(e.recurrentRegularizer),n.biasRegularizer=or(e.biasRegularizer),n.kernelConstraint=W(e.kernelConstraint),n.recurrentConstraint=W(e.recurrentConstraint),n.biasConstraint=W(e.biasConstraint),n.dropout=st([1,ut([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=st([1,ut([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=[n.units,n.units],n.dropoutMask=null,n.recurrentDropoutMask=null,n}return a(e,t),e.prototype.build=function(t){var e,n,r=(t=ee(t))[t.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){var i=this.biasInitializer,o=this.units;n=new((e=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.apply=function(t,e){var n=i.apply([o]),r=(new Rt).apply([o]),a=i.apply([2*o]);return gt(gt(n,r),a)},e}(kt)).className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var i=null!=e.training&&e.training;if(3!==(t=t).length)throw new f("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");var a=t[1],o=t[2];t=t[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=Ri((function(){return Object(r.Xb)(t)}),n.dropout,i,4)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=Ri((function(){return Object(r.Xb)(a)}),n.recurrentDropout,i,4));var s,u,c,l,p=n.dropoutMask,h=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(t=Object(r.Pb)(t,p[0]));var d=bt(t,n.kernel.read());0<n.recurrentDropout&&n.recurrentDropout<1&&(a=Object(r.Pb)(a,h[0])),d=Object(r.f)(d,bt(a,n.recurrentKernel.read())),n.useBias&&(d=Nt(d,n.bias.read()));var m=Object(r.Gc)(d,4,d.rank-1),g=m[0],v=m[1],y=m[2],b=m[3];s=n.recurrentActivation.apply(g),u=n.recurrentActivation.apply(v),c=Object(r.f)(Object(r.Pb)(u,o),Object(r.Pb)(s,n.activation.apply(y))),l=n.recurrentActivation.apply(b);var x=Object(r.Pb)(l,n.activation.apply(c));return[x,x,c]}))},e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),recurrentActivation:Jn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LSTMCell",e}(Ci);r.rc.registerClass(Ii);var ki=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Ii(e),t.call(this,e)||this}return a(e,t),e.prototype.call=function(e,n){var i=this;return Object(r.Vc)((function(){null!=i.cell.dropoutMask&&(Object(r.R)(i.cell.dropoutMask),i.cell.dropoutMask=null),null!=i.cell.recurrentDropoutMask&&(Object(r.R)(i.cell.recurrentDropoutMask),i.cell.recurrentDropoutMask=null);var a=null==n?null:n.mask,o=null==n?null:n.training,s=null==n?null:n.initialState;return t.prototype.call.call(i,e,{mask:a,training:o,initialState:s})}))},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"unitForgetBias",{get:function(){return this.cell.unitForgetBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Jn(this.activation),recurrentActivation:Jn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ht(this.kernelInitializer),recurrentInitializer:Ht(this.recurrentInitializer),biasInitializer:Ht(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ir(this.kernelRegularizer),recurrentRegularizer:ir(this.recurrentRegularizer),biasRegularizer:ir(this.biasRegularizer),activityRegularizer:ir(this.activityRegularizer),kernelConstraint:j(this.kernelConstraint),recurrentConstraint:j(this.recurrentConstraint),biasConstraint:j(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="LSTM",e}(wi);r.rc.registerClass(ki);var Ai=function(t){function e(e){var n=t.call(this,e)||this;return n.cells=e.cells,n}return a(e,t),Object.defineProperty(e.prototype,"stateSize",{get:function(){for(var t=[],e=0,n=this.cells.slice().reverse();e<n.length;e++){var r=n[e];Array.isArray(r.stateSize)?t.push.apply(t,r.stateSize):t.push(r.stateSize)}return t},enumerable:!0,configurable:!0}),e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){for(var r=(t=t).slice(1),i=[],a=0,o=n.cells.slice().reverse();a<o.length;a++){var s=o[a];Array.isArray(s.stateSize)?i.push(r.splice(0,s.stateSize.length)):i.push(r.splice(0,1))}i.reverse();for(var u,c=[],l=0;l<n.cells.length;++l)s=n.cells[l],r=i[l],u=0===l?[t[0]].concat(r):[u[0]].concat(r),u=s.call(u,e),c.push(u.slice(1));r=[];for(var p=0,h=c.slice().reverse();p<h.length;p++){var f=h[p];r.push.apply(r,f)}return[u[0]].concat(r)}))},e.prototype.build=function(t){var e;Zt(t)&&(t=t[0]),t=t,this.cells.forEach((function(n,r){Q("RNNCell_"+r,(function(){n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0},e.prototype.getConfig=function(){for(var e=[],n=0,r=this.cells;n<r.length;n++){var i=r[n];e.push({className:i.getClassName(),config:i.getConfig()})}var a={cells:e},o=t.prototype.getConfig.call(this);return Object.assign(a,o),a},e.fromConfig=function(t,e,n){void 0===n&&(n={});for(var r=[],i=0,a=e.cells;i<a.length;i++){var o=a[i];r.push(ke(o,n))}return new t({cells:r})},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(!this.trainable)return[];for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var i=[],a=0,o=this.cells;a<o.length;a++)r=o[a],i.push.apply(i,r.trainableWeights);return i.concat(t)}return t},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.weights)}return ae(t)},e.prototype.setWeights=function(t){for(var e=[],n=0,r=this.cells;n<r.length;n++)for(var i=r[n],a=i.weights.length,o=t.splice(a),s=0;s<i.weights.length;++s)e.push([i.weights[s],o[s]]);oe(e)},e.className="StackedRNNCells",e}(Ci);function Ri(t,e,n,i){function a(){return St(t(),e)}if(void 0===n&&(n=null),void 0===i&&(i=1),i>1){for(var o=[],s=0;s<i;s++)o.push(Et(a,t,n));return o.map((function(t){return Object(r.rb)(t.clone())}))}return Object(r.rb)(Et(a,t,n).clone())}r.rc.registerClass(Ai);var Ti=function(t){function e(e){var n=t.call(this,e)||this;return n.layer=e.layer,n}return a(e,t),e.prototype.build=function(t){this.built=!0},Object.defineProperty(e.prototype,"trainable",{get:function(){return null!=this.layer&&this.layer.trainable},set:function(t){null!=this.layer&&(this.layer.trainable=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.layer.trainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.layer.nonTrainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"updates",{get:function(){return this.layer._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this.layer.losses},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.layer.getWeights()},e.prototype.setWeights=function(t){this.layer.setWeights(t)},e.prototype.getConfig=function(){var e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)},e.fromConfig=function(t,e,n){void 0===n&&(n={});var r=ke(e.layer,n);delete e.layer;var i={layer:r};return Object.assign(i,e),new t(i)},e}(he),Di=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n}return a(e,t),e.prototype.build=function(e){if((e=ee(e)).length<3)throw new f("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];var n=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(n),this.layer.built=!0),t.prototype.build.call(this,e)},e.prototype.computeOutputShape=function(t){var e=[(t=ee(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){return xi((function(t,r){return[te(n.layer.call(t,e)),[]]}),t=te(t),[],!1,null,null,!1,!0)[1]}))},e.className="TimeDistributed",e}(Ti);r.rc.registerClass(Di);var _i="concat",Fi=function(t){function e(e){var n=t.call(this,e)||this,r=e.layer.getConfig(),i={};i.className=e.layer.getClassName(),i.config=r,n.forwardLayer=ke(i),r.goBackwards=!0!==r.goBackwards;var a={};if(a.className=e.layer.getClassName(),a.config=r,n.backwardLayer=ke(a),n.forwardLayer.name="forward_"+n.forwardLayer.name,n.backwardLayer.name="backward_"+n.backwardLayer.name,n.mergeMode=void 0===e.mergeMode?_i:e.mergeMode,function(t){A(H,"BidirectionalMergeMode",t)}(n.mergeMode),e.weights)throw new d("weights support is not implemented for Bidirectional layer yet.");return n._stateful=e.layer.stateful,n.returnSequences=e.layer.returnSequences,n.returnState=e.layer.returnState,n.supportsMasking=!0,n._trainable=!0,n.inputSpec=e.layer.inputSpec,n.numConstants=null,n}return a(e,t),Object.defineProperty(e.prototype,"trainable",{get:function(){return this._trainable},set:function(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())},e.prototype.setWeights=function(t){var e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))},e.prototype.computeOutputShape=function(t){var e,n,r,i=this.forwardLayer.computeOutputShape(t);return Array.isArray(i)&&Array.isArray(i[0])||(i=[i]),i=i,this.returnState?(r=i.slice(1),e=i[0]):e=i[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):b(n)},e.prototype.apply=function(e,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=bi(e,r,i,this.numConstants);if(e=a.inputs,r=a.initialState,i=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==i)return t.prototype.apply.call(this,e,n);var o=[],s=[];if(null!=r){var u=r.length;if(u%2>0)throw new f("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");n.initialState=r,o.push.apply(o,r);var c=r.map((function(t){return new se({shape:t.shape})}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),s.push.apply(s,c)}if(null!=i)throw new d("Support for constants in Bidirectional layers is not implemented yet.");for(var l=o[0]instanceof ue,p=0,h=o;p<h.length;p++)if(h[p]instanceof ue!==l)throw new f("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){var m=[e].concat(o),g=this.inputSpec.concat(s),v=this.inputSpec;this.inputSpec=g;var y=t.prototype.apply.call(this,m,n);return this.inputSpec=v,y}return t.prototype.apply.call(this,e,n)},e.prototype.call=function(t,e){var n=this;return Object(r.Vc)((function(){var i,a,o,s,u=e.initialState;if(null==u)i=n.forwardLayer.call(t,e),a=n.backwardLayer.call(t,e);else{var c=u.slice(0,u.length/2),l=u.slice(u.length/2);i=n.forwardLayer.call(t,Object.assign(e,{initialState:c})),a=n.backwardLayer.call(t,Object.assign(e,{initialState:l}))}return n.returnState&&(Array.isArray(i)&&(o=i.slice(1).concat(a.slice(1))),i=i[0],a=a[0]),n.returnSequences&&(a=Object(r.jc)(a,1)),"concat"===n.mergeMode?s=mt([i,a]):"sum"===n.mergeMode?s=Object(r.f)(i,a):"ave"===n.mergeMode?s=Object(r.Pb)(.5,Object(r.f)(i,a)):"mul"===n.mergeMode?s=Object(r.Pb)(i,a):null==n.mergeMode&&(s=[i,a]),n.returnState?null==n.mergeMode?s.concat(o):[s].concat(o):s}))},e.prototype.resetStates=function(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()},e.prototype.build=function(t){var e=this;Q(this.forwardLayer.name,(function(){e.forwardLayer.build(t)})),Q(this.backwardLayer.name,(function(){e.backwardLayer.build(t)})),this.built=!0},e.prototype.computeMask=function(t,e){var n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){var r=this.forwardLayer.states.map((function(t){return null}));return Array.isArray(n)?n.concat(r).concat(r):[n].concat(r).concat(r)}return n},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.prototype.setFastWeightInitDuringBuild=function(e){t.prototype.setFastWeightInitDuringBuild.call(this,e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)},e.prototype.getConfig=function(){var e={mergeMode:this.mergeMode},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.fromConfig=function(t,e){var n=ke(e.layer);if(delete e.layer,null!=e.numConstants)throw new d("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");var r=e;return r.layer=n,new t(r)},e.className="Bidirectional",e}(Ti);function Mi(t){return new oi(t)}function zi(t){return new ci(t)}function Li(t){return new hi(t)}function Bi(t){return new mi(t)}function Pi(t){return new yi(t)}function ji(t){return new ai(t)}function Vi(t){return new ui(t)}r.rc.registerClass(Fi);var Wi=Bi,Ui=Pi,Gi=ji,qi=Vi;Object.freeze({inputLayer:function(t){return new me(t)},elu:function(t){return new lr(t)},reLU:function(t){return new sr(t)},leakyReLU:function(t){return new ur(t)},prelu:function(t){return new cr(t)},softmax:function(t){return new hr(t)},thresholdedReLU:function(t){return new pr(t)},conv1d:function(t){return new Er(t)},conv2d:function(t){return new wr(t)},conv2dTranspose:function(t){return new Nr(t)},conv3d:function(t){return new Cr(t)},separableConv2d:function(t){return new Sr(t)},cropping2D:function(t){return new Or(t)},upSampling2d:function(t){return new Ir(t)},depthwiseConv2d:function(t){return new kr(t)},activation:function(t){return new _r(t)},dense:function(t){return new Tr(t)},dropout:function(t){return new Ar(t)},spatialDropout1d:function(t){return new Rr(t)},flatten:function(t){return new Dr(t)},repeatVector:function(t){return new Fr(t)},reshape:function(t){return new Mr(t)},permute:function(t){return new zr(t)},embedding:function(t){return new Br(t)},add:function(t){return new jr(t)},average:function(t){return new Wr(t)},concatenate:function(t){return new qr(t)},maximum:function(t){return new Ur(t)},minimum:function(t){return new Gr(t)},multiply:function(t){return new Vr(t)},dot:function(t){return new Kr(t)},batchNormalization:function(t){return new Qr(t)},layerNormalization:function(t){return new ti(t)},zeroPadding2d:function(t){return new ei(t)},averagePooling1d:Mi,avgPool1d:function(t){return Mi(t)},avgPooling1d:function(t){return Mi(t)},averagePooling2d:zi,avgPool2d:function(t){return zi(t)},avgPooling2d:function(t){return zi(t)},averagePooling3d:Li,avgPool3d:function(t){return Li(t)},avgPooling3d:function(t){return Li(t)},globalAveragePooling1d:function(t){return new di(t)},globalAveragePooling2d:function(t){return new vi(t)},globalMaxPooling1d:Bi,globalMaxPooling2d:Pi,maxPooling1d:ji,maxPooling2d:Vi,maxPooling3d:function(t){return new pi(t)},gru:function(t){return new Oi(t)},gruCell:function(t){return new Ei(t)},lstm:function(t){return new ki(t)},lstmCell:function(t){return new Ii(t)},simpleRNN:function(t){return new Si(t)},simpleRNNCell:function(t){return new Ni(t)},rnn:function(t){return new wi(t)},stackedRNNCells:function(t){return new Ai(t)},bidirectional:function(t){return new Fi(t)},timeDistributed:function(t){return new Di(t)},globalMaxPool1d:Wi,globalMaxPool2d:Ui,maxPool1d:Gi,maxPool2d:qi,Layer:he,RNN:wi,RNNCell:Ci,input:function(t){return ge(t)},gaussianNoise:function(t){return new Xr(t)},gaussianDropout:function(t){return new Yr(t)},alphaDropout:function(t){return new $r(t)},masking:function(t){return new Lr(t)}});Object.freeze({binaryAccuracy:function(t,e){return Pe(t,e)},binaryCrossentropy:function(t,e){return Ge(t,e)},sparseCategoricalAccuracy:function(t,e){return qe(t,e)},categoricalAccuracy:function(t,e){return je(t,e)},categoricalCrossentropy:function(t,e){return He(t,e)},precision:function(t,e){return We(t,e)},recall:function(t,e){return Ue(t,e)},cosineProximity:function(t,e){return ze(t,e)},meanAbsoluteError:function(t,e){return Te(t,e)},meanAbsolutePercentageError:function(t,e){return De(t,e)},MAPE:function(t,e){return De(t,e)},mape:function(t,e){return De(t,e)},meanSquaredError:function(t,e){return Re(t,e)},MSE:function(t,e){return Re(t,e)},mse:function(t,e){return Re(t,e)}}),Object.freeze({modelFromJSON:function(t,e){return u(this,void 0,void 0,(function(){var n,i,a,o,s,u,l,p;return c(this,(function(c){switch(c.label){case 0:return"modelTopology"in t||(t={modelTopology:t}),null!=(n=(t=t).modelTopology).model_config&&(n=n.model_config),i=rn(n),a=ke(i,e),null==t.weightsManifest?[3,2]:[4,r.pb.loadWeights(t.weightsManifest,t.pathPrefix,a.weights.map((function(t){return t.originalName})))];case 1:for(o=c.sent(),s={},u=0,l=a.weights;u<l.length;u++)p=l[u],s[p.originalName]=o[p.originalName];a.loadWeights(s),Object(r.R)(o),c.label=2;case 2:return[2,a]}}))}))}});Object.freeze({l1l2:function(t){return new nr(t)},l1:function(t){return function(t){return tr(t),new nr({l1:null!=t?t.l1:null,l2:0})}(t)},l2:function(t){return function(t){return tr(t),new nr({l2:null!=t?t.l2:null,l1:0})}(t)}});function Hi(t,e){return t<e}function Ki(t,e){return t>e}!function(t){function e(e){var n=t.call(this)||this;if(null==e&&(e={}),e.restoreBestWeights)throw new d("restoreBestWeights = True is not implemented in EarlyStopping yet.");return n.monitor=e.monitor||"val_loss",n.minDelta=Math.abs(e.minDelta||0),n.patience=e.patience||0,n.verbose=e.verbose||0,n.mode=e.mode||"auto",n.baseline=e.baseline,-1===["auto","min","max"].indexOf(n.mode)&&(console.warn("EarlyStopping mode '"+n.mode+"' is invalid. Falling back to mode 'auto'."),n.mode="auto"),"min"===n.mode?n.monitorFunc=Hi:"max"===n.mode?n.monitorFunc=Ki:-1!==n.monitor.indexOf("acc")?n.monitorFunc=Ki:n.monitorFunc=Hi,n.monitorFunc===Hi&&(n.minDelta*=-1),n}a(e,t),e.prototype.onTrainBegin=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Hi?1/0:-1/0,[2]}))}))},e.prototype.onEpochEnd=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:return[4,ve(e)];case 1:return r.sent(),null==(n=this.getMonitorValue(e))?[2]:(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)),[2])}}))}))},e.prototype.onTrainEnd=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){return this.stoppedEpoch>0&&this.verbose&&console.log("Epoch "+this.stoppedEpoch+": early stopping."),[2]}))}))},e.prototype.getMonitorValue=function(t){null==t&&(t={});var e=t[this.monitor];return null==e&&console.warn("Metric for EarlyStopping "+this.monitor+" is not available. Available metrics are: "+Object.keys(t)),e}}(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.model=null,e}return a(e,t),e.prototype.setModel=function(t){if(!(t instanceof Fn))throw new Error("model must be a LayersModel, not some other Container");this.model=t},e}(xe));var Xi=n(2),Yi=n(3);r.ed,Yi.a,Xi.b;const $i=100;var Ji,Zi,Qi,ta,ea,na,ra,ia,aa,oa,sa,ua,ca,la,pa,ha,fa,da,ma,ga;function va(t){const e=Oa.getLayer(t).kernel.val,n=Oa.getLayer(t).bias.val;return e.trainable=!1,n.trainable=!1,[e,n]}function ya(t,e){return r.Vc(()=>{const n=r.J(t,e[0],[1,1],"same");return r.hc(r.f(n,e[1]))})}function ba(t){return r.Gb(t,[2,2],[2,2],"same")}function xa(t){Ji=ya(t,sa),Zi=ya(Ji,ua),Qi=ba(Zi),ta=ya(Qi,ca),ea=ya(ta,la),na=ba(ea),ra=ya(na,pa)}function wa(t,e,n){return r.Vc(()=>{const i=t.reshape([e,n]);return r.Eb(r.Zc(i),i)})}n.d(e,"vgg16_model",(function(){return Oa})),n.d(e,"style_img",(function(){return ka})),n.d(e,"gen_img",(function(){return Aa})),n.d(e,"contentImage_fast",(function(){return _a})),n.d(e,"styleImage_fast",(function(){return Fa})),n.d(e,"resultimg_fast",(function(){return Ma}));const Ca=224,Na=224,Sa=r.nc(.5),Ea=r.nc(128);var Oa,Ia,ka,Aa;const Ra=document.getElementById("contentimg"),Ta=document.getElementById("styleimg"),Da=document.getElementById("resultimg"),_a=document.getElementById("contentimg-fast"),Fa=document.getElementById("styleimg-fast"),Ma=document.getElementById("resultimg-fast"),za=document.getElementById("confirm-fast"),La=document.getElementById("sinput"),Ba=document.getElementById("cinput"),Pa=document.getElementById("train"),ja=document.getElementById("confirm"),Va=document.getElementById("styleselect-fast"),Wa=document.getElementById("contentselect-fast"),Ua=document.getElementById("styleselect"),Ga=document.getElementById("contentselect"),qa=document.getElementById("switch"),Ha=document.getElementById("main"),Ka=document.getElementById("main-fast");var Xa=1;async function Ya(){ka=Ja(Ta),Pa.disabled=!0,ja.disabled=!0,await(xa(ka),ia=Ji,aa=ta,void(oa=ra)),Pa.disabled=!1,ja.disabled=!1}async function $a(){await r.Tb(),Pa.disabled=!0,ja.disabled=!0,await r.Tb(),Ia=Ja(Ra),Aa=r.Vc(()=>{const t=r.dc([1,Ca,Na,3],-20,20,"float32"),e=r.Pb(t,Sa).add(r.Pb(Ia,r.Nc(r.nc(1),Sa)));return r.dd(e)}),await function(){const t=r.Yc.adam(1);for(let e=0;e<$i;e++)t.minimize(()=>r.Vc(()=>{xa(Aa);var t=r.nc(0);ha=Ji.shape[1]*Ji.shape[2],fa=Ji.shape[3],da=.2;const e=wa(Ji,ha,fa),n=wa(ia,ha,fa);t=t.add(r.nc(da).div(r.nc(4*ha*ha*fa*fa)).mul(r.Oc(r.Zb(r.Nc(e,n),2)))),ha=ta.shape[1]*ta.shape[2],fa=ta.shape[3],da=.2;const i=wa(ta,ha,fa),a=wa(aa,ha,fa);t=t.add(r.nc(da).div(r.nc(4*ha*ha*fa*fa)).mul(r.Oc(r.Zb(r.Nc(i,a),2)))),ha=ra.shape[1]*ra.shape[2],fa=ra.shape[3],da=.2;const o=wa(ra,ha,fa),s=wa(oa,ha,fa);return t=t.add(r.nc(da).div(r.nc(4*ha*ha*fa*fa)).mul(r.Oc(r.Zb(r.Nc(o,s),2))))}))}(),function(t){const e=t.add(Ea),n=e.reshape([Ca,Na,3]),i=r.ob.resizeBilinear(n,[Ca,Ra.width]),a=i.div(r.nc(255)).clipByValue(0,1);e.dispose(),n.dispose(),i.dispose(),r.y.toPixels(a,Da)}(Aa),Pa.disabled=!1,ja.disabled=!1,console.log(r.Kb())}function Ja(t){return console.log(t.width,t.height),r.Vc(()=>{const e=r.y.fromPixels(t).toFloat();return r.ob.resizeBilinear(e,[Ca,Na]).expandDims(0).sub(Ea)})}Ha.hidden=!1,Ka.hidden=!0,qa.onclick=function(){1==Xa?(Xa=0,console.log(Xa),qa.innerHTML="初始",Ka.style.display="none",Ha.style.display="flex"):(Xa=1,console.log(Xa),qa.innerHTML="快速",Ha.style.display="none",Ka.style.display="flex")},Ra.height=Ca,Ta.height=Ca,za.onclick=function(){!async function(){await r.Tb(),await r.Tb();let t=await r.Vc(()=>ma.predict(r.y.fromPixels(Fa).toFloat().div(r.nc(255)).expandDims()));await r.Tb();const e=await r.Vc(()=>ga.predict([r.y.fromPixels(_a).toFloat().div(r.nc(255)).expandDims(),t]).squeeze());await r.y.toPixels(e,Ma),console.log("success"),t.dispose(),e.dispose()}()},La.onchange=function(){var t=this.files[0],e=new FileReader;e.readAsDataURL(t),e.onload=function(){1==Xa?Fa.src=e.result:styleimg.src=e.result}},Ba.onchange=function(){var t=this.files[0],e=new FileReader;e.readAsDataURL(t),e.onload=function(){1==Xa?_a.src=e.result:contentimg.src=e.result}},Ua.onchange=function(){2==Ua.selectedIndex?styleimg.src="style.jpg":La.click()},Ga.onchange=function(){2==Ga.selectedIndex?contentimg.src="dog.jpg":Ba.click()},Va.onchange=function(){2==Va.selectedIndex?Fa.src="style.jpg":La.click()},Wa.onchange=function(){2==Wa.selectedIndex?_a.src="dog.jpg":Ba.click()},console.log("Loading Model..."),async function(){Oa=await Ln("./model/model.json"),console.log("Loaded!"),sa=va("block1_conv1"),ua=va("block1_conv2"),ca=va("block2_conv1"),la=va("block2_conv2"),pa=va("block3_conv1")}(),async function(){ma=await Xi.a("saved_model_style_js/model.json"),ga=await Xi.a("saved_model_transformer_separable_js/model.json"),console.log("Loaded!")}(),Pa.onclick=function(){Ya()},ja.onclick=function(){$a()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,